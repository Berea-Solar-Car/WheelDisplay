
SpeedScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f8c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004114  08004114  00005114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800414c  0800414c  00006028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800414c  0800414c  00006028  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800414c  0800414c  00006028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800414c  0800414c  0000514c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004150  08004150  00005150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08004154  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006028  2**0
                  CONTENTS
 10 .bss          00000128  20000028  20000028  00006028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000150  20000150  00006028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a33c  00000000  00000000  00006058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000167b  00000000  00000000  00010394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e0  00000000  00000000  00011a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000060b  00000000  00000000  000121f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019db3  00000000  00000000  000127fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000980b  00000000  00000000  0002c5ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099779  00000000  00000000  00035db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000cf532  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000020d0  00000000  00000000  000cf578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  000d1648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080040fc 	.word	0x080040fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	080040fc 	.word	0x080040fc

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2iz>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800079c:	d215      	bcs.n	80007ca <__aeabi_d2iz+0x36>
 800079e:	d511      	bpl.n	80007c4 <__aeabi_d2iz+0x30>
 80007a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d912      	bls.n	80007d0 <__aeabi_d2iz+0x3c>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007ba:	fa23 f002 	lsr.w	r0, r3, r2
 80007be:	bf18      	it	ne
 80007c0:	4240      	negne	r0, r0
 80007c2:	4770      	bx	lr
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	4770      	bx	lr
 80007ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ce:	d105      	bne.n	80007dc <__aeabi_d2iz+0x48>
 80007d0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80007d4:	bf08      	it	eq
 80007d6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	0000      	movs	r0, r0
	...

080007e8 <HAL_CAN_RxFifo0MsgPendingCallback>:
int RPM = 0;
int SOC = 0;
int fails = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80007f0:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80007f2:	4a24      	ldr	r2, [pc, #144]	@ (8000884 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80007f4:	2100      	movs	r1, #0
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f001 f881 	bl	80018fe <HAL_CAN_GetRxMessage>
	switch(RxHeader.StdId)
 80007fc:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f240 1215 	movw	r2, #277	@ 0x115
 8000804:	4293      	cmp	r3, r2
 8000806:	d007      	beq.n	8000818 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
 8000808:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 800080c:	d22c      	bcs.n	8000868 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
 800080e:	2b73      	cmp	r3, #115	@ 0x73
 8000810:	d00a      	beq.n	8000828 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
 8000812:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 8000816:	e027      	b.n	8000868 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
		case 0x115:
			//packC = RxData[0];
			//ampHours = RxData[1];
			//packVS = RxData[2];
			//packVO = RxData[3];
			SOC = RxData[4]/2;
 8000818:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 800081a:	791b      	ldrb	r3, [r3, #4]
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	b2db      	uxtb	r3, r3
 8000820:	461a      	mov	r2, r3
 8000822:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000824:	601a      	str	r2, [r3, #0]
			break;
 8000826:	e01f      	b.n	8000868 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
		case 0x73:
			RPM = RxData[0] * 256;
 8000828:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	021b      	lsls	r3, r3, #8
 800082e:	4a17      	ldr	r2, [pc, #92]	@ (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000830:	6013      	str	r3, [r2, #0]
			RPM += RxData[1];
 8000832:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000834:	785b      	ldrb	r3, [r3, #1]
 8000836:	461a      	mov	r2, r3
 8000838:	4b14      	ldr	r3, [pc, #80]	@ (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4413      	add	r3, r2
 800083e:	4a13      	ldr	r2, [pc, #76]	@ (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000840:	6013      	str	r3, [r2, #0]
			/*RPM *= 60;//to per hour
			RPM *= 2 * 3.141592653589 * 18.17;//to inches
			RPM/=12;//to feet
			RPM/=5280;//to miles*/

			RPM *= 0.1081112472;//combined into one step
 8000842:	4b12      	ldr	r3, [pc, #72]	@ (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff3a 	bl	80006c0 <__aeabi_i2d>
 800084c:	a30a      	add	r3, pc, #40	@ (adr r3, 8000878 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 800084e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000852:	f7ff fcb9 	bl	80001c8 <__aeabi_dmul>
 8000856:	4602      	mov	r2, r0
 8000858:	460b      	mov	r3, r1
 800085a:	4610      	mov	r0, r2
 800085c:	4619      	mov	r1, r3
 800085e:	f7ff ff99 	bl	8000794 <__aeabi_d2iz>
 8000862:	4603      	mov	r3, r0
 8000864:	4a09      	ldr	r2, [pc, #36]	@ (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000866:	6013      	str	r3, [r2, #0]

	}
	received = true;
 8000868:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 800086a:	2201      	movs	r2, #1
 800086c:	701a      	strb	r2, [r3, #0]
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	bf0dc3f9 	.word	0xbf0dc3f9
 800087c:	3fbbad2d 	.word	0x3fbbad2d
 8000880:	20000114 	.word	0x20000114
 8000884:	200000f8 	.word	0x200000f8
 8000888:	20000144 	.word	0x20000144
 800088c:	20000140 	.word	0x20000140
 8000890:	200000f4 	.word	0x200000f4

08000894 <waitForMessage>:

void waitForMessage()
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
	for(int i  = 0; !received && i < 40; i++)
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	e005      	b.n	80008ac <waitForMessage+0x18>
	{
		HAL_Delay(25);
 80008a0:	2019      	movs	r0, #25
 80008a2:	f000 fd2f 	bl	8001304 <HAL_Delay>
	for(int i  = 0; !received && i < 40; i++)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3301      	adds	r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <waitForMessage+0x34>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	f083 0301 	eor.w	r3, r3, #1
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d002      	beq.n	80008c0 <waitForMessage+0x2c>
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b27      	cmp	r3, #39	@ 0x27
 80008be:	ddef      	ble.n	80008a0 <waitForMessage+0xc>
	}
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200000f4 	.word	0x200000f4

080008cc <getRPM>:

void getRPM()
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	received = false;
 80008d0:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <getRPM+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]

	TxHeader.DLC = 1;
 80008d6:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <getRPM+0x5c>)
 80008d8:	2201      	movs	r2, #1
 80008da:	611a      	str	r2, [r3, #16]
	TxData[0] = 0x37;
 80008dc:	4b13      	ldr	r3, [pc, #76]	@ (800092c <getRPM+0x60>)
 80008de:	2237      	movs	r2, #55	@ 0x37
 80008e0:	701a      	strb	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 80008e2:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <getRPM+0x5c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x6B; // ID
 80008e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <getRPM+0x5c>)
 80008ea:	226b      	movs	r2, #107	@ 0x6b
 80008ec:	601a      	str	r2, [r3, #0]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80008ee:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <getRPM+0x64>)
 80008f0:	4a0e      	ldr	r2, [pc, #56]	@ (800092c <getRPM+0x60>)
 80008f2:	490d      	ldr	r1, [pc, #52]	@ (8000928 <getRPM+0x5c>)
 80008f4:	480f      	ldr	r0, [pc, #60]	@ (8000934 <getRPM+0x68>)
 80008f6:	f000 ff32 	bl	800175e <HAL_CAN_AddTxMessage>
	waitForMessage();
 80008fa:	f7ff ffcb 	bl	8000894 <waitForMessage>

	if(!received)
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <getRPM+0x58>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	f083 0301 	eor.w	r3, r3, #1
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d008      	beq.n	800091e <getRPM+0x52>
	{
		fails++;
 800090c:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <getRPM+0x6c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	3301      	adds	r3, #1
 8000912:	4a09      	ldr	r2, [pc, #36]	@ (8000938 <getRPM+0x6c>)
 8000914:	6013      	str	r3, [r2, #0]
		RPM = fails;
 8000916:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <getRPM+0x6c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a08      	ldr	r2, [pc, #32]	@ (800093c <getRPM+0x70>)
 800091c:	6013      	str	r3, [r2, #0]
	}
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200000f4 	.word	0x200000f4
 8000928:	20000120 	.word	0x20000120
 800092c:	20000138 	.word	0x20000138
 8000930:	2000011c 	.word	0x2000011c
 8000934:	20000044 	.word	0x20000044
 8000938:	20000148 	.word	0x20000148
 800093c:	20000140 	.word	0x20000140

08000940 <delay_us>:

int Dpins[2] = {DIO1_Pin, DIO2_Pin};
int Cpins[2] = {Clk1_Pin, Clk2_Pin};

void delay_us (int time)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < time; i++)
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	e00c      	b.n	8000968 <delay_us+0x28>
	{
		for (int j = 0; j < 6; j++)
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	e003      	b.n	800095c <delay_us+0x1c>
		{
			__asm__("nop");
 8000954:	bf00      	nop
		for (int j = 0; j < 6; j++)
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	3301      	adds	r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	2b05      	cmp	r3, #5
 8000960:	ddf8      	ble.n	8000954 <delay_us+0x14>
	for (int i = 0; i < time; i++)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	3301      	adds	r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fa      	ldr	r2, [r7, #12]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	429a      	cmp	r2, r3
 800096e:	dbee      	blt.n	800094e <delay_us+0xe>
		}
	}
}
 8000970:	bf00      	nop
 8000972:	bf00      	nop
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
	...

08000980 <data>:

void data(int set, int pin)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOB, Dpins[pin], set);
 800098a:	4a07      	ldr	r2, [pc, #28]	@ (80009a8 <data+0x28>)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000992:	b29b      	uxth	r3, r3
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	b2d2      	uxtb	r2, r2
 8000998:	4619      	mov	r1, r3
 800099a:	4804      	ldr	r0, [pc, #16]	@ (80009ac <data+0x2c>)
 800099c:	f001 fdaa 	bl	80024f4 <HAL_GPIO_WritePin>
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000000c 	.word	0x2000000c
 80009ac:	48000400 	.word	0x48000400

080009b0 <clock>:

void clock(int set, int pin)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOB, Cpins[pin], set);
 80009ba:	4a07      	ldr	r2, [pc, #28]	@ (80009d8 <clock+0x28>)
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	4804      	ldr	r0, [pc, #16]	@ (80009dc <clock+0x2c>)
 80009cc:	f001 fd92 	bl	80024f4 <HAL_GPIO_WritePin>
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000014 	.word	0x20000014
 80009dc:	48000400 	.word	0x48000400

080009e0 <start>:

void start (int pin)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	clock(1, pin);
 80009e8:	6879      	ldr	r1, [r7, #4]
 80009ea:	2001      	movs	r0, #1
 80009ec:	f7ff ffe0 	bl	80009b0 <clock>
	data(1, pin);
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	2001      	movs	r0, #1
 80009f4:	f7ff ffc4 	bl	8000980 <data>
	delay_us (2);
 80009f8:	2002      	movs	r0, #2
 80009fa:	f7ff ffa1 	bl	8000940 <delay_us>
	data(0, pin);
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff ffbd 	bl	8000980 <data>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <stop>:

void stop (int pin)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
	clock(0, pin);
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f7ff ffc9 	bl	80009b0 <clock>
	delay_us (2);
 8000a1e:	2002      	movs	r0, #2
 8000a20:	f7ff ff8e 	bl	8000940 <delay_us>
	data(0, pin);
 8000a24:	6879      	ldr	r1, [r7, #4]
 8000a26:	2000      	movs	r0, #0
 8000a28:	f7ff ffaa 	bl	8000980 <data>
	delay_us (2);
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f7ff ff87 	bl	8000940 <delay_us>
	clock(1, pin);
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	2001      	movs	r0, #1
 8000a36:	f7ff ffbb 	bl	80009b0 <clock>
	delay_us (2);
 8000a3a:	2002      	movs	r0, #2
 8000a3c:	f7ff ff80 	bl	8000940 <delay_us>
	data(1, pin);
 8000a40:	6879      	ldr	r1, [r7, #4]
 8000a42:	2001      	movs	r0, #1
 8000a44:	f7ff ff9c 	bl	8000980 <data>
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <ack>:

void ack(int pin)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	clock(0, pin);
 8000a58:	6879      	ldr	r1, [r7, #4]
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f7ff ffa8 	bl	80009b0 <clock>
	delay_us(5);
 8000a60:	2005      	movs	r0, #5
 8000a62:	f7ff ff6d 	bl	8000940 <delay_us>
	clock(1, pin);
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f7ff ffa1 	bl	80009b0 <clock>
	delay_us(2);
 8000a6e:	2002      	movs	r0, #2
 8000a70:	f7ff ff66 	bl	8000940 <delay_us>
	clock(0, pin);
 8000a74:	6879      	ldr	r1, [r7, #4]
 8000a76:	2000      	movs	r0, #0
 8000a78:	f7ff ff9a 	bl	80009b0 <clock>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <dispByte>:

void dispByte(uint8_t d, int pin)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 8; i++)
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	e01a      	b.n	8000acc <dispByte+0x48>
	{
		clock(0, pin);
 8000a96:	6839      	ldr	r1, [r7, #0]
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff ff89 	bl	80009b0 <clock>
		data(d%2, pin);
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	6839      	ldr	r1, [r7, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ff6a 	bl	8000980 <data>
		delay_us(3);
 8000aac:	2003      	movs	r0, #3
 8000aae:	f7ff ff47 	bl	8000940 <delay_us>
		d = d >> 1;
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	085b      	lsrs	r3, r3, #1
 8000ab6:	71fb      	strb	r3, [r7, #7]
		clock(1, pin);
 8000ab8:	6839      	ldr	r1, [r7, #0]
 8000aba:	2001      	movs	r0, #1
 8000abc:	f7ff ff78 	bl	80009b0 <clock>
		delay_us(3);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f7ff ff3d 	bl	8000940 <delay_us>
	for(int i = 0; i < 8; i++)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2b07      	cmp	r3, #7
 8000ad0:	dde1      	ble.n	8000a96 <dispByte+0x12>
	}
	ack(pin);
 8000ad2:	6838      	ldr	r0, [r7, #0]
 8000ad4:	f7ff ffbc 	bl	8000a50 <ack>
}
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <brightness>:

void brightness(int pin)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	start(pin);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ff79 	bl	80009e0 <start>
	dispByte(0x8A, pin);
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	208a      	movs	r0, #138	@ 0x8a
 8000af2:	f7ff ffc7 	bl	8000a84 <dispByte>
	stop(pin);
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff ff89 	bl	8000a0e <stop>
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <dispData>:

void dispData(int index, uint8_t* d, int size, int pin)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
 8000b10:	603b      	str	r3, [r7, #0]
	start(pin);
 8000b12:	6838      	ldr	r0, [r7, #0]
 8000b14:	f7ff ff64 	bl	80009e0 <start>
	dispByte(0x40, pin);
 8000b18:	6839      	ldr	r1, [r7, #0]
 8000b1a:	2040      	movs	r0, #64	@ 0x40
 8000b1c:	f7ff ffb2 	bl	8000a84 <dispByte>
	stop(pin);
 8000b20:	6838      	ldr	r0, [r7, #0]
 8000b22:	f7ff ff74 	bl	8000a0e <stop>

	start(pin);
 8000b26:	6838      	ldr	r0, [r7, #0]
 8000b28:	f7ff ff5a 	bl	80009e0 <start>
	dispByte(192 + index, pin);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	3b40      	subs	r3, #64	@ 0x40
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	6839      	ldr	r1, [r7, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ffa4 	bl	8000a84 <dispByte>
	for(int i = 0; i < size; i++) dispByte(d[i], pin);
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	e00a      	b.n	8000b58 <dispData+0x54>
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	68ba      	ldr	r2, [r7, #8]
 8000b46:	4413      	add	r3, r2
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	6839      	ldr	r1, [r7, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff99 	bl	8000a84 <dispByte>
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	3301      	adds	r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	dbf0      	blt.n	8000b42 <dispData+0x3e>
	stop(pin);
 8000b60:	6838      	ldr	r0, [r7, #0]
 8000b62:	f7ff ff54 	bl	8000a0e <stop>
	brightness(pin);
 8000b66:	6838      	ldr	r0, [r7, #0]
 8000b68:	f7ff ffba 	bl	8000ae0 <brightness>
}
 8000b6c:	bf00      	nop
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <dispNumber>:

void dispNumber(int index, int rIndex, int n, int pin, int size, int colon)
{
 8000b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b78:	b089      	sub	sp, #36	@ 0x24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	466b      	mov	r3, sp
 8000b86:	461e      	mov	r6, r3
	if(size == 0) for(int i = n; i > 0; i/=10) size++;
 8000b88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d110      	bne.n	8000bb0 <dispNumber+0x3c>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	61fb      	str	r3, [r7, #28]
 8000b92:	e00a      	b.n	8000baa <dispNumber+0x36>
 8000b94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b96:	3301      	adds	r3, #1
 8000b98:	643b      	str	r3, [r7, #64]	@ 0x40
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	4a3e      	ldr	r2, [pc, #248]	@ (8000c98 <dispNumber+0x124>)
 8000b9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba2:	1092      	asrs	r2, r2, #2
 8000ba4:	17db      	asrs	r3, r3, #31
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	61fb      	str	r3, [r7, #28]
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	dcf1      	bgt.n	8000b94 <dispNumber+0x20>

	uint8_t data[size];
 8000bb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000bb2:	1e4b      	subs	r3, r1, #1
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	460a      	mov	r2, r1
 8000bb8:	2300      	movs	r3, #0
 8000bba:	4690      	mov	r8, r2
 8000bbc:	4699      	mov	r9, r3
 8000bbe:	f04f 0200 	mov.w	r2, #0
 8000bc2:	f04f 0300 	mov.w	r3, #0
 8000bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bd2:	460a      	mov	r2, r1
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	4614      	mov	r4, r2
 8000bd8:	461d      	mov	r5, r3
 8000bda:	f04f 0200 	mov.w	r2, #0
 8000bde:	f04f 0300 	mov.w	r3, #0
 8000be2:	00eb      	lsls	r3, r5, #3
 8000be4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000be8:	00e2      	lsls	r2, r4, #3
 8000bea:	460b      	mov	r3, r1
 8000bec:	3307      	adds	r3, #7
 8000bee:	08db      	lsrs	r3, r3, #3
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	ebad 0d03 	sub.w	sp, sp, r3
 8000bf6:	466b      	mov	r3, sp
 8000bf8:	3300      	adds	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]
	for(int i = size - 1; i >= 0; i--)
 8000bfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	61bb      	str	r3, [r7, #24]
 8000c02:	e032      	b.n	8000c6a <dispNumber+0xf6>
	{
		data[i] = segments[n%10];
 8000c04:	6879      	ldr	r1, [r7, #4]
 8000c06:	4b24      	ldr	r3, [pc, #144]	@ (8000c98 <dispNumber+0x124>)
 8000c08:	fb83 2301 	smull	r2, r3, r3, r1
 8000c0c:	109a      	asrs	r2, r3, #2
 8000c0e:	17cb      	asrs	r3, r1, #31
 8000c10:	1ad2      	subs	r2, r2, r3
 8000c12:	4613      	mov	r3, r2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	4413      	add	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	1aca      	subs	r2, r1, r3
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c9c <dispNumber+0x128>)
 8000c1e:	5c99      	ldrb	r1, [r3, r2]
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	4413      	add	r3, r2
 8000c26:	460a      	mov	r2, r1
 8000c28:	701a      	strb	r2, [r3, #0]
		n/=10;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a1a      	ldr	r2, [pc, #104]	@ (8000c98 <dispNumber+0x124>)
 8000c2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c32:	1092      	asrs	r2, r2, #2
 8000c34:	17db      	asrs	r3, r3, #31
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	607b      	str	r3, [r7, #4]
		if(colon != 0 && data[i] < 128) data[i] += 128;
 8000c3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d011      	beq.n	8000c64 <dispNumber+0xf0>
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	4413      	add	r3, r2
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b25b      	sxtb	r3, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db0a      	blt.n	8000c64 <dispNumber+0xf0>
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	4413      	add	r3, r2
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	3b80      	subs	r3, #128	@ 0x80
 8000c58:	b2d9      	uxtb	r1, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	4413      	add	r3, r2
 8000c60:	460a      	mov	r2, r1
 8000c62:	701a      	strb	r2, [r3, #0]
	for(int i = size - 1; i >= 0; i--)
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	61bb      	str	r3, [r7, #24]
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	dac9      	bge.n	8000c04 <dispNumber+0x90>
	}

	if(rIndex != 0) index -= size - 1;
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d004      	beq.n	8000c80 <dispNumber+0x10c>
 8000c76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	60fb      	str	r3, [r7, #12]

	dispData(index, data, size, pin);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000c84:	6939      	ldr	r1, [r7, #16]
 8000c86:	68f8      	ldr	r0, [r7, #12]
 8000c88:	f7ff ff3c 	bl	8000b04 <dispData>
 8000c8c:	46b5      	mov	sp, r6
}
 8000c8e:	bf00      	nop
 8000c90:	3724      	adds	r7, #36	@ 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c98:	66666667 	.word	0x66666667
 8000c9c:	20000000 	.word	0x20000000

08000ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca6:	f000 fac7 	bl	8001238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000caa:	f000 f83d 	bl	8000d28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cae:	f000 f901 	bl	8000eb4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cb2:	f000 f8cf 	bl	8000e54 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000cb6:	f000 f879 	bl	8000dac <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000cba:	4817      	ldr	r0, [pc, #92]	@ (8000d18 <main+0x78>)
 8000cbc:	f000 fd0b 	bl	80016d6 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	4815      	ldr	r0, [pc, #84]	@ (8000d18 <main+0x78>)
 8000cc4:	f000 ff3d 	bl	8001b42 <HAL_CAN_ActivateNotification>
  HAL_Delay(30);
 8000cc8:	201e      	movs	r0, #30
 8000cca:	f000 fb1b 	bl	8001304 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  getRPM();
 8000cce:	f7ff fdfd 	bl	80008cc <getRPM>

	  dispNumber(3, 1, RPM, 0, 4, 0);
 8000cd2:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <main+0x7c>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	9301      	str	r3, [sp, #4]
 8000cda:	2304      	movs	r3, #4
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	2300      	movs	r3, #0
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	2003      	movs	r0, #3
 8000ce4:	f7ff ff46 	bl	8000b74 <dispNumber>
	  dispNumber(3, 1, SOC%100, 1, 2, 0);
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <main+0x80>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0d      	ldr	r2, [pc, #52]	@ (8000d24 <main+0x84>)
 8000cee:	fb82 1203 	smull	r1, r2, r2, r3
 8000cf2:	1151      	asrs	r1, r2, #5
 8000cf4:	17da      	asrs	r2, r3, #31
 8000cf6:	1a8a      	subs	r2, r1, r2
 8000cf8:	2164      	movs	r1, #100	@ 0x64
 8000cfa:	fb01 f202 	mul.w	r2, r1, r2
 8000cfe:	1a9a      	subs	r2, r3, r2
 8000d00:	2300      	movs	r3, #0
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f7ff ff31 	bl	8000b74 <dispNumber>
	  getRPM();
 8000d12:	bf00      	nop
 8000d14:	e7db      	b.n	8000cce <main+0x2e>
 8000d16:	bf00      	nop
 8000d18:	20000044 	.word	0x20000044
 8000d1c:	20000140 	.word	0x20000140
 8000d20:	20000144 	.word	0x20000144
 8000d24:	51eb851f 	.word	0x51eb851f

08000d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b090      	sub	sp, #64	@ 0x40
 8000d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2e:	f107 0318 	add.w	r3, r7, #24
 8000d32:	2228      	movs	r2, #40	@ 0x28
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f003 f9b3 	bl	80040a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d52:	2310      	movs	r3, #16
 8000d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d56:	2302      	movs	r3, #2
 8000d58:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d5e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d64:	f107 0318 	add.w	r3, r7, #24
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 fbdb 	bl	8002524 <HAL_RCC_OscConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d74:	f000 f8e8 	bl	8000f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d78:	230f      	movs	r3, #15
 8000d7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2102      	movs	r1, #2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f002 fbd4 	bl	8003540 <HAL_RCC_ClockConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d9e:	f000 f8d3 	bl	8000f48 <Error_Handler>
  }
}
 8000da2:	bf00      	nop
 8000da4:	3740      	adds	r7, #64	@ 0x40
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	@ 0x28
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000db2:	4b26      	ldr	r3, [pc, #152]	@ (8000e4c <MX_CAN_Init+0xa0>)
 8000db4:	4a26      	ldr	r2, [pc, #152]	@ (8000e50 <MX_CAN_Init+0xa4>)
 8000db6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000db8:	4b24      	ldr	r3, [pc, #144]	@ (8000e4c <MX_CAN_Init+0xa0>)
 8000dba:	2208      	movs	r2, #8
 8000dbc:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000dbe:	4b23      	ldr	r3, [pc, #140]	@ (8000e4c <MX_CAN_Init+0xa0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000dc4:	4b21      	ldr	r3, [pc, #132]	@ (8000e4c <MX_CAN_Init+0xa0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000dca:	4b20      	ldr	r3, [pc, #128]	@ (8000e4c <MX_CAN_Init+0xa0>)
 8000dcc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000dd0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e4c <MX_CAN_Init+0xa0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <MX_CAN_Init+0xa0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000dde:	4b1b      	ldr	r3, [pc, #108]	@ (8000e4c <MX_CAN_Init+0xa0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000de4:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <MX_CAN_Init+0xa0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000dea:	4b18      	ldr	r3, [pc, #96]	@ (8000e4c <MX_CAN_Init+0xa0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000df0:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <MX_CAN_Init+0xa0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000df6:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <MX_CAN_Init+0xa0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000dfc:	4813      	ldr	r0, [pc, #76]	@ (8000e4c <MX_CAN_Init+0xa0>)
 8000dfe:	f000 faa5 	bl	800134c <HAL_CAN_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000e08:	f000 f89e 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

   canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	623b      	str	r3, [r7, #32]
   canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8000e10:	230a      	movs	r3, #10
 8000e12:	617b      	str	r3, [r7, #20]
   canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
   canfilterconfig.FilterIdHigh = 0b10000<<5;
 8000e18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e1c:	603b      	str	r3, [r7, #0]
   canfilterconfig.FilterIdLow = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
   canfilterconfig.FilterMaskIdHigh = 0b10000<<5;
 8000e22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e26:	60bb      	str	r3, [r7, #8]
   canfilterconfig.FilterMaskIdLow = 0x0000;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
   canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
   canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e30:	2301      	movs	r3, #1
 8000e32:	61fb      	str	r3, [r7, #28]
   canfilterconfig.SlaveStartFilterBank = 0;  // how many filters to assign to the CAN1 (master can)
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	@ 0x24

   HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000e38:	463b      	mov	r3, r7
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4803      	ldr	r0, [pc, #12]	@ (8000e4c <MX_CAN_Init+0xa0>)
 8000e3e:	f000 fb80 	bl	8001542 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	@ 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000044 	.word	0x20000044
 8000e50:	40006400 	.word	0x40006400

08000e54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e58:	4b14      	ldr	r3, [pc, #80]	@ (8000eac <MX_USART2_UART_Init+0x58>)
 8000e5a:	4a15      	ldr	r2, [pc, #84]	@ (8000eb0 <MX_USART2_UART_Init+0x5c>)
 8000e5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000e5e:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <MX_USART2_UART_Init+0x58>)
 8000e60:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000e64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <MX_USART2_UART_Init+0x58>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <MX_USART2_UART_Init+0x58>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <MX_USART2_UART_Init+0x58>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <MX_USART2_UART_Init+0x58>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <MX_USART2_UART_Init+0x58>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <MX_USART2_UART_Init+0x58>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <MX_USART2_UART_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <MX_USART2_UART_Init+0x58>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e96:	4805      	ldr	r0, [pc, #20]	@ (8000eac <MX_USART2_UART_Init+0x58>)
 8000e98:	f002 fd64 	bl	8003964 <HAL_UART_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ea2:	f000 f851 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	2000006c 	.word	0x2000006c
 8000eb0:	40004400 	.word	0x40004400

08000eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eba:	f107 030c 	add.w	r3, r7, #12
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eca:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <MX_GPIO_Init+0x8c>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	4a1c      	ldr	r2, [pc, #112]	@ (8000f40 <MX_GPIO_Init+0x8c>)
 8000ed0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ed4:	6153      	str	r3, [r2, #20]
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <MX_GPIO_Init+0x8c>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <MX_GPIO_Init+0x8c>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	4a16      	ldr	r2, [pc, #88]	@ (8000f40 <MX_GPIO_Init+0x8c>)
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eec:	6153      	str	r3, [r2, #20]
 8000eee:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <MX_GPIO_Init+0x8c>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <MX_GPIO_Init+0x8c>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	4a10      	ldr	r2, [pc, #64]	@ (8000f40 <MX_GPIO_Init+0x8c>)
 8000f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f04:	6153      	str	r3, [r2, #20]
 8000f06:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <MX_GPIO_Init+0x8c>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Clk2_Pin|DIO2_Pin|Clk1_Pin|DIO1_Pin, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	21f0      	movs	r1, #240	@ 0xf0
 8000f16:	480b      	ldr	r0, [pc, #44]	@ (8000f44 <MX_GPIO_Init+0x90>)
 8000f18:	f001 faec 	bl	80024f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Clk2_Pin DIO2_Pin Clk1_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = Clk2_Pin|DIO2_Pin|Clk1_Pin|DIO1_Pin;
 8000f1c:	23f0      	movs	r3, #240	@ 0xf0
 8000f1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	4619      	mov	r1, r3
 8000f32:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <MX_GPIO_Init+0x90>)
 8000f34:	f001 f96c 	bl	8002210 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f38:	bf00      	nop
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40021000 	.word	0x40021000
 8000f44:	48000400 	.word	0x48000400

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <Error_Handler+0x8>

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f98 <HAL_MspInit+0x44>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f98 <HAL_MspInit+0x44>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6193      	str	r3, [r2, #24]
 8000f66:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <HAL_MspInit+0x44>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <HAL_MspInit+0x44>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	4a08      	ldr	r2, [pc, #32]	@ (8000f98 <HAL_MspInit+0x44>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f7c:	61d3      	str	r3, [r2, #28]
 8000f7e:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <HAL_MspInit+0x44>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000

08000f9c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	@ 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a31      	ldr	r2, [pc, #196]	@ (8001080 <HAL_CAN_MspInit+0xe4>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d15b      	bne.n	8001076 <HAL_CAN_MspInit+0xda>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fbe:	4b31      	ldr	r3, [pc, #196]	@ (8001084 <HAL_CAN_MspInit+0xe8>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	4a30      	ldr	r2, [pc, #192]	@ (8001084 <HAL_CAN_MspInit+0xe8>)
 8000fc4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fc8:	61d3      	str	r3, [r2, #28]
 8000fca:	4b2e      	ldr	r3, [pc, #184]	@ (8001084 <HAL_CAN_MspInit+0xe8>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001084 <HAL_CAN_MspInit+0xe8>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	4a2a      	ldr	r2, [pc, #168]	@ (8001084 <HAL_CAN_MspInit+0xe8>)
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe0:	6153      	str	r3, [r2, #20]
 8000fe2:	4b28      	ldr	r3, [pc, #160]	@ (8001084 <HAL_CAN_MspInit+0xe8>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001000:	2309      	movs	r3, #9
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100e:	f001 f8ff 	bl	8002210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001012:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001024:	2309      	movs	r3, #9
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001032:	f001 f8ed 	bl	8002210 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2013      	movs	r0, #19
 800103c:	f001 f8b1 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 8001040:	2013      	movs	r0, #19
 8001042:	f001 f8ca 	bl	80021da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	2014      	movs	r0, #20
 800104c:	f001 f8a9 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8001050:	2014      	movs	r0, #20
 8001052:	f001 f8c2 	bl	80021da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	2015      	movs	r0, #21
 800105c:	f001 f8a1 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8001060:	2015      	movs	r0, #21
 8001062:	f001 f8ba 	bl	80021da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2016      	movs	r0, #22
 800106c:	f001 f899 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8001070:	2016      	movs	r0, #22
 8001072:	f001 f8b2 	bl	80021da <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	@ 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40006400 	.word	0x40006400
 8001084:	40021000 	.word	0x40021000

08001088 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	@ 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a18      	ldr	r2, [pc, #96]	@ (8001108 <HAL_UART_MspInit+0x80>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d129      	bne.n	80010fe <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010aa:	4b18      	ldr	r3, [pc, #96]	@ (800110c <HAL_UART_MspInit+0x84>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	4a17      	ldr	r2, [pc, #92]	@ (800110c <HAL_UART_MspInit+0x84>)
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010b4:	61d3      	str	r3, [r2, #28]
 80010b6:	4b15      	ldr	r3, [pc, #84]	@ (800110c <HAL_UART_MspInit+0x84>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	4b12      	ldr	r3, [pc, #72]	@ (800110c <HAL_UART_MspInit+0x84>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	4a11      	ldr	r2, [pc, #68]	@ (800110c <HAL_UART_MspInit+0x84>)
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010cc:	6153      	str	r3, [r2, #20]
 80010ce:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <HAL_UART_MspInit+0x84>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80010da:	f248 0304 	movw	r3, #32772	@ 0x8004
 80010de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ec:	2307      	movs	r3, #7
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010fa:	f001 f889 	bl	8002210 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	@ 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40004400 	.word	0x40004400
 800110c:	40021000 	.word	0x40021000

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <NMI_Handler+0x4>

08001118 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <MemManage_Handler+0x4>

08001128 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <BusFault_Handler+0x4>

08001130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <UsageFault_Handler+0x4>

08001138 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001166:	f000 f8ad 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001174:	4802      	ldr	r0, [pc, #8]	@ (8001180 <CAN_TX_IRQHandler+0x10>)
 8001176:	f000 fd0a 	bl	8001b8e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000044 	.word	0x20000044

08001184 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001188:	4802      	ldr	r0, [pc, #8]	@ (8001194 <CAN_RX0_IRQHandler+0x10>)
 800118a:	f000 fd00 	bl	8001b8e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000044 	.word	0x20000044

08001198 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800119c:	4802      	ldr	r0, [pc, #8]	@ (80011a8 <CAN_RX1_IRQHandler+0x10>)
 800119e:	f000 fcf6 	bl	8001b8e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000044 	.word	0x20000044

080011ac <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80011b0:	4802      	ldr	r0, [pc, #8]	@ (80011bc <CAN_SCE_IRQHandler+0x10>)
 80011b2:	f000 fcec 	bl	8001b8e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000044 	.word	0x20000044

080011c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <SystemInit+0x20>)
 80011c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ca:	4a05      	ldr	r2, [pc, #20]	@ (80011e0 <SystemInit+0x20>)
 80011cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800121c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011e8:	f7ff ffea 	bl	80011c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ec:	480c      	ldr	r0, [pc, #48]	@ (8001220 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ee:	490d      	ldr	r1, [pc, #52]	@ (8001224 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001228 <LoopForever+0xe>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001204:	4c0a      	ldr	r4, [pc, #40]	@ (8001230 <LoopForever+0x16>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001212:	f002 ff4f 	bl	80040b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001216:	f7ff fd43 	bl	8000ca0 <main>

0800121a <LoopForever>:

LoopForever:
    b LoopForever
 800121a:	e7fe      	b.n	800121a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800121c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001224:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001228:	08004154 	.word	0x08004154
  ldr r2, =_sbss
 800122c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001230:	20000150 	.word	0x20000150

08001234 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <ADC1_2_IRQHandler>
	...

08001238 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <HAL_Init+0x28>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a07      	ldr	r2, [pc, #28]	@ (8001260 <HAL_Init+0x28>)
 8001242:	f043 0310 	orr.w	r3, r3, #16
 8001246:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001248:	2003      	movs	r0, #3
 800124a:	f000 ff9f 	bl	800218c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124e:	2000      	movs	r0, #0
 8001250:	f000 f808 	bl	8001264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001254:	f7ff fe7e 	bl	8000f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40022000 	.word	0x40022000

08001264 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_InitTick+0x54>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <HAL_InitTick+0x58>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 ffb7 	bl	80021f6 <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00e      	b.n	80012b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d80a      	bhi.n	80012ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f000 ff7f 	bl	80021a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a4:	4a06      	ldr	r2, [pc, #24]	@ (80012c0 <HAL_InitTick+0x5c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e000      	b.n	80012b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2000001c 	.word	0x2000001c
 80012bc:	20000024 	.word	0x20000024
 80012c0:	20000020 	.word	0x20000020

080012c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_IncTick+0x20>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <HAL_IncTick+0x24>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a04      	ldr	r2, [pc, #16]	@ (80012e8 <HAL_IncTick+0x24>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000024 	.word	0x20000024
 80012e8:	2000014c 	.word	0x2000014c

080012ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80012f0:	4b03      	ldr	r3, [pc, #12]	@ (8001300 <HAL_GetTick+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	2000014c 	.word	0x2000014c

08001304 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff ffee 	bl	80012ec <HAL_GetTick>
 8001310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131c:	d005      	beq.n	800132a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131e:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <HAL_Delay+0x44>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800132a:	bf00      	nop
 800132c:	f7ff ffde 	bl	80012ec <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	429a      	cmp	r2, r3
 800133a:	d8f7      	bhi.n	800132c <HAL_Delay+0x28>
  {
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000024 	.word	0x20000024

0800134c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e0ed      	b.n	800153a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d102      	bne.n	8001370 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff fe16 	bl	8000f9c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 0201 	orr.w	r2, r2, #1
 800137e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001380:	f7ff ffb4 	bl	80012ec <HAL_GetTick>
 8001384:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001386:	e012      	b.n	80013ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001388:	f7ff ffb0 	bl	80012ec <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b0a      	cmp	r3, #10
 8001394:	d90b      	bls.n	80013ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2205      	movs	r2, #5
 80013a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e0c5      	b.n	800153a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0e5      	beq.n	8001388 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0202 	bic.w	r2, r2, #2
 80013ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013cc:	f7ff ff8e 	bl	80012ec <HAL_GetTick>
 80013d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013d2:	e012      	b.n	80013fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013d4:	f7ff ff8a 	bl	80012ec <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b0a      	cmp	r3, #10
 80013e0:	d90b      	bls.n	80013fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2205      	movs	r2, #5
 80013f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e09f      	b.n	800153a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1e5      	bne.n	80013d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	7e1b      	ldrb	r3, [r3, #24]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d108      	bne.n	8001422 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	e007      	b.n	8001432 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7e5b      	ldrb	r3, [r3, #25]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d108      	bne.n	800144c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	e007      	b.n	800145c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800145a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	7e9b      	ldrb	r3, [r3, #26]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d108      	bne.n	8001476 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f042 0220 	orr.w	r2, r2, #32
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	e007      	b.n	8001486 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0220 	bic.w	r2, r2, #32
 8001484:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7edb      	ldrb	r3, [r3, #27]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d108      	bne.n	80014a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0210 	bic.w	r2, r2, #16
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	e007      	b.n	80014b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0210 	orr.w	r2, r2, #16
 80014ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7f1b      	ldrb	r3, [r3, #28]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d108      	bne.n	80014ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0208 	orr.w	r2, r2, #8
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	e007      	b.n	80014da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0208 	bic.w	r2, r2, #8
 80014d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	7f5b      	ldrb	r3, [r3, #29]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d108      	bne.n	80014f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f042 0204 	orr.w	r2, r2, #4
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e007      	b.n	8001504 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0204 	bic.w	r2, r2, #4
 8001502:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	431a      	orrs	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	ea42 0103 	orr.w	r1, r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	1e5a      	subs	r2, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001542:	b480      	push	{r7}
 8001544:	b087      	sub	sp, #28
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001558:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800155a:	7cfb      	ldrb	r3, [r7, #19]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d003      	beq.n	8001568 <HAL_CAN_ConfigFilter+0x26>
 8001560:	7cfb      	ldrb	r3, [r7, #19]
 8001562:	2b02      	cmp	r3, #2
 8001564:	f040 80aa 	bne.w	80016bc <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800156e:	f043 0201 	orr.w	r2, r3, #1
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	f003 031f 	and.w	r3, r3, #31
 8001580:	2201      	movs	r2, #1
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43db      	mvns	r3, r3
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d123      	bne.n	80015ea <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	401a      	ands	r2, r3
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015c4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3248      	adds	r2, #72	@ 0x48
 80015ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015de:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015e0:	6979      	ldr	r1, [r7, #20]
 80015e2:	3348      	adds	r3, #72	@ 0x48
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	440b      	add	r3, r1
 80015e8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d122      	bne.n	8001638 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	431a      	orrs	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001612:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	3248      	adds	r2, #72	@ 0x48
 8001618:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800162c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800162e:	6979      	ldr	r1, [r7, #20]
 8001630:	3348      	adds	r3, #72	@ 0x48
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	440b      	add	r3, r1
 8001636:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d109      	bne.n	8001654 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	43db      	mvns	r3, r3
 800164a:	401a      	ands	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001652:	e007      	b.n	8001664 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	431a      	orrs	r2, r3
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d109      	bne.n	8001680 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	43db      	mvns	r3, r3
 8001676:	401a      	ands	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800167e:	e007      	b.n	8001690 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	431a      	orrs	r2, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d107      	bne.n	80016a8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	431a      	orrs	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80016ae:	f023 0201 	bic.w	r2, r3, #1
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	e006      	b.n	80016ca <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
  }
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	371c      	adds	r7, #28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b084      	sub	sp, #16
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d12e      	bne.n	8001748 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2202      	movs	r2, #2
 80016ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0201 	bic.w	r2, r2, #1
 8001700:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001702:	f7ff fdf3 	bl	80012ec <HAL_GetTick>
 8001706:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001708:	e012      	b.n	8001730 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800170a:	f7ff fdef 	bl	80012ec <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b0a      	cmp	r3, #10
 8001716:	d90b      	bls.n	8001730 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2205      	movs	r2, #5
 8001728:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e012      	b.n	8001756 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1e5      	bne.n	800170a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	e006      	b.n	8001756 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
  }
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800175e:	b480      	push	{r7}
 8001760:	b089      	sub	sp, #36	@ 0x24
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001772:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800177c:	7ffb      	ldrb	r3, [r7, #31]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d003      	beq.n	800178a <HAL_CAN_AddTxMessage+0x2c>
 8001782:	7ffb      	ldrb	r3, [r7, #31]
 8001784:	2b02      	cmp	r3, #2
 8001786:	f040 80ad 	bne.w	80018e4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10a      	bne.n	80017aa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800179a:	2b00      	cmp	r3, #0
 800179c:	d105      	bne.n	80017aa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 8095 	beq.w	80018d4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	0e1b      	lsrs	r3, r3, #24
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80017b4:	2201      	movs	r2, #1
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	409a      	lsls	r2, r3
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10d      	bne.n	80017e2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017d0:	68f9      	ldr	r1, [r7, #12]
 80017d2:	6809      	ldr	r1, [r1, #0]
 80017d4:	431a      	orrs	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3318      	adds	r3, #24
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	440b      	add	r3, r1
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	e00f      	b.n	8001802 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017ec:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017f2:	68f9      	ldr	r1, [r7, #12]
 80017f4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80017f6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	3318      	adds	r3, #24
 80017fc:	011b      	lsls	r3, r3, #4
 80017fe:	440b      	add	r3, r1
 8001800:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6819      	ldr	r1, [r3, #0]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	691a      	ldr	r2, [r3, #16]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3318      	adds	r3, #24
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	440b      	add	r3, r1
 8001812:	3304      	adds	r3, #4
 8001814:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	7d1b      	ldrb	r3, [r3, #20]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d111      	bne.n	8001842 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	3318      	adds	r3, #24
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	4413      	add	r3, r2
 800182a:	3304      	adds	r3, #4
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	6811      	ldr	r1, [r2, #0]
 8001832:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3318      	adds	r3, #24
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	440b      	add	r3, r1
 800183e:	3304      	adds	r3, #4
 8001840:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3307      	adds	r3, #7
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	061a      	lsls	r2, r3, #24
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3306      	adds	r3, #6
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	041b      	lsls	r3, r3, #16
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3305      	adds	r3, #5
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	4313      	orrs	r3, r2
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	3204      	adds	r2, #4
 8001862:	7812      	ldrb	r2, [r2, #0]
 8001864:	4610      	mov	r0, r2
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	6811      	ldr	r1, [r2, #0]
 800186a:	ea43 0200 	orr.w	r2, r3, r0
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	440b      	add	r3, r1
 8001874:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001878:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3303      	adds	r3, #3
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	061a      	lsls	r2, r3, #24
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3302      	adds	r3, #2
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	041b      	lsls	r3, r3, #16
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3301      	adds	r3, #1
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	4313      	orrs	r3, r2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	7812      	ldrb	r2, [r2, #0]
 800189a:	4610      	mov	r0, r2
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	6811      	ldr	r1, [r2, #0]
 80018a0:	ea43 0200 	orr.w	r2, r3, r0
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	440b      	add	r3, r1
 80018aa:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80018ae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3318      	adds	r3, #24
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	4413      	add	r3, r2
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	6811      	ldr	r1, [r2, #0]
 80018c2:	f043 0201 	orr.w	r2, r3, #1
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3318      	adds	r3, #24
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	440b      	add	r3, r1
 80018ce:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	e00e      	b.n	80018f2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e006      	b.n	80018f2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
  }
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	@ 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80018fe:	b480      	push	{r7}
 8001900:	b087      	sub	sp, #28
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001912:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d003      	beq.n	8001922 <HAL_CAN_GetRxMessage+0x24>
 800191a:	7dfb      	ldrb	r3, [r7, #23]
 800191c:	2b02      	cmp	r3, #2
 800191e:	f040 8103 	bne.w	8001b28 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10e      	bne.n	8001946 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d116      	bne.n	8001964 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e0f7      	b.n	8001b36 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d107      	bne.n	8001964 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001958:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0e8      	b.n	8001b36 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	331b      	adds	r3, #27
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	4413      	add	r3, r2
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0204 	and.w	r2, r3, #4
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10c      	bne.n	800199c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	331b      	adds	r3, #27
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	4413      	add	r3, r2
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	0d5b      	lsrs	r3, r3, #21
 8001992:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	e00b      	b.n	80019b4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	331b      	adds	r3, #27
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	4413      	add	r3, r2
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	08db      	lsrs	r3, r3, #3
 80019ac:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	331b      	adds	r3, #27
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	4413      	add	r3, r2
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0202 	and.w	r2, r3, #2
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	331b      	adds	r3, #27
 80019d2:	011b      	lsls	r3, r3, #4
 80019d4:	4413      	add	r3, r2
 80019d6:	3304      	adds	r3, #4
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2208      	movs	r2, #8
 80019e6:	611a      	str	r2, [r3, #16]
 80019e8:	e00b      	b.n	8001a02 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	331b      	adds	r3, #27
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	4413      	add	r3, r2
 80019f6:	3304      	adds	r3, #4
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 020f 	and.w	r2, r3, #15
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	331b      	adds	r3, #27
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3304      	adds	r3, #4
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	0a1b      	lsrs	r3, r3, #8
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	331b      	adds	r3, #27
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	4413      	add	r3, r2
 8001a26:	3304      	adds	r3, #4
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	0c1b      	lsrs	r3, r3, #16
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	4413      	add	r3, r2
 8001a52:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	0a1a      	lsrs	r2, r3, #8
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	0c1a      	lsrs	r2, r3, #16
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	3302      	adds	r3, #2
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	011b      	lsls	r3, r3, #4
 8001a84:	4413      	add	r3, r2
 8001a86:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	0e1a      	lsrs	r2, r3, #24
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	3303      	adds	r3, #3
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	0a1a      	lsrs	r2, r3, #8
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	3305      	adds	r3, #5
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	0c1a      	lsrs	r2, r3, #16
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	3306      	adds	r3, #6
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	4413      	add	r3, r2
 8001aec:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	0e1a      	lsrs	r2, r3, #24
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	3307      	adds	r3, #7
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d108      	bne.n	8001b14 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 0220 	orr.w	r2, r2, #32
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	e007      	b.n	8001b24 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691a      	ldr	r2, [r3, #16]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0220 	orr.w	r2, r2, #32
 8001b22:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	e006      	b.n	8001b36 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
  }
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	371c      	adds	r7, #28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b085      	sub	sp, #20
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b52:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d002      	beq.n	8001b60 <HAL_CAN_ActivateNotification+0x1e>
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d109      	bne.n	8001b74 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6959      	ldr	r1, [r3, #20]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e006      	b.n	8001b82 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b78:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
  }
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b08a      	sub	sp, #40	@ 0x28
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d07c      	beq.n	8001cce <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d023      	beq.n	8001c26 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2201      	movs	r2, #1
 8001be4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f983 	bl	8001efc <HAL_CAN_TxMailbox0CompleteCallback>
 8001bf6:	e016      	b.n	8001c26 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d004      	beq.n	8001c0c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c0a:	e00c      	b.n	8001c26 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d004      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c1e:	e002      	b.n	8001c26 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f989 	bl	8001f38 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d024      	beq.n	8001c7a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f963 	bl	8001f10 <HAL_CAN_TxMailbox1CompleteCallback>
 8001c4a:	e016      	b.n	8001c7a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d004      	beq.n	8001c60 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c5e:	e00c      	b.n	8001c7a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d004      	beq.n	8001c74 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c72:	e002      	b.n	8001c7a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f969 	bl	8001f4c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d024      	beq.n	8001cce <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f943 	bl	8001f24 <HAL_CAN_TxMailbox2CompleteCallback>
 8001c9e:	e016      	b.n	8001cce <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d004      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cb2:	e00c      	b.n	8001cce <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d004      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cc6:	e002      	b.n	8001cce <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 f949 	bl	8001f60 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00c      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d007      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ce8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2210      	movs	r2, #16
 8001cf0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00b      	beq.n	8001d14 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d006      	beq.n	8001d14 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2208      	movs	r2, #8
 8001d0c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f930 	bl	8001f74 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7fe fd5b 	bl	80007e8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00c      	beq.n	8001d56 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d007      	beq.n	8001d56 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2210      	movs	r2, #16
 8001d54:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	f003 0320 	and.w	r3, r3, #32
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00b      	beq.n	8001d78 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d006      	beq.n	8001d78 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2208      	movs	r2, #8
 8001d70:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f912 	bl	8001f9c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f8f9 	bl	8001f88 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00b      	beq.n	8001db8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0310 	and.w	r3, r3, #16
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2210      	movs	r2, #16
 8001db0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f8fc 	bl	8001fb0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00b      	beq.n	8001dda <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d006      	beq.n	8001dda <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2208      	movs	r2, #8
 8001dd2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f8f5 	bl	8001fc4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d07b      	beq.n	8001edc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d072      	beq.n	8001ed4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d008      	beq.n	8001e0a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d043      	beq.n	8001ed4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d03e      	beq.n	8001ed4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e5c:	2b60      	cmp	r3, #96	@ 0x60
 8001e5e:	d02b      	beq.n	8001eb8 <HAL_CAN_IRQHandler+0x32a>
 8001e60:	2b60      	cmp	r3, #96	@ 0x60
 8001e62:	d82e      	bhi.n	8001ec2 <HAL_CAN_IRQHandler+0x334>
 8001e64:	2b50      	cmp	r3, #80	@ 0x50
 8001e66:	d022      	beq.n	8001eae <HAL_CAN_IRQHandler+0x320>
 8001e68:	2b50      	cmp	r3, #80	@ 0x50
 8001e6a:	d82a      	bhi.n	8001ec2 <HAL_CAN_IRQHandler+0x334>
 8001e6c:	2b40      	cmp	r3, #64	@ 0x40
 8001e6e:	d019      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x316>
 8001e70:	2b40      	cmp	r3, #64	@ 0x40
 8001e72:	d826      	bhi.n	8001ec2 <HAL_CAN_IRQHandler+0x334>
 8001e74:	2b30      	cmp	r3, #48	@ 0x30
 8001e76:	d010      	beq.n	8001e9a <HAL_CAN_IRQHandler+0x30c>
 8001e78:	2b30      	cmp	r3, #48	@ 0x30
 8001e7a:	d822      	bhi.n	8001ec2 <HAL_CAN_IRQHandler+0x334>
 8001e7c:	2b10      	cmp	r3, #16
 8001e7e:	d002      	beq.n	8001e86 <HAL_CAN_IRQHandler+0x2f8>
 8001e80:	2b20      	cmp	r3, #32
 8001e82:	d005      	beq.n	8001e90 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e84:	e01d      	b.n	8001ec2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e88:	f043 0308 	orr.w	r3, r3, #8
 8001e8c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e8e:	e019      	b.n	8001ec4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	f043 0310 	orr.w	r3, r3, #16
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e98:	e014      	b.n	8001ec4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	f043 0320 	orr.w	r3, r3, #32
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ea2:	e00f      	b.n	8001ec4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001eac:	e00a      	b.n	8001ec4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eb4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001eb6:	e005      	b.n	8001ec4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ebe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ec0:	e000      	b.n	8001ec4 <HAL_CAN_IRQHandler+0x336>
            break;
 8001ec2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699a      	ldr	r2, [r3, #24]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001ed2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2204      	movs	r2, #4
 8001eda:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d008      	beq.n	8001ef4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f872 	bl	8001fd8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3728      	adds	r7, #40	@ 0x28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002008:	4013      	ands	r3, r2
 800200a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002014:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800201c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201e:	4a04      	ldr	r2, [pc, #16]	@ (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	60d3      	str	r3, [r2, #12]
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002038:	4b04      	ldr	r3, [pc, #16]	@ (800204c <__NVIC_GetPriorityGrouping+0x18>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	f003 0307 	and.w	r3, r3, #7
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	2b00      	cmp	r3, #0
 8002060:	db0b      	blt.n	800207a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	f003 021f 	and.w	r2, r3, #31
 8002068:	4907      	ldr	r1, [pc, #28]	@ (8002088 <__NVIC_EnableIRQ+0x38>)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	2001      	movs	r0, #1
 8002072:	fa00 f202 	lsl.w	r2, r0, r2
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000e100 	.word	0xe000e100

0800208c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	6039      	str	r1, [r7, #0]
 8002096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209c:	2b00      	cmp	r3, #0
 800209e:	db0a      	blt.n	80020b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	490c      	ldr	r1, [pc, #48]	@ (80020d8 <__NVIC_SetPriority+0x4c>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	0112      	lsls	r2, r2, #4
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	440b      	add	r3, r1
 80020b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b4:	e00a      	b.n	80020cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4908      	ldr	r1, [pc, #32]	@ (80020dc <__NVIC_SetPriority+0x50>)
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	3b04      	subs	r3, #4
 80020c4:	0112      	lsls	r2, r2, #4
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	440b      	add	r3, r1
 80020ca:	761a      	strb	r2, [r3, #24]
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000e100 	.word	0xe000e100
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	@ 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f1c3 0307 	rsb	r3, r3, #7
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	bf28      	it	cs
 80020fe:	2304      	movcs	r3, #4
 8002100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3304      	adds	r3, #4
 8002106:	2b06      	cmp	r3, #6
 8002108:	d902      	bls.n	8002110 <NVIC_EncodePriority+0x30>
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3b03      	subs	r3, #3
 800210e:	e000      	b.n	8002112 <NVIC_EncodePriority+0x32>
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	f04f 32ff 	mov.w	r2, #4294967295
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43da      	mvns	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	401a      	ands	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002128:	f04f 31ff 	mov.w	r1, #4294967295
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	43d9      	mvns	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	4313      	orrs	r3, r2
         );
}
 800213a:	4618      	mov	r0, r3
 800213c:	3724      	adds	r7, #36	@ 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002158:	d301      	bcc.n	800215e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215a:	2301      	movs	r3, #1
 800215c:	e00f      	b.n	800217e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215e:	4a0a      	ldr	r2, [pc, #40]	@ (8002188 <SysTick_Config+0x40>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002166:	210f      	movs	r1, #15
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f7ff ff8e 	bl	800208c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002170:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <SysTick_Config+0x40>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002176:	4b04      	ldr	r3, [pc, #16]	@ (8002188 <SysTick_Config+0x40>)
 8002178:	2207      	movs	r2, #7
 800217a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	e000e010 	.word	0xe000e010

0800218c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ff29 	bl	8001fec <__NVIC_SetPriorityGrouping>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4603      	mov	r3, r0
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b4:	f7ff ff3e 	bl	8002034 <__NVIC_GetPriorityGrouping>
 80021b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	6978      	ldr	r0, [r7, #20]
 80021c0:	f7ff ff8e 	bl	80020e0 <NVIC_EncodePriority>
 80021c4:	4602      	mov	r2, r0
 80021c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff5d 	bl	800208c <__NVIC_SetPriority>
}
 80021d2:	bf00      	nop
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff31 	bl	8002050 <__NVIC_EnableIRQ>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ffa2 	bl	8002148 <SysTick_Config>
 8002204:	4603      	mov	r3, r0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221e:	e14e      	b.n	80024be <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	2101      	movs	r1, #1
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	4013      	ands	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8140 	beq.w	80024b8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d005      	beq.n	8002250 <HAL_GPIO_Init+0x40>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d130      	bne.n	80022b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002286:	2201      	movs	r2, #1
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	f003 0201 	and.w	r2, r3, #1
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d017      	beq.n	80022ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d123      	bne.n	8002342 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	08da      	lsrs	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3208      	adds	r2, #8
 8002302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	08da      	lsrs	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3208      	adds	r2, #8
 800233c:	6939      	ldr	r1, [r7, #16]
 800233e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0203 	and.w	r2, r3, #3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 809a 	beq.w	80024b8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002384:	4b55      	ldr	r3, [pc, #340]	@ (80024dc <HAL_GPIO_Init+0x2cc>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	4a54      	ldr	r2, [pc, #336]	@ (80024dc <HAL_GPIO_Init+0x2cc>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6193      	str	r3, [r2, #24]
 8002390:	4b52      	ldr	r3, [pc, #328]	@ (80024dc <HAL_GPIO_Init+0x2cc>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800239c:	4a50      	ldr	r2, [pc, #320]	@ (80024e0 <HAL_GPIO_Init+0x2d0>)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023c6:	d013      	beq.n	80023f0 <HAL_GPIO_Init+0x1e0>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a46      	ldr	r2, [pc, #280]	@ (80024e4 <HAL_GPIO_Init+0x2d4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d00d      	beq.n	80023ec <HAL_GPIO_Init+0x1dc>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a45      	ldr	r2, [pc, #276]	@ (80024e8 <HAL_GPIO_Init+0x2d8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d007      	beq.n	80023e8 <HAL_GPIO_Init+0x1d8>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a44      	ldr	r2, [pc, #272]	@ (80024ec <HAL_GPIO_Init+0x2dc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d101      	bne.n	80023e4 <HAL_GPIO_Init+0x1d4>
 80023e0:	2303      	movs	r3, #3
 80023e2:	e006      	b.n	80023f2 <HAL_GPIO_Init+0x1e2>
 80023e4:	2305      	movs	r3, #5
 80023e6:	e004      	b.n	80023f2 <HAL_GPIO_Init+0x1e2>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e002      	b.n	80023f2 <HAL_GPIO_Init+0x1e2>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <HAL_GPIO_Init+0x1e2>
 80023f0:	2300      	movs	r3, #0
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	f002 0203 	and.w	r2, r2, #3
 80023f8:	0092      	lsls	r2, r2, #2
 80023fa:	4093      	lsls	r3, r2
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002402:	4937      	ldr	r1, [pc, #220]	@ (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	3302      	adds	r3, #2
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002410:	4b37      	ldr	r3, [pc, #220]	@ (80024f0 <HAL_GPIO_Init+0x2e0>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	43db      	mvns	r3, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002434:	4a2e      	ldr	r2, [pc, #184]	@ (80024f0 <HAL_GPIO_Init+0x2e0>)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800243a:	4b2d      	ldr	r3, [pc, #180]	@ (80024f0 <HAL_GPIO_Init+0x2e0>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800245e:	4a24      	ldr	r2, [pc, #144]	@ (80024f0 <HAL_GPIO_Init+0x2e0>)
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002464:	4b22      	ldr	r3, [pc, #136]	@ (80024f0 <HAL_GPIO_Init+0x2e0>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002488:	4a19      	ldr	r2, [pc, #100]	@ (80024f0 <HAL_GPIO_Init+0x2e0>)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800248e:	4b18      	ldr	r3, [pc, #96]	@ (80024f0 <HAL_GPIO_Init+0x2e0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	43db      	mvns	r3, r3
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4013      	ands	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024b2:	4a0f      	ldr	r2, [pc, #60]	@ (80024f0 <HAL_GPIO_Init+0x2e0>)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	3301      	adds	r3, #1
 80024bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f47f aea9 	bne.w	8002220 <HAL_GPIO_Init+0x10>
  }
}
 80024ce:	bf00      	nop
 80024d0:	bf00      	nop
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40010000 	.word	0x40010000
 80024e4:	48000400 	.word	0x48000400
 80024e8:	48000800 	.word	0x48000800
 80024ec:	48000c00 	.word	0x48000c00
 80024f0:	40010400 	.word	0x40010400

080024f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	807b      	strh	r3, [r7, #2]
 8002500:	4613      	mov	r3, r2
 8002502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002504:	787b      	ldrb	r3, [r7, #1]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800250a:	887a      	ldrh	r2, [r7, #2]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002510:	e002      	b.n	8002518 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002512:	887a      	ldrh	r2, [r7, #2]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800252a:	af00      	add	r7, sp, #0
 800252c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002530:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002534:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d102      	bne.n	800254a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	f000 bff4 	b.w	8003532 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800254a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 816d 	beq.w	800283a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002560:	4bb4      	ldr	r3, [pc, #720]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	2b04      	cmp	r3, #4
 800256a:	d00c      	beq.n	8002586 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800256c:	4bb1      	ldr	r3, [pc, #708]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b08      	cmp	r3, #8
 8002576:	d157      	bne.n	8002628 <HAL_RCC_OscConfig+0x104>
 8002578:	4bae      	ldr	r3, [pc, #696]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002584:	d150      	bne.n	8002628 <HAL_RCC_OscConfig+0x104>
 8002586:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800258a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800259a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80025a6:	d802      	bhi.n	80025ae <HAL_RCC_OscConfig+0x8a>
 80025a8:	4ba2      	ldr	r3, [pc, #648]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	e015      	b.n	80025da <HAL_RCC_OscConfig+0xb6>
 80025ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025b2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80025c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025c6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80025ca:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80025d6:	4b97      	ldr	r3, [pc, #604]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025de:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80025e2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80025e6:	fa92 f2a2 	rbit	r2, r2
 80025ea:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80025ee:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80025f2:	fab2 f282 	clz	r2, r2
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	f042 0220 	orr.w	r2, r2, #32
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	f002 021f 	and.w	r2, r2, #31
 8002602:	2101      	movs	r1, #1
 8002604:	fa01 f202 	lsl.w	r2, r1, r2
 8002608:	4013      	ands	r3, r2
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 8114 	beq.w	8002838 <HAL_RCC_OscConfig+0x314>
 8002610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002614:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	f040 810b 	bne.w	8002838 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	f000 bf85 	b.w	8003532 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002638:	d106      	bne.n	8002648 <HAL_RCC_OscConfig+0x124>
 800263a:	4b7e      	ldr	r3, [pc, #504]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a7d      	ldr	r2, [pc, #500]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 8002640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	e036      	b.n	80026b6 <HAL_RCC_OscConfig+0x192>
 8002648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10c      	bne.n	8002672 <HAL_RCC_OscConfig+0x14e>
 8002658:	4b76      	ldr	r3, [pc, #472]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a75      	ldr	r2, [pc, #468]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 800265e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	4b73      	ldr	r3, [pc, #460]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a72      	ldr	r2, [pc, #456]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 800266a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	e021      	b.n	80026b6 <HAL_RCC_OscConfig+0x192>
 8002672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002676:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002682:	d10c      	bne.n	800269e <HAL_RCC_OscConfig+0x17a>
 8002684:	4b6b      	ldr	r3, [pc, #428]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a6a      	ldr	r2, [pc, #424]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 800268a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b68      	ldr	r3, [pc, #416]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a67      	ldr	r2, [pc, #412]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 8002696:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	e00b      	b.n	80026b6 <HAL_RCC_OscConfig+0x192>
 800269e:	4b65      	ldr	r3, [pc, #404]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a64      	ldr	r2, [pc, #400]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 80026a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	4b62      	ldr	r3, [pc, #392]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a61      	ldr	r2, [pc, #388]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 80026b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026b4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 80026b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ba:	f023 020f 	bic.w	r2, r3, #15
 80026be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	495a      	ldr	r1, [pc, #360]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d054      	beq.n	800278a <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7fe fe04 	bl	80012ec <HAL_GetTick>
 80026e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e8:	e00a      	b.n	8002700 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ea:	f7fe fdff 	bl	80012ec <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	@ 0x64
 80026f8:	d902      	bls.n	8002700 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	f000 bf19 	b.w	8003532 <HAL_RCC_OscConfig+0x100e>
 8002700:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002704:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002714:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002718:	fab3 f383 	clz	r3, r3
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002720:	d802      	bhi.n	8002728 <HAL_RCC_OscConfig+0x204>
 8002722:	4b44      	ldr	r3, [pc, #272]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	e015      	b.n	8002754 <HAL_RCC_OscConfig+0x230>
 8002728:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800272c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800273c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002740:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002744:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002750:	4b38      	ldr	r3, [pc, #224]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 8002752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002754:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002758:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800275c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002760:	fa92 f2a2 	rbit	r2, r2
 8002764:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002768:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800276c:	fab2 f282 	clz	r2, r2
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	f042 0220 	orr.w	r2, r2, #32
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	f002 021f 	and.w	r2, r2, #31
 800277c:	2101      	movs	r1, #1
 800277e:	fa01 f202 	lsl.w	r2, r1, r2
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0b0      	beq.n	80026ea <HAL_RCC_OscConfig+0x1c6>
 8002788:	e057      	b.n	800283a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278a:	f7fe fdaf 	bl	80012ec <HAL_GetTick>
 800278e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002792:	e00a      	b.n	80027aa <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002794:	f7fe fdaa 	bl	80012ec <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b64      	cmp	r3, #100	@ 0x64
 80027a2:	d902      	bls.n	80027aa <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	f000 bec4 	b.w	8003532 <HAL_RCC_OscConfig+0x100e>
 80027aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027ae:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80027be:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80027ca:	d802      	bhi.n	80027d2 <HAL_RCC_OscConfig+0x2ae>
 80027cc:	4b19      	ldr	r3, [pc, #100]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	e015      	b.n	80027fe <HAL_RCC_OscConfig+0x2da>
 80027d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027d6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80027e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027ea:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80027ee:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80027fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002834 <HAL_RCC_OscConfig+0x310>)
 80027fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002802:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002806:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800280a:	fa92 f2a2 	rbit	r2, r2
 800280e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002812:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002816:	fab2 f282 	clz	r2, r2
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	f042 0220 	orr.w	r2, r2, #32
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	f002 021f 	and.w	r2, r2, #31
 8002826:	2101      	movs	r1, #1
 8002828:	fa01 f202 	lsl.w	r2, r1, r2
 800282c:	4013      	ands	r3, r2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1b0      	bne.n	8002794 <HAL_RCC_OscConfig+0x270>
 8002832:	e002      	b.n	800283a <HAL_RCC_OscConfig+0x316>
 8002834:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 816c 	beq.w	8002b28 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002850:	4bcc      	ldr	r3, [pc, #816]	@ (8002b84 <HAL_RCC_OscConfig+0x660>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 030c 	and.w	r3, r3, #12
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00b      	beq.n	8002874 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800285c:	4bc9      	ldr	r3, [pc, #804]	@ (8002b84 <HAL_RCC_OscConfig+0x660>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b08      	cmp	r3, #8
 8002866:	d16d      	bne.n	8002944 <HAL_RCC_OscConfig+0x420>
 8002868:	4bc6      	ldr	r3, [pc, #792]	@ (8002b84 <HAL_RCC_OscConfig+0x660>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d167      	bne.n	8002944 <HAL_RCC_OscConfig+0x420>
 8002874:	2302      	movs	r3, #2
 8002876:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002886:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b3f      	cmp	r3, #63	@ 0x3f
 8002892:	d802      	bhi.n	800289a <HAL_RCC_OscConfig+0x376>
 8002894:	4bbb      	ldr	r3, [pc, #748]	@ (8002b84 <HAL_RCC_OscConfig+0x660>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	e013      	b.n	80028c2 <HAL_RCC_OscConfig+0x39e>
 800289a:	2302      	movs	r3, #2
 800289c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80028a4:	fa93 f3a3 	rbit	r3, r3
 80028a8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80028ac:	2302      	movs	r3, #2
 80028ae:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80028b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80028be:	4bb1      	ldr	r3, [pc, #708]	@ (8002b84 <HAL_RCC_OscConfig+0x660>)
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	2202      	movs	r2, #2
 80028c4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80028c8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80028cc:	fa92 f2a2 	rbit	r2, r2
 80028d0:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80028d4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80028d8:	fab2 f282 	clz	r2, r2
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	f042 0220 	orr.w	r2, r2, #32
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	f002 021f 	and.w	r2, r2, #31
 80028e8:	2101      	movs	r1, #1
 80028ea:	fa01 f202 	lsl.w	r2, r1, r2
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <HAL_RCC_OscConfig+0x3e6>
 80028f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d002      	beq.n	800290a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	f000 be14 	b.w	8003532 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290a:	4b9e      	ldr	r3, [pc, #632]	@ (8002b84 <HAL_RCC_OscConfig+0x660>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002916:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	21f8      	movs	r1, #248	@ 0xf8
 8002920:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002924:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002928:	fa91 f1a1 	rbit	r1, r1
 800292c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002930:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002934:	fab1 f181 	clz	r1, r1
 8002938:	b2c9      	uxtb	r1, r1
 800293a:	408b      	lsls	r3, r1
 800293c:	4991      	ldr	r1, [pc, #580]	@ (8002b84 <HAL_RCC_OscConfig+0x660>)
 800293e:	4313      	orrs	r3, r2
 8002940:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002942:	e0f1      	b.n	8002b28 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002948:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 8083 	beq.w	8002a5c <HAL_RCC_OscConfig+0x538>
 8002956:	2301      	movs	r3, #1
 8002958:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002960:	fa93 f3a3 	rbit	r3, r3
 8002964:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002968:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002976:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	461a      	mov	r2, r3
 800297e:	2301      	movs	r3, #1
 8002980:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7fe fcb3 	bl	80012ec <HAL_GetTick>
 8002986:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800298c:	f7fe fcae 	bl	80012ec <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d902      	bls.n	80029a2 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	f000 bdc8 	b.w	8003532 <HAL_RCC_OscConfig+0x100e>
 80029a2:	2302      	movs	r3, #2
 80029a4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80029b4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b3f      	cmp	r3, #63	@ 0x3f
 80029c0:	d802      	bhi.n	80029c8 <HAL_RCC_OscConfig+0x4a4>
 80029c2:	4b70      	ldr	r3, [pc, #448]	@ (8002b84 <HAL_RCC_OscConfig+0x660>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	e013      	b.n	80029f0 <HAL_RCC_OscConfig+0x4cc>
 80029c8:	2302      	movs	r3, #2
 80029ca:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80029da:	2302      	movs	r3, #2
 80029dc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80029e0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80029ec:	4b65      	ldr	r3, [pc, #404]	@ (8002b84 <HAL_RCC_OscConfig+0x660>)
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	2202      	movs	r2, #2
 80029f2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80029f6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80029fa:	fa92 f2a2 	rbit	r2, r2
 80029fe:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002a02:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002a06:	fab2 f282 	clz	r2, r2
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	f042 0220 	orr.w	r2, r2, #32
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	f002 021f 	and.w	r2, r2, #31
 8002a16:	2101      	movs	r1, #1
 8002a18:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0b4      	beq.n	800298c <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a22:	4b58      	ldr	r3, [pc, #352]	@ (8002b84 <HAL_RCC_OscConfig+0x660>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	21f8      	movs	r1, #248	@ 0xf8
 8002a38:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002a40:	fa91 f1a1 	rbit	r1, r1
 8002a44:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002a48:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002a4c:	fab1 f181 	clz	r1, r1
 8002a50:	b2c9      	uxtb	r1, r1
 8002a52:	408b      	lsls	r3, r1
 8002a54:	494b      	ldr	r1, [pc, #300]	@ (8002b84 <HAL_RCC_OscConfig+0x660>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]
 8002a5a:	e065      	b.n	8002b28 <HAL_RCC_OscConfig+0x604>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002a6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a72:	fab3 f383 	clz	r3, r3
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a7c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	461a      	mov	r2, r3
 8002a84:	2300      	movs	r3, #0
 8002a86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7fe fc30 	bl	80012ec <HAL_GetTick>
 8002a8c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a90:	e00a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a92:	f7fe fc2b 	bl	80012ec <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d902      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	f000 bd45 	b.w	8003532 <HAL_RCC_OscConfig+0x100e>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002ab2:	fa93 f3a3 	rbit	r3, r3
 8002ab6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002abe:	fab3 f383 	clz	r3, r3
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ac6:	d802      	bhi.n	8002ace <HAL_RCC_OscConfig+0x5aa>
 8002ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8002b84 <HAL_RCC_OscConfig+0x660>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	e013      	b.n	8002af6 <HAL_RCC_OscConfig+0x5d2>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002ae6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002af2:	4b24      	ldr	r3, [pc, #144]	@ (8002b84 <HAL_RCC_OscConfig+0x660>)
 8002af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af6:	2202      	movs	r2, #2
 8002af8:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002afc:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002b00:	fa92 f2a2 	rbit	r2, r2
 8002b04:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002b08:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002b0c:	fab2 f282 	clz	r2, r2
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	f042 0220 	orr.w	r2, r2, #32
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	f002 021f 	and.w	r2, r2, #31
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1b4      	bne.n	8002a92 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 8115 	beq.w	8002d68 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d07e      	beq.n	8002c4c <HAL_RCC_OscConfig+0x728>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b58:	fa93 f3a3 	rbit	r3, r3
 8002b5c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b64:	fab3 f383 	clz	r3, r3
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <HAL_RCC_OscConfig+0x664>)
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	461a      	mov	r2, r3
 8002b74:	2301      	movs	r3, #1
 8002b76:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b78:	f7fe fbb8 	bl	80012ec <HAL_GetTick>
 8002b7c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b80:	e00f      	b.n	8002ba2 <HAL_RCC_OscConfig+0x67e>
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000
 8002b88:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b8c:	f7fe fbae 	bl	80012ec <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d902      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	f000 bcc8 	b.w	8003532 <HAL_RCC_OscConfig+0x100e>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002bac:	fa93 f3a3 	rbit	r3, r3
 8002bb0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002bb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	fa93 f2a3 	rbit	r2, r3
 8002bce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002be0:	2202      	movs	r2, #2
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	fa93 f2a3 	rbit	r2, r3
 8002bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002bfa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfc:	4bb0      	ldr	r3, [pc, #704]	@ (8002ec0 <HAL_RCC_OscConfig+0x99c>)
 8002bfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c04:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c08:	2102      	movs	r1, #2
 8002c0a:	6019      	str	r1, [r3, #0]
 8002c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c10:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	fa93 f1a3 	rbit	r1, r3
 8002c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c22:	6019      	str	r1, [r3, #0]
  return result;
 8002c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c28:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	f003 031f 	and.w	r3, r3, #31
 8002c3e:	2101      	movs	r1, #1
 8002c40:	fa01 f303 	lsl.w	r3, r1, r3
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0a0      	beq.n	8002b8c <HAL_RCC_OscConfig+0x668>
 8002c4a:	e08d      	b.n	8002d68 <HAL_RCC_OscConfig+0x844>
 8002c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c50:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c54:	2201      	movs	r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	fa93 f2a3 	rbit	r2, r3
 8002c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c6e:	601a      	str	r2, [r3, #0]
  return result;
 8002c70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c74:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c78:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c7a:	fab3 f383 	clz	r3, r3
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	461a      	mov	r2, r3
 8002c82:	4b90      	ldr	r3, [pc, #576]	@ (8002ec4 <HAL_RCC_OscConfig+0x9a0>)
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8e:	f7fe fb2d 	bl	80012ec <HAL_GetTick>
 8002c92:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c96:	e00a      	b.n	8002cae <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c98:	f7fe fb28 	bl	80012ec <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d902      	bls.n	8002cae <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	f000 bc42 	b.w	8003532 <HAL_RCC_OscConfig+0x100e>
 8002cae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cbe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	fa93 f2a3 	rbit	r2, r3
 8002cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ccc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002cda:	2202      	movs	r2, #2
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	fa93 f2a3 	rbit	r2, r3
 8002cec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002cfe:	2202      	movs	r2, #2
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d06:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	fa93 f2a3 	rbit	r2, r3
 8002d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d14:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002d18:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1a:	4b69      	ldr	r3, [pc, #420]	@ (8002ec0 <HAL_RCC_OscConfig+0x99c>)
 8002d1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d22:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002d26:	2102      	movs	r1, #2
 8002d28:	6019      	str	r1, [r3, #0]
 8002d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	fa93 f1a3 	rbit	r1, r3
 8002d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d40:	6019      	str	r1, [r3, #0]
  return result;
 8002d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d46:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	fab3 f383 	clz	r3, r3
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	f003 031f 	and.w	r3, r3, #31
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d197      	bne.n	8002c98 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 819e 	beq.w	80030ba <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d84:	4b4e      	ldr	r3, [pc, #312]	@ (8002ec0 <HAL_RCC_OscConfig+0x99c>)
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d116      	bne.n	8002dbe <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d90:	4b4b      	ldr	r3, [pc, #300]	@ (8002ec0 <HAL_RCC_OscConfig+0x99c>)
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	4a4a      	ldr	r2, [pc, #296]	@ (8002ec0 <HAL_RCC_OscConfig+0x99c>)
 8002d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d9a:	61d3      	str	r3, [r2, #28]
 8002d9c:	4b48      	ldr	r3, [pc, #288]	@ (8002ec0 <HAL_RCC_OscConfig+0x99c>)
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002db6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002db8:	2301      	movs	r3, #1
 8002dba:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbe:	4b42      	ldr	r3, [pc, #264]	@ (8002ec8 <HAL_RCC_OscConfig+0x9a4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d11a      	bne.n	8002e00 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dca:	4b3f      	ldr	r3, [pc, #252]	@ (8002ec8 <HAL_RCC_OscConfig+0x9a4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a3e      	ldr	r2, [pc, #248]	@ (8002ec8 <HAL_RCC_OscConfig+0x9a4>)
 8002dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd6:	f7fe fa89 	bl	80012ec <HAL_GetTick>
 8002dda:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dde:	e009      	b.n	8002df4 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de0:	f7fe fa84 	bl	80012ec <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b64      	cmp	r3, #100	@ 0x64
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e39e      	b.n	8003532 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df4:	4b34      	ldr	r3, [pc, #208]	@ (8002ec8 <HAL_RCC_OscConfig+0x9a4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0ef      	beq.n	8002de0 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCC_OscConfig+0x8fa>
 8002e10:	4b2b      	ldr	r3, [pc, #172]	@ (8002ec0 <HAL_RCC_OscConfig+0x99c>)
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	4a2a      	ldr	r2, [pc, #168]	@ (8002ec0 <HAL_RCC_OscConfig+0x99c>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6213      	str	r3, [r2, #32]
 8002e1c:	e035      	b.n	8002e8a <HAL_RCC_OscConfig+0x966>
 8002e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10c      	bne.n	8002e48 <HAL_RCC_OscConfig+0x924>
 8002e2e:	4b24      	ldr	r3, [pc, #144]	@ (8002ec0 <HAL_RCC_OscConfig+0x99c>)
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	4a23      	ldr	r2, [pc, #140]	@ (8002ec0 <HAL_RCC_OscConfig+0x99c>)
 8002e34:	f023 0301 	bic.w	r3, r3, #1
 8002e38:	6213      	str	r3, [r2, #32]
 8002e3a:	4b21      	ldr	r3, [pc, #132]	@ (8002ec0 <HAL_RCC_OscConfig+0x99c>)
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	4a20      	ldr	r2, [pc, #128]	@ (8002ec0 <HAL_RCC_OscConfig+0x99c>)
 8002e40:	f023 0304 	bic.w	r3, r3, #4
 8002e44:	6213      	str	r3, [r2, #32]
 8002e46:	e020      	b.n	8002e8a <HAL_RCC_OscConfig+0x966>
 8002e48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2b05      	cmp	r3, #5
 8002e56:	d10c      	bne.n	8002e72 <HAL_RCC_OscConfig+0x94e>
 8002e58:	4b19      	ldr	r3, [pc, #100]	@ (8002ec0 <HAL_RCC_OscConfig+0x99c>)
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	4a18      	ldr	r2, [pc, #96]	@ (8002ec0 <HAL_RCC_OscConfig+0x99c>)
 8002e5e:	f043 0304 	orr.w	r3, r3, #4
 8002e62:	6213      	str	r3, [r2, #32]
 8002e64:	4b16      	ldr	r3, [pc, #88]	@ (8002ec0 <HAL_RCC_OscConfig+0x99c>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	4a15      	ldr	r2, [pc, #84]	@ (8002ec0 <HAL_RCC_OscConfig+0x99c>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6213      	str	r3, [r2, #32]
 8002e70:	e00b      	b.n	8002e8a <HAL_RCC_OscConfig+0x966>
 8002e72:	4b13      	ldr	r3, [pc, #76]	@ (8002ec0 <HAL_RCC_OscConfig+0x99c>)
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	4a12      	ldr	r2, [pc, #72]	@ (8002ec0 <HAL_RCC_OscConfig+0x99c>)
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	6213      	str	r3, [r2, #32]
 8002e7e:	4b10      	ldr	r3, [pc, #64]	@ (8002ec0 <HAL_RCC_OscConfig+0x99c>)
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	4a0f      	ldr	r2, [pc, #60]	@ (8002ec0 <HAL_RCC_OscConfig+0x99c>)
 8002e84:	f023 0304 	bic.w	r3, r3, #4
 8002e88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 8087 	beq.w	8002faa <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e9c:	f7fe fa26 	bl	80012ec <HAL_GetTick>
 8002ea0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea4:	e012      	b.n	8002ecc <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea6:	f7fe fa21 	bl	80012ec <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d908      	bls.n	8002ecc <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e339      	b.n	8003532 <HAL_RCC_OscConfig+0x100e>
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	10908120 	.word	0x10908120
 8002ec8:	40007000 	.word	0x40007000
 8002ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002edc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	fa93 f2a3 	rbit	r2, r3
 8002ee6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eea:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ef8:	2202      	movs	r2, #2
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f00:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	fa93 f2a3 	rbit	r2, r3
 8002f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f12:	601a      	str	r2, [r3, #0]
  return result;
 8002f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f18:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f1c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d102      	bne.n	8002f34 <HAL_RCC_OscConfig+0xa10>
 8002f2e:	4b98      	ldr	r3, [pc, #608]	@ (8003190 <HAL_RCC_OscConfig+0xc6c>)
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	e013      	b.n	8002f5c <HAL_RCC_OscConfig+0xa38>
 8002f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f38:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f44:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	fa93 f2a3 	rbit	r2, r3
 8002f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f52:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	4b8d      	ldr	r3, [pc, #564]	@ (8003190 <HAL_RCC_OscConfig+0xc6c>)
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f60:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002f64:	2102      	movs	r1, #2
 8002f66:	6011      	str	r1, [r2, #0]
 8002f68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f6c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	fa92 f1a2 	rbit	r1, r2
 8002f76:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f7a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002f7e:	6011      	str	r1, [r2, #0]
  return result;
 8002f80:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f84:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002f88:	6812      	ldr	r2, [r2, #0]
 8002f8a:	fab2 f282 	clz	r2, r2
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	f002 021f 	and.w	r2, r2, #31
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f43f af7f 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x982>
 8002fa8:	e07d      	b.n	80030a6 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002faa:	f7fe f99f 	bl	80012ec <HAL_GetTick>
 8002fae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb2:	e00b      	b.n	8002fcc <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fb4:	f7fe f99a 	bl	80012ec <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e2b2      	b.n	8003532 <HAL_RCC_OscConfig+0x100e>
 8002fcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fdc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	fa93 f2a3 	rbit	r2, r3
 8002fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fea:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003000:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	fa93 f2a3 	rbit	r2, r3
 800300a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003012:	601a      	str	r2, [r3, #0]
  return result;
 8003014:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003018:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800301c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d102      	bne.n	8003034 <HAL_RCC_OscConfig+0xb10>
 800302e:	4b58      	ldr	r3, [pc, #352]	@ (8003190 <HAL_RCC_OscConfig+0xc6c>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	e013      	b.n	800305c <HAL_RCC_OscConfig+0xb38>
 8003034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003038:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800303c:	2202      	movs	r2, #2
 800303e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003044:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	fa93 f2a3 	rbit	r2, r3
 800304e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003052:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	4b4d      	ldr	r3, [pc, #308]	@ (8003190 <HAL_RCC_OscConfig+0xc6c>)
 800305a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003060:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003064:	2102      	movs	r1, #2
 8003066:	6011      	str	r1, [r2, #0]
 8003068:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800306c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003070:	6812      	ldr	r2, [r2, #0]
 8003072:	fa92 f1a2 	rbit	r1, r2
 8003076:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800307a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800307e:	6011      	str	r1, [r2, #0]
  return result;
 8003080:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003084:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	fab2 f282 	clz	r2, r2
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	f002 021f 	and.w	r2, r2, #31
 800309a:	2101      	movs	r1, #1
 800309c:	fa01 f202 	lsl.w	r2, r1, r2
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d186      	bne.n	8002fb4 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030a6:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d105      	bne.n	80030ba <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ae:	4b38      	ldr	r3, [pc, #224]	@ (8003190 <HAL_RCC_OscConfig+0xc6c>)
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	4a37      	ldr	r2, [pc, #220]	@ (8003190 <HAL_RCC_OscConfig+0xc6c>)
 80030b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030b8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 8232 	beq.w	8003530 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030cc:	4b30      	ldr	r3, [pc, #192]	@ (8003190 <HAL_RCC_OscConfig+0xc6c>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	f000 8201 	beq.w	80034dc <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	f040 8157 	bne.w	800339a <HAL_RCC_OscConfig+0xe76>
 80030ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80030f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fe:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	fa93 f2a3 	rbit	r2, r3
 8003108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003110:	601a      	str	r2, [r3, #0]
  return result;
 8003112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003116:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800311a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311c:	fab3 f383 	clz	r3, r3
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003126:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	461a      	mov	r2, r3
 800312e:	2300      	movs	r3, #0
 8003130:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003132:	f7fe f8db 	bl	80012ec <HAL_GetTick>
 8003136:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800313a:	e009      	b.n	8003150 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800313c:	f7fe f8d6 	bl	80012ec <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e1f0      	b.n	8003532 <HAL_RCC_OscConfig+0x100e>
 8003150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003154:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003158:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800315c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003162:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	fa93 f2a3 	rbit	r2, r3
 800316c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003170:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003174:	601a      	str	r2, [r3, #0]
  return result;
 8003176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800317a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800317e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003180:	fab3 f383 	clz	r3, r3
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b3f      	cmp	r3, #63	@ 0x3f
 8003188:	d804      	bhi.n	8003194 <HAL_RCC_OscConfig+0xc70>
 800318a:	4b01      	ldr	r3, [pc, #4]	@ (8003190 <HAL_RCC_OscConfig+0xc6c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	e029      	b.n	80031e4 <HAL_RCC_OscConfig+0xcc0>
 8003190:	40021000 	.word	0x40021000
 8003194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003198:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800319c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	fa93 f2a3 	rbit	r2, r3
 80031b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031be:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80031c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031cc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	fa93 f2a3 	rbit	r2, r3
 80031d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031da:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	4bc3      	ldr	r3, [pc, #780]	@ (80034f0 <HAL_RCC_OscConfig+0xfcc>)
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031e8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80031ec:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80031f0:	6011      	str	r1, [r2, #0]
 80031f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031f6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	fa92 f1a2 	rbit	r1, r2
 8003200:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003204:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003208:	6011      	str	r1, [r2, #0]
  return result;
 800320a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800320e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	fab2 f282 	clz	r2, r2
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	f042 0220 	orr.w	r2, r2, #32
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	f002 021f 	and.w	r2, r2, #31
 8003224:	2101      	movs	r1, #1
 8003226:	fa01 f202 	lsl.w	r2, r1, r2
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d185      	bne.n	800313c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003230:	4baf      	ldr	r3, [pc, #700]	@ (80034f0 <HAL_RCC_OscConfig+0xfcc>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003248:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	430b      	orrs	r3, r1
 8003252:	49a7      	ldr	r1, [pc, #668]	@ (80034f0 <HAL_RCC_OscConfig+0xfcc>)
 8003254:	4313      	orrs	r3, r2
 8003256:	604b      	str	r3, [r1, #4]
 8003258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003260:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003264:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	fa93 f2a3 	rbit	r2, r3
 8003274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003278:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800327c:	601a      	str	r2, [r3, #0]
  return result;
 800327e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003282:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003286:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003292:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	461a      	mov	r2, r3
 800329a:	2301      	movs	r3, #1
 800329c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329e:	f7fe f825 	bl	80012ec <HAL_GetTick>
 80032a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032a6:	e009      	b.n	80032bc <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a8:	f7fe f820 	bl	80012ec <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e13a      	b.n	8003532 <HAL_RCC_OscConfig+0x100e>
 80032bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80032c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ce:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	fa93 f2a3 	rbit	r2, r3
 80032d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032dc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80032e0:	601a      	str	r2, [r3, #0]
  return result;
 80032e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80032ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032ec:	fab3 f383 	clz	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80032f4:	d802      	bhi.n	80032fc <HAL_RCC_OscConfig+0xdd8>
 80032f6:	4b7e      	ldr	r3, [pc, #504]	@ (80034f0 <HAL_RCC_OscConfig+0xfcc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	e027      	b.n	800334c <HAL_RCC_OscConfig+0xe28>
 80032fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003300:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003304:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003308:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	fa93 f2a3 	rbit	r2, r3
 8003318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800331c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003326:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800332a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003334:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	fa93 f2a3 	rbit	r2, r3
 800333e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003342:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	4b69      	ldr	r3, [pc, #420]	@ (80034f0 <HAL_RCC_OscConfig+0xfcc>)
 800334a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003350:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003354:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003358:	6011      	str	r1, [r2, #0]
 800335a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800335e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	fa92 f1a2 	rbit	r1, r2
 8003368:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800336c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003370:	6011      	str	r1, [r2, #0]
  return result;
 8003372:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003376:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	fab2 f282 	clz	r2, r2
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	f042 0220 	orr.w	r2, r2, #32
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	f002 021f 	and.w	r2, r2, #31
 800338c:	2101      	movs	r1, #1
 800338e:	fa01 f202 	lsl.w	r2, r1, r2
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d087      	beq.n	80032a8 <HAL_RCC_OscConfig+0xd84>
 8003398:	e0ca      	b.n	8003530 <HAL_RCC_OscConfig+0x100c>
 800339a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800339e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80033a2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ac:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	fa93 f2a3 	rbit	r2, r3
 80033b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ba:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80033be:	601a      	str	r2, [r3, #0]
  return result;
 80033c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80033c8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ca:	fab3 f383 	clz	r3, r3
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80033d4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	461a      	mov	r2, r3
 80033dc:	2300      	movs	r3, #0
 80033de:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7fd ff84 	bl	80012ec <HAL_GetTick>
 80033e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e8:	e009      	b.n	80033fe <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ea:	f7fd ff7f 	bl	80012ec <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e099      	b.n	8003532 <HAL_RCC_OscConfig+0x100e>
 80033fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003402:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003406:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800340a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003410:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	fa93 f2a3 	rbit	r2, r3
 800341a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003422:	601a      	str	r2, [r3, #0]
  return result;
 8003424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003428:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800342c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800342e:	fab3 f383 	clz	r3, r3
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b3f      	cmp	r3, #63	@ 0x3f
 8003436:	d802      	bhi.n	800343e <HAL_RCC_OscConfig+0xf1a>
 8003438:	4b2d      	ldr	r3, [pc, #180]	@ (80034f0 <HAL_RCC_OscConfig+0xfcc>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	e027      	b.n	800348e <HAL_RCC_OscConfig+0xf6a>
 800343e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003442:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003446:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800344a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003450:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	fa93 f2a3 	rbit	r2, r3
 800345a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003468:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800346c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003476:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	fa93 f2a3 	rbit	r2, r3
 8003480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003484:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	4b19      	ldr	r3, [pc, #100]	@ (80034f0 <HAL_RCC_OscConfig+0xfcc>)
 800348c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003492:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003496:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800349a:	6011      	str	r1, [r2, #0]
 800349c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034a0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	fa92 f1a2 	rbit	r1, r2
 80034aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034ae:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80034b2:	6011      	str	r1, [r2, #0]
  return result;
 80034b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034b8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80034bc:	6812      	ldr	r2, [r2, #0]
 80034be:	fab2 f282 	clz	r2, r2
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	f042 0220 	orr.w	r2, r2, #32
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	f002 021f 	and.w	r2, r2, #31
 80034ce:	2101      	movs	r1, #1
 80034d0:	fa01 f202 	lsl.w	r2, r1, r2
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d187      	bne.n	80033ea <HAL_RCC_OscConfig+0xec6>
 80034da:	e029      	b.n	8003530 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d103      	bne.n	80034f4 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e020      	b.n	8003532 <HAL_RCC_OscConfig+0x100e>
 80034f0:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034f4:	4b11      	ldr	r3, [pc, #68]	@ (800353c <HAL_RCC_OscConfig+0x1018>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80034fc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003500:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003508:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	429a      	cmp	r2, r3
 8003512:	d10b      	bne.n	800352c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003514:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003518:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800351c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003520:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003528:	429a      	cmp	r2, r3
 800352a:	d001      	beq.n	8003530 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000

08003540 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b09e      	sub	sp, #120	@ 0x78
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e154      	b.n	8003802 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003558:	4b89      	ldr	r3, [pc, #548]	@ (8003780 <HAL_RCC_ClockConfig+0x240>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d910      	bls.n	8003588 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003566:	4b86      	ldr	r3, [pc, #536]	@ (8003780 <HAL_RCC_ClockConfig+0x240>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 0207 	bic.w	r2, r3, #7
 800356e:	4984      	ldr	r1, [pc, #528]	@ (8003780 <HAL_RCC_ClockConfig+0x240>)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	4313      	orrs	r3, r2
 8003574:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	4b82      	ldr	r3, [pc, #520]	@ (8003780 <HAL_RCC_ClockConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e13c      	b.n	8003802 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003594:	4b7b      	ldr	r3, [pc, #492]	@ (8003784 <HAL_RCC_ClockConfig+0x244>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	4978      	ldr	r1, [pc, #480]	@ (8003784 <HAL_RCC_ClockConfig+0x244>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 80cd 	beq.w	800374e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d137      	bne.n	800362c <HAL_RCC_ClockConfig+0xec>
 80035bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035c4:	fa93 f3a3 	rbit	r3, r3
 80035c8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80035ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035cc:	fab3 f383 	clz	r3, r3
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80035d4:	d802      	bhi.n	80035dc <HAL_RCC_ClockConfig+0x9c>
 80035d6:	4b6b      	ldr	r3, [pc, #428]	@ (8003784 <HAL_RCC_ClockConfig+0x244>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	e00f      	b.n	80035fc <HAL_RCC_ClockConfig+0xbc>
 80035dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035e4:	fa93 f3a3 	rbit	r3, r3
 80035e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80035ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80035f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035f8:	4b62      	ldr	r3, [pc, #392]	@ (8003784 <HAL_RCC_ClockConfig+0x244>)
 80035fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003600:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003602:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003604:	fa92 f2a2 	rbit	r2, r2
 8003608:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800360a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800360c:	fab2 f282 	clz	r2, r2
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	f042 0220 	orr.w	r2, r2, #32
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	f002 021f 	and.w	r2, r2, #31
 800361c:	2101      	movs	r1, #1
 800361e:	fa01 f202 	lsl.w	r2, r1, r2
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d171      	bne.n	800370c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0ea      	b.n	8003802 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d137      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x164>
 8003634:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003638:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800363c:	fa93 f3a3 	rbit	r3, r3
 8003640:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003644:	fab3 f383 	clz	r3, r3
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b3f      	cmp	r3, #63	@ 0x3f
 800364c:	d802      	bhi.n	8003654 <HAL_RCC_ClockConfig+0x114>
 800364e:	4b4d      	ldr	r3, [pc, #308]	@ (8003784 <HAL_RCC_ClockConfig+0x244>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	e00f      	b.n	8003674 <HAL_RCC_ClockConfig+0x134>
 8003654:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003658:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	647b      	str	r3, [r7, #68]	@ 0x44
 8003662:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003666:	643b      	str	r3, [r7, #64]	@ 0x40
 8003668:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800366a:	fa93 f3a3 	rbit	r3, r3
 800366e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003670:	4b44      	ldr	r3, [pc, #272]	@ (8003784 <HAL_RCC_ClockConfig+0x244>)
 8003672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003674:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003678:	63ba      	str	r2, [r7, #56]	@ 0x38
 800367a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800367c:	fa92 f2a2 	rbit	r2, r2
 8003680:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003682:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003684:	fab2 f282 	clz	r2, r2
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	f042 0220 	orr.w	r2, r2, #32
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	f002 021f 	and.w	r2, r2, #31
 8003694:	2101      	movs	r1, #1
 8003696:	fa01 f202 	lsl.w	r2, r1, r2
 800369a:	4013      	ands	r3, r2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d135      	bne.n	800370c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0ae      	b.n	8003802 <HAL_RCC_ClockConfig+0x2c2>
 80036a4:	2302      	movs	r3, #2
 80036a6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036aa:	fa93 f3a3 	rbit	r3, r3
 80036ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80036b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80036ba:	d802      	bhi.n	80036c2 <HAL_RCC_ClockConfig+0x182>
 80036bc:	4b31      	ldr	r3, [pc, #196]	@ (8003784 <HAL_RCC_ClockConfig+0x244>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	e00d      	b.n	80036de <HAL_RCC_ClockConfig+0x19e>
 80036c2:	2302      	movs	r3, #2
 80036c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ce:	2302      	movs	r3, #2
 80036d0:	623b      	str	r3, [r7, #32]
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	fa93 f3a3 	rbit	r3, r3
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	4b2a      	ldr	r3, [pc, #168]	@ (8003784 <HAL_RCC_ClockConfig+0x244>)
 80036dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036de:	2202      	movs	r2, #2
 80036e0:	61ba      	str	r2, [r7, #24]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	fa92 f2a2 	rbit	r2, r2
 80036e8:	617a      	str	r2, [r7, #20]
  return result;
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	fab2 f282 	clz	r2, r2
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	f042 0220 	orr.w	r2, r2, #32
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	f002 021f 	and.w	r2, r2, #31
 80036fc:	2101      	movs	r1, #1
 80036fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003702:	4013      	ands	r3, r2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e07a      	b.n	8003802 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800370c:	4b1d      	ldr	r3, [pc, #116]	@ (8003784 <HAL_RCC_ClockConfig+0x244>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f023 0203 	bic.w	r2, r3, #3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	491a      	ldr	r1, [pc, #104]	@ (8003784 <HAL_RCC_ClockConfig+0x244>)
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800371e:	f7fd fde5 	bl	80012ec <HAL_GetTick>
 8003722:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003724:	e00a      	b.n	800373c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003726:	f7fd fde1 	bl	80012ec <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003734:	4293      	cmp	r3, r2
 8003736:	d901      	bls.n	800373c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e062      	b.n	8003802 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373c:	4b11      	ldr	r3, [pc, #68]	@ (8003784 <HAL_RCC_ClockConfig+0x244>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 020c 	and.w	r2, r3, #12
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	429a      	cmp	r2, r3
 800374c:	d1eb      	bne.n	8003726 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800374e:	4b0c      	ldr	r3, [pc, #48]	@ (8003780 <HAL_RCC_ClockConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d215      	bcs.n	8003788 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375c:	4b08      	ldr	r3, [pc, #32]	@ (8003780 <HAL_RCC_ClockConfig+0x240>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f023 0207 	bic.w	r2, r3, #7
 8003764:	4906      	ldr	r1, [pc, #24]	@ (8003780 <HAL_RCC_ClockConfig+0x240>)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	4313      	orrs	r3, r2
 800376a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376c:	4b04      	ldr	r3, [pc, #16]	@ (8003780 <HAL_RCC_ClockConfig+0x240>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d006      	beq.n	8003788 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e041      	b.n	8003802 <HAL_RCC_ClockConfig+0x2c2>
 800377e:	bf00      	nop
 8003780:	40022000 	.word	0x40022000
 8003784:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003794:	4b1d      	ldr	r3, [pc, #116]	@ (800380c <HAL_RCC_ClockConfig+0x2cc>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	491a      	ldr	r1, [pc, #104]	@ (800380c <HAL_RCC_ClockConfig+0x2cc>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d009      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037b2:	4b16      	ldr	r3, [pc, #88]	@ (800380c <HAL_RCC_ClockConfig+0x2cc>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4912      	ldr	r1, [pc, #72]	@ (800380c <HAL_RCC_ClockConfig+0x2cc>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80037c6:	f000 f829 	bl	800381c <HAL_RCC_GetSysClockFreq>
 80037ca:	4601      	mov	r1, r0
 80037cc:	4b0f      	ldr	r3, [pc, #60]	@ (800380c <HAL_RCC_ClockConfig+0x2cc>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037d4:	22f0      	movs	r2, #240	@ 0xf0
 80037d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	fa92 f2a2 	rbit	r2, r2
 80037de:	60fa      	str	r2, [r7, #12]
  return result;
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	fab2 f282 	clz	r2, r2
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	40d3      	lsrs	r3, r2
 80037ea:	4a09      	ldr	r2, [pc, #36]	@ (8003810 <HAL_RCC_ClockConfig+0x2d0>)
 80037ec:	5cd3      	ldrb	r3, [r2, r3]
 80037ee:	fa21 f303 	lsr.w	r3, r1, r3
 80037f2:	4a08      	ldr	r2, [pc, #32]	@ (8003814 <HAL_RCC_ClockConfig+0x2d4>)
 80037f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80037f6:	4b08      	ldr	r3, [pc, #32]	@ (8003818 <HAL_RCC_ClockConfig+0x2d8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fd fd32 	bl	8001264 <HAL_InitTick>
  
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3778      	adds	r7, #120	@ 0x78
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000
 8003810:	08004114 	.word	0x08004114
 8003814:	2000001c 	.word	0x2000001c
 8003818:	20000020 	.word	0x20000020

0800381c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	2300      	movs	r3, #0
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	2300      	movs	r3, #0
 8003830:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003836:	4b1e      	ldr	r3, [pc, #120]	@ (80038b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	2b04      	cmp	r3, #4
 8003844:	d002      	beq.n	800384c <HAL_RCC_GetSysClockFreq+0x30>
 8003846:	2b08      	cmp	r3, #8
 8003848:	d003      	beq.n	8003852 <HAL_RCC_GetSysClockFreq+0x36>
 800384a:	e026      	b.n	800389a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800384c:	4b19      	ldr	r3, [pc, #100]	@ (80038b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800384e:	613b      	str	r3, [r7, #16]
      break;
 8003850:	e026      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	0c9b      	lsrs	r3, r3, #18
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	4a17      	ldr	r2, [pc, #92]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800385c:	5cd3      	ldrb	r3, [r2, r3]
 800385e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003860:	4b13      	ldr	r3, [pc, #76]	@ (80038b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	4a14      	ldr	r2, [pc, #80]	@ (80038bc <HAL_RCC_GetSysClockFreq+0xa0>)
 800386a:	5cd3      	ldrb	r3, [r2, r3]
 800386c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003878:	4a0e      	ldr	r2, [pc, #56]	@ (80038b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	fb02 f303 	mul.w	r3, r2, r3
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	e004      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a0c      	ldr	r2, [pc, #48]	@ (80038c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800388e:	fb02 f303 	mul.w	r3, r2, r3
 8003892:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	613b      	str	r3, [r7, #16]
      break;
 8003898:	e002      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800389a:	4b06      	ldr	r3, [pc, #24]	@ (80038b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800389c:	613b      	str	r3, [r7, #16]
      break;
 800389e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038a0:	693b      	ldr	r3, [r7, #16]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	371c      	adds	r7, #28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40021000 	.word	0x40021000
 80038b4:	007a1200 	.word	0x007a1200
 80038b8:	0800412c 	.word	0x0800412c
 80038bc:	0800413c 	.word	0x0800413c
 80038c0:	003d0900 	.word	0x003d0900

080038c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038c8:	4b03      	ldr	r3, [pc, #12]	@ (80038d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038ca:	681b      	ldr	r3, [r3, #0]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	2000001c 	.word	0x2000001c

080038dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80038e2:	f7ff ffef 	bl	80038c4 <HAL_RCC_GetHCLKFreq>
 80038e6:	4601      	mov	r1, r0
 80038e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003918 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80038f0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80038f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	fa92 f2a2 	rbit	r2, r2
 80038fc:	603a      	str	r2, [r7, #0]
  return result;
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	fab2 f282 	clz	r2, r2
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	40d3      	lsrs	r3, r2
 8003908:	4a04      	ldr	r2, [pc, #16]	@ (800391c <HAL_RCC_GetPCLK1Freq+0x40>)
 800390a:	5cd3      	ldrb	r3, [r2, r3]
 800390c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40021000 	.word	0x40021000
 800391c:	08004124 	.word	0x08004124

08003920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003926:	f7ff ffcd 	bl	80038c4 <HAL_RCC_GetHCLKFreq>
 800392a:	4601      	mov	r1, r0
 800392c:	4b0b      	ldr	r3, [pc, #44]	@ (800395c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003934:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003938:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	fa92 f2a2 	rbit	r2, r2
 8003940:	603a      	str	r2, [r7, #0]
  return result;
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	fab2 f282 	clz	r2, r2
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	40d3      	lsrs	r3, r2
 800394c:	4a04      	ldr	r2, [pc, #16]	@ (8003960 <HAL_RCC_GetPCLK2Freq+0x40>)
 800394e:	5cd3      	ldrb	r3, [r2, r3]
 8003950:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40021000 	.word	0x40021000
 8003960:	08004124 	.word	0x08004124

08003964 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e040      	b.n	80039f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd fb7e 	bl	8001088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2224      	movs	r2, #36	@ 0x24
 8003990:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0201 	bic.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f95e 	bl	8003c6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f825 	bl	8003a00 <UART_SetConfig>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e01b      	b.n	80039f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0201 	orr.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f9dd 	bl	8003db0 <UART_CheckIdleState>
 80039f6:	4603      	mov	r3, r0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	4b8a      	ldr	r3, [pc, #552]	@ (8003c54 <UART_SetConfig+0x254>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6812      	ldr	r2, [r2, #0]
 8003a32:	6979      	ldr	r1, [r7, #20]
 8003a34:	430b      	orrs	r3, r1
 8003a36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a78      	ldr	r2, [pc, #480]	@ (8003c58 <UART_SetConfig+0x258>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d120      	bne.n	8003abe <UART_SetConfig+0xbe>
 8003a7c:	4b77      	ldr	r3, [pc, #476]	@ (8003c5c <UART_SetConfig+0x25c>)
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d817      	bhi.n	8003ab8 <UART_SetConfig+0xb8>
 8003a88:	a201      	add	r2, pc, #4	@ (adr r2, 8003a90 <UART_SetConfig+0x90>)
 8003a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8e:	bf00      	nop
 8003a90:	08003aa1 	.word	0x08003aa1
 8003a94:	08003aad 	.word	0x08003aad
 8003a98:	08003ab3 	.word	0x08003ab3
 8003a9c:	08003aa7 	.word	0x08003aa7
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	77fb      	strb	r3, [r7, #31]
 8003aa4:	e01d      	b.n	8003ae2 <UART_SetConfig+0xe2>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	77fb      	strb	r3, [r7, #31]
 8003aaa:	e01a      	b.n	8003ae2 <UART_SetConfig+0xe2>
 8003aac:	2304      	movs	r3, #4
 8003aae:	77fb      	strb	r3, [r7, #31]
 8003ab0:	e017      	b.n	8003ae2 <UART_SetConfig+0xe2>
 8003ab2:	2308      	movs	r3, #8
 8003ab4:	77fb      	strb	r3, [r7, #31]
 8003ab6:	e014      	b.n	8003ae2 <UART_SetConfig+0xe2>
 8003ab8:	2310      	movs	r3, #16
 8003aba:	77fb      	strb	r3, [r7, #31]
 8003abc:	e011      	b.n	8003ae2 <UART_SetConfig+0xe2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a67      	ldr	r2, [pc, #412]	@ (8003c60 <UART_SetConfig+0x260>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d102      	bne.n	8003ace <UART_SetConfig+0xce>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	e009      	b.n	8003ae2 <UART_SetConfig+0xe2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a64      	ldr	r2, [pc, #400]	@ (8003c64 <UART_SetConfig+0x264>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d102      	bne.n	8003ade <UART_SetConfig+0xde>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	77fb      	strb	r3, [r7, #31]
 8003adc:	e001      	b.n	8003ae2 <UART_SetConfig+0xe2>
 8003ade:	2310      	movs	r3, #16
 8003ae0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aea:	d15a      	bne.n	8003ba2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003aec:	7ffb      	ldrb	r3, [r7, #31]
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d827      	bhi.n	8003b42 <UART_SetConfig+0x142>
 8003af2:	a201      	add	r2, pc, #4	@ (adr r2, 8003af8 <UART_SetConfig+0xf8>)
 8003af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af8:	08003b1d 	.word	0x08003b1d
 8003afc:	08003b25 	.word	0x08003b25
 8003b00:	08003b2d 	.word	0x08003b2d
 8003b04:	08003b43 	.word	0x08003b43
 8003b08:	08003b33 	.word	0x08003b33
 8003b0c:	08003b43 	.word	0x08003b43
 8003b10:	08003b43 	.word	0x08003b43
 8003b14:	08003b43 	.word	0x08003b43
 8003b18:	08003b3b 	.word	0x08003b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b1c:	f7ff fede 	bl	80038dc <HAL_RCC_GetPCLK1Freq>
 8003b20:	61b8      	str	r0, [r7, #24]
        break;
 8003b22:	e013      	b.n	8003b4c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b24:	f7ff fefc 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 8003b28:	61b8      	str	r0, [r7, #24]
        break;
 8003b2a:	e00f      	b.n	8003b4c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b2c:	4b4e      	ldr	r3, [pc, #312]	@ (8003c68 <UART_SetConfig+0x268>)
 8003b2e:	61bb      	str	r3, [r7, #24]
        break;
 8003b30:	e00c      	b.n	8003b4c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b32:	f7ff fe73 	bl	800381c <HAL_RCC_GetSysClockFreq>
 8003b36:	61b8      	str	r0, [r7, #24]
        break;
 8003b38:	e008      	b.n	8003b4c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b3e:	61bb      	str	r3, [r7, #24]
        break;
 8003b40:	e004      	b.n	8003b4c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	77bb      	strb	r3, [r7, #30]
        break;
 8003b4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d074      	beq.n	8003c3c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	005a      	lsls	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	085b      	lsrs	r3, r3, #1
 8003b5c:	441a      	add	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	2b0f      	cmp	r3, #15
 8003b6c:	d916      	bls.n	8003b9c <UART_SetConfig+0x19c>
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b74:	d212      	bcs.n	8003b9c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	f023 030f 	bic.w	r3, r3, #15
 8003b7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	085b      	lsrs	r3, r3, #1
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	89fb      	ldrh	r3, [r7, #14]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	89fa      	ldrh	r2, [r7, #14]
 8003b98:	60da      	str	r2, [r3, #12]
 8003b9a:	e04f      	b.n	8003c3c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	77bb      	strb	r3, [r7, #30]
 8003ba0:	e04c      	b.n	8003c3c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ba2:	7ffb      	ldrb	r3, [r7, #31]
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d828      	bhi.n	8003bfa <UART_SetConfig+0x1fa>
 8003ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb0 <UART_SetConfig+0x1b0>)
 8003baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bae:	bf00      	nop
 8003bb0:	08003bd5 	.word	0x08003bd5
 8003bb4:	08003bdd 	.word	0x08003bdd
 8003bb8:	08003be5 	.word	0x08003be5
 8003bbc:	08003bfb 	.word	0x08003bfb
 8003bc0:	08003beb 	.word	0x08003beb
 8003bc4:	08003bfb 	.word	0x08003bfb
 8003bc8:	08003bfb 	.word	0x08003bfb
 8003bcc:	08003bfb 	.word	0x08003bfb
 8003bd0:	08003bf3 	.word	0x08003bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd4:	f7ff fe82 	bl	80038dc <HAL_RCC_GetPCLK1Freq>
 8003bd8:	61b8      	str	r0, [r7, #24]
        break;
 8003bda:	e013      	b.n	8003c04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bdc:	f7ff fea0 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 8003be0:	61b8      	str	r0, [r7, #24]
        break;
 8003be2:	e00f      	b.n	8003c04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003be4:	4b20      	ldr	r3, [pc, #128]	@ (8003c68 <UART_SetConfig+0x268>)
 8003be6:	61bb      	str	r3, [r7, #24]
        break;
 8003be8:	e00c      	b.n	8003c04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bea:	f7ff fe17 	bl	800381c <HAL_RCC_GetSysClockFreq>
 8003bee:	61b8      	str	r0, [r7, #24]
        break;
 8003bf0:	e008      	b.n	8003c04 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bf6:	61bb      	str	r3, [r7, #24]
        break;
 8003bf8:	e004      	b.n	8003c04 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	77bb      	strb	r3, [r7, #30]
        break;
 8003c02:	bf00      	nop
    }

    if (pclk != 0U)
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d018      	beq.n	8003c3c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	085a      	lsrs	r2, r3, #1
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	441a      	add	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	2b0f      	cmp	r3, #15
 8003c22:	d909      	bls.n	8003c38 <UART_SetConfig+0x238>
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c2a:	d205      	bcs.n	8003c38 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60da      	str	r2, [r3, #12]
 8003c36:	e001      	b.n	8003c3c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003c48:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3720      	adds	r7, #32
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	efff69f3 	.word	0xefff69f3
 8003c58:	40013800 	.word	0x40013800
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40004400 	.word	0x40004400
 8003c64:	40004800 	.word	0x40004800
 8003c68:	007a1200 	.word	0x007a1200

08003c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d00:	f003 0310 	and.w	r3, r3, #16
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d01a      	beq.n	8003d82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d6a:	d10a      	bne.n	8003d82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	605a      	str	r2, [r3, #4]
  }
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b098      	sub	sp, #96	@ 0x60
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dc0:	f7fd fa94 	bl	80012ec <HAL_GetTick>
 8003dc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d12e      	bne.n	8003e32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f88c 	bl	8003f00 <UART_WaitOnFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d021      	beq.n	8003e32 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e02:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e0e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e6      	bne.n	8003dee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e062      	b.n	8003ef8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d149      	bne.n	8003ed4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f856 	bl	8003f00 <UART_WaitOnFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d03c      	beq.n	8003ed4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	e853 3f00 	ldrex	r3, [r3]
 8003e66:	623b      	str	r3, [r7, #32]
   return(result);
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	461a      	mov	r2, r3
 8003e76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e78:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e80:	e841 2300 	strex	r3, r2, [r1]
 8003e84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1e6      	bne.n	8003e5a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3308      	adds	r3, #8
 8003e92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	e853 3f00 	ldrex	r3, [r3]
 8003e9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0301 	bic.w	r3, r3, #1
 8003ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003eac:	61fa      	str	r2, [r7, #28]
 8003eae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb0:	69b9      	ldr	r1, [r7, #24]
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	e841 2300 	strex	r3, r2, [r1]
 8003eb8:	617b      	str	r3, [r7, #20]
   return(result);
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1e5      	bne.n	8003e8c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e011      	b.n	8003ef8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3758      	adds	r7, #88	@ 0x58
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f10:	e04f      	b.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f18:	d04b      	beq.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1a:	f7fd f9e7 	bl	80012ec <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d302      	bcc.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e04e      	b.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d037      	beq.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b80      	cmp	r3, #128	@ 0x80
 8003f46:	d034      	beq.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2b40      	cmp	r3, #64	@ 0x40
 8003f4c:	d031      	beq.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d110      	bne.n	8003f7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2208      	movs	r2, #8
 8003f62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f838 	bl	8003fda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2208      	movs	r2, #8
 8003f6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e029      	b.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f8c:	d111      	bne.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f81e 	bl	8003fda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e00f      	b.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69da      	ldr	r2, [r3, #28]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	bf0c      	ite	eq
 8003fc2:	2301      	moveq	r3, #1
 8003fc4:	2300      	movne	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	461a      	mov	r2, r3
 8003fca:	79fb      	ldrb	r3, [r7, #7]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d0a0      	beq.n	8003f12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b095      	sub	sp, #84	@ 0x54
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fea:	e853 3f00 	ldrex	r3, [r3]
 8003fee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004000:	643b      	str	r3, [r7, #64]	@ 0x40
 8004002:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004004:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004006:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004008:	e841 2300 	strex	r3, r2, [r1]
 800400c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800400e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e6      	bne.n	8003fe2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3308      	adds	r3, #8
 800401a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	e853 3f00 	ldrex	r3, [r3]
 8004022:	61fb      	str	r3, [r7, #28]
   return(result);
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f023 0301 	bic.w	r3, r3, #1
 800402a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3308      	adds	r3, #8
 8004032:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004034:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004036:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004038:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800403a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800403c:	e841 2300 	strex	r3, r2, [r1]
 8004040:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e5      	bne.n	8004014 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800404c:	2b01      	cmp	r3, #1
 800404e:	d118      	bne.n	8004082 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	e853 3f00 	ldrex	r3, [r3]
 800405c:	60bb      	str	r3, [r7, #8]
   return(result);
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f023 0310 	bic.w	r3, r3, #16
 8004064:	647b      	str	r3, [r7, #68]	@ 0x44
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	461a      	mov	r2, r3
 800406c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800406e:	61bb      	str	r3, [r7, #24]
 8004070:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004072:	6979      	ldr	r1, [r7, #20]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	e841 2300 	strex	r3, r2, [r1]
 800407a:	613b      	str	r3, [r7, #16]
   return(result);
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1e6      	bne.n	8004050 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2220      	movs	r2, #32
 8004086:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004096:	bf00      	nop
 8004098:	3754      	adds	r7, #84	@ 0x54
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <memset>:
 80040a2:	4402      	add	r2, r0
 80040a4:	4603      	mov	r3, r0
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d100      	bne.n	80040ac <memset+0xa>
 80040aa:	4770      	bx	lr
 80040ac:	f803 1b01 	strb.w	r1, [r3], #1
 80040b0:	e7f9      	b.n	80040a6 <memset+0x4>
	...

080040b4 <__libc_init_array>:
 80040b4:	b570      	push	{r4, r5, r6, lr}
 80040b6:	4d0d      	ldr	r5, [pc, #52]	@ (80040ec <__libc_init_array+0x38>)
 80040b8:	4c0d      	ldr	r4, [pc, #52]	@ (80040f0 <__libc_init_array+0x3c>)
 80040ba:	1b64      	subs	r4, r4, r5
 80040bc:	10a4      	asrs	r4, r4, #2
 80040be:	2600      	movs	r6, #0
 80040c0:	42a6      	cmp	r6, r4
 80040c2:	d109      	bne.n	80040d8 <__libc_init_array+0x24>
 80040c4:	4d0b      	ldr	r5, [pc, #44]	@ (80040f4 <__libc_init_array+0x40>)
 80040c6:	4c0c      	ldr	r4, [pc, #48]	@ (80040f8 <__libc_init_array+0x44>)
 80040c8:	f000 f818 	bl	80040fc <_init>
 80040cc:	1b64      	subs	r4, r4, r5
 80040ce:	10a4      	asrs	r4, r4, #2
 80040d0:	2600      	movs	r6, #0
 80040d2:	42a6      	cmp	r6, r4
 80040d4:	d105      	bne.n	80040e2 <__libc_init_array+0x2e>
 80040d6:	bd70      	pop	{r4, r5, r6, pc}
 80040d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040dc:	4798      	blx	r3
 80040de:	3601      	adds	r6, #1
 80040e0:	e7ee      	b.n	80040c0 <__libc_init_array+0xc>
 80040e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e6:	4798      	blx	r3
 80040e8:	3601      	adds	r6, #1
 80040ea:	e7f2      	b.n	80040d2 <__libc_init_array+0x1e>
 80040ec:	0800414c 	.word	0x0800414c
 80040f0:	0800414c 	.word	0x0800414c
 80040f4:	0800414c 	.word	0x0800414c
 80040f8:	08004150 	.word	0x08004150

080040fc <_init>:
 80040fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fe:	bf00      	nop
 8004100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004102:	bc08      	pop	{r3}
 8004104:	469e      	mov	lr, r3
 8004106:	4770      	bx	lr

08004108 <_fini>:
 8004108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410a:	bf00      	nop
 800410c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800410e:	bc08      	pop	{r3}
 8004110:	469e      	mov	lr, r3
 8004112:	4770      	bx	lr
