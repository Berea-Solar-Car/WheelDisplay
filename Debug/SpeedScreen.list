
SpeedScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040d8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004260  08004260  00005260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004298  08004298  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004298  08004298  00006068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004298  08004298  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004298  08004298  00005298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800429c  0800429c  0000529c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080042a0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          00000130  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000198  20000198  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a3ec  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000164b  00000000  00000000  00010484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d8  00000000  00000000  00011ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000605  00000000  00000000  000122a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019dbf  00000000  00000000  000128ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009853  00000000  00000000  0002c66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000997f1  00000000  00000000  00035ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000cf6b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000020b4  00000000  00000000  000cf6f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  000d17a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004248 	.word	0x08004248

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08004248 	.word	0x08004248

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2iz>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800079c:	d215      	bcs.n	80007ca <__aeabi_d2iz+0x36>
 800079e:	d511      	bpl.n	80007c4 <__aeabi_d2iz+0x30>
 80007a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d912      	bls.n	80007d0 <__aeabi_d2iz+0x3c>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007ba:	fa23 f002 	lsr.w	r0, r3, r2
 80007be:	bf18      	it	ne
 80007c0:	4240      	negne	r0, r0
 80007c2:	4770      	bx	lr
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	4770      	bx	lr
 80007ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ce:	d105      	bne.n	80007dc <__aeabi_d2iz+0x48>
 80007d0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80007d4:	bf08      	it	eq
 80007d6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	0000      	movs	r0, r0
	...

080007e8 <HAL_CAN_RxFifo0MsgPendingCallback>:
int ampHours = 99;
int packVS = 99;
int packVO = 99;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80007f0:	4b47      	ldr	r3, [pc, #284]	@ (8000910 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 80007f2:	4a48      	ldr	r2, [pc, #288]	@ (8000914 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 80007f4:	2100      	movs	r1, #0
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f001 f927 	bl	8001a4a <HAL_CAN_GetRxMessage>
	switch(RxHeader.StdId)
 80007fc:	4b45      	ldr	r3, [pc, #276]	@ (8000914 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f240 1215 	movw	r2, #277	@ 0x115
 8000804:	4293      	cmp	r3, r2
 8000806:	d00d      	beq.n	8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
 8000808:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 800080c:	d276      	bcs.n	80008fc <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
 800080e:	2b73      	cmp	r3, #115	@ 0x73
 8000810:	d038      	beq.n	8000884 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>
 8000812:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 8000816:	d171      	bne.n	80008fc <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
	{
		case 0x114:
			//failsafes = RxData[0];
			//DTC1 = RxData[1];
			//DTC2 = RxData[2];
			highTherm = RxData[3];
 8000818:	4b3d      	ldr	r3, [pc, #244]	@ (8000910 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 800081a:	78db      	ldrb	r3, [r3, #3]
 800081c:	461a      	mov	r2, r3
 800081e:	4b3e      	ldr	r3, [pc, #248]	@ (8000918 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 8000820:	601a      	str	r2, [r3, #0]
			break;
 8000822:	e06b      	b.n	80008fc <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
		case 0x115:
			packC = RxData[0]/10;
 8000824:	4b3a      	ldr	r3, [pc, #232]	@ (8000910 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4a3c      	ldr	r2, [pc, #240]	@ (800091c <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 800082a:	fba2 2303 	umull	r2, r3, r2, r3
 800082e:	08db      	lsrs	r3, r3, #3
 8000830:	b2db      	uxtb	r3, r3
 8000832:	461a      	mov	r2, r3
 8000834:	4b3a      	ldr	r3, [pc, #232]	@ (8000920 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8000836:	601a      	str	r2, [r3, #0]
			ampHours = RxData[1]/10;
 8000838:	4b35      	ldr	r3, [pc, #212]	@ (8000910 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 800083a:	785b      	ldrb	r3, [r3, #1]
 800083c:	4a37      	ldr	r2, [pc, #220]	@ (800091c <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 800083e:	fba2 2303 	umull	r2, r3, r2, r3
 8000842:	08db      	lsrs	r3, r3, #3
 8000844:	b2db      	uxtb	r3, r3
 8000846:	461a      	mov	r2, r3
 8000848:	4b36      	ldr	r3, [pc, #216]	@ (8000924 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 800084a:	601a      	str	r2, [r3, #0]
			packVS = RxData[2]/100;
 800084c:	4b30      	ldr	r3, [pc, #192]	@ (8000910 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 800084e:	789b      	ldrb	r3, [r3, #2]
 8000850:	4a35      	ldr	r2, [pc, #212]	@ (8000928 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 8000852:	fba2 2303 	umull	r2, r3, r2, r3
 8000856:	095b      	lsrs	r3, r3, #5
 8000858:	b2db      	uxtb	r3, r3
 800085a:	461a      	mov	r2, r3
 800085c:	4b33      	ldr	r3, [pc, #204]	@ (800092c <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 800085e:	601a      	str	r2, [r3, #0]
			packVO = RxData[3]/10;
 8000860:	4b2b      	ldr	r3, [pc, #172]	@ (8000910 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8000862:	78db      	ldrb	r3, [r3, #3]
 8000864:	4a2d      	ldr	r2, [pc, #180]	@ (800091c <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8000866:	fba2 2303 	umull	r2, r3, r2, r3
 800086a:	08db      	lsrs	r3, r3, #3
 800086c:	b2db      	uxtb	r3, r3
 800086e:	461a      	mov	r2, r3
 8000870:	4b2f      	ldr	r3, [pc, #188]	@ (8000930 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000872:	601a      	str	r2, [r3, #0]
			SOC = RxData[4]/2;
 8000874:	4b26      	ldr	r3, [pc, #152]	@ (8000910 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8000876:	791b      	ldrb	r3, [r3, #4]
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	b2db      	uxtb	r3, r3
 800087c:	461a      	mov	r2, r3
 800087e:	4b2d      	ldr	r3, [pc, #180]	@ (8000934 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8000880:	601a      	str	r2, [r3, #0]
			break;
 8000882:	e03b      	b.n	80008fc <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
		case 0x73:
			switch (motorMessage)
 8000884:	4b2c      	ldr	r3, [pc, #176]	@ (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b33      	cmp	r3, #51	@ 0x33
 800088a:	d002      	beq.n	8000892 <HAL_CAN_RxFifo0MsgPendingCallback+0xaa>
 800088c:	2b37      	cmp	r3, #55	@ 0x37
 800088e:	d010      	beq.n	80008b2 <HAL_CAN_RxFifo0MsgPendingCallback+0xca>
 8000890:	e030      	b.n	80008f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
			{
				case 0x33:
					PWM = RxData[0];
 8000892:	4b1f      	ldr	r3, [pc, #124]	@ (8000910 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	461a      	mov	r2, r3
 8000898:	4b28      	ldr	r3, [pc, #160]	@ (800093c <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 800089a:	601a      	str	r2, [r3, #0]
					motorTemp = RxData[2] + 80;
 800089c:	4b1c      	ldr	r3, [pc, #112]	@ (8000910 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 800089e:	789b      	ldrb	r3, [r3, #2]
 80008a0:	3350      	adds	r3, #80	@ 0x50
 80008a2:	4a27      	ldr	r2, [pc, #156]	@ (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 80008a4:	6013      	str	r3, [r2, #0]
					contTemp = RxData[3];
 80008a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 80008a8:	78db      	ldrb	r3, [r3, #3]
 80008aa:	461a      	mov	r2, r3
 80008ac:	4b25      	ldr	r3, [pc, #148]	@ (8000944 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 80008ae:	601a      	str	r2, [r3, #0]
					break;
 80008b0:	e020      	b.n	80008f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
				case 0x37:
					RPM = RxData[0] * 256;
 80008b2:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	021b      	lsls	r3, r3, #8
 80008b8:	4a23      	ldr	r2, [pc, #140]	@ (8000948 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 80008ba:	6013      	str	r3, [r2, #0]
					RPM += RxData[1];
 80008bc:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 80008be:	785b      	ldrb	r3, [r3, #1]
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4413      	add	r3, r2
 80008c8:	4a1f      	ldr	r2, [pc, #124]	@ (8000948 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 80008ca:	6013      	str	r3, [r2, #0]
					/*RPM *= 60;//to per hour
					RPM *= 2 * 3.141592653589 * 18.17;//to inches
					RPM/=12;//to feet
					RPM/=5280;//to miles*/

					RPM *= 0.1081112472;//combined into one step
 80008cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000948 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fef5 	bl	80006c0 <__aeabi_i2d>
 80008d6:	a30c      	add	r3, pc, #48	@ (adr r3, 8000908 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 80008d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008dc:	f7ff fc74 	bl	80001c8 <__aeabi_dmul>
 80008e0:	4602      	mov	r2, r0
 80008e2:	460b      	mov	r3, r1
 80008e4:	4610      	mov	r0, r2
 80008e6:	4619      	mov	r1, r3
 80008e8:	f7ff ff54 	bl	8000794 <__aeabi_d2iz>
 80008ec:	4603      	mov	r3, r0
 80008ee:	4a16      	ldr	r2, [pc, #88]	@ (8000948 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 80008f0:	6013      	str	r3, [r2, #0]
					break;
 80008f2:	bf00      	nop

			}
			motorMessage = 0;
 80008f4:	4b10      	ldr	r3, [pc, #64]	@ (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]

	}
}
 80008fa:	e7ff      	b.n	80008fc <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	f3af 8000 	nop.w
 8000908:	bf0dc3f9 	.word	0xbf0dc3f9
 800090c:	3fbbad2d 	.word	0x3fbbad2d
 8000910:	20000150 	.word	0x20000150
 8000914:	20000134 	.word	0x20000134
 8000918:	2000000c 	.word	0x2000000c
 800091c:	cccccccd 	.word	0xcccccccd
 8000920:	20000010 	.word	0x20000010
 8000924:	20000014 	.word	0x20000014
 8000928:	51eb851f 	.word	0x51eb851f
 800092c:	20000018 	.word	0x20000018
 8000930:	2000001c 	.word	0x2000001c
 8000934:	20000008 	.word	0x20000008
 8000938:	2000017c 	.word	0x2000017c
 800093c:	20000184 	.word	0x20000184
 8000940:	20000188 	.word	0x20000188
 8000944:	2000018c 	.word	0x2000018c
 8000948:	20000190 	.word	0x20000190

0800094c <motorRead>:

void motorRead(int data)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 20 && motorMessage != 0; i++) HAL_Delay(25);
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	e005      	b.n	8000966 <motorRead+0x1a>
 800095a:	2019      	movs	r0, #25
 800095c:	f000 fd78 	bl	8001450 <HAL_Delay>
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	3301      	adds	r3, #1
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	2b13      	cmp	r3, #19
 800096a:	dc03      	bgt.n	8000974 <motorRead+0x28>
 800096c:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <motorRead+0x5c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d1f2      	bne.n	800095a <motorRead+0xe>
	motorMessage = data;
 8000974:	4a0c      	ldr	r2, [pc, #48]	@ (80009a8 <motorRead+0x5c>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]

	TxHeader.DLC = 1;
 800097a:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <motorRead+0x60>)
 800097c:	2201      	movs	r2, #1
 800097e:	611a      	str	r2, [r3, #16]
	TxData[0] = 0x37;
 8000980:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <motorRead+0x64>)
 8000982:	2237      	movs	r2, #55	@ 0x37
 8000984:	701a      	strb	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8000986:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <motorRead+0x60>)
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x6B; // ID
 800098c:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <motorRead+0x60>)
 800098e:	226b      	movs	r2, #107	@ 0x6b
 8000990:	601a      	str	r2, [r3, #0]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000992:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <motorRead+0x68>)
 8000994:	4a06      	ldr	r2, [pc, #24]	@ (80009b0 <motorRead+0x64>)
 8000996:	4905      	ldr	r1, [pc, #20]	@ (80009ac <motorRead+0x60>)
 8000998:	4807      	ldr	r0, [pc, #28]	@ (80009b8 <motorRead+0x6c>)
 800099a:	f000 ff86 	bl	80018aa <HAL_CAN_AddTxMessage>
}
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000017c 	.word	0x2000017c
 80009ac:	2000015c 	.word	0x2000015c
 80009b0:	20000174 	.word	0x20000174
 80009b4:	20000158 	.word	0x20000158
 80009b8:	20000084 	.word	0x20000084

080009bc <delay_us>:
int Cpins[3] = {Clk1_Pin, Clk2_Pin, Clk3_Pin};
GPIO_TypeDef* DGroup[3] = {GPIOB, GPIOB, GPIOA};
GPIO_TypeDef* CGroup[3] = {GPIOB, GPIOB, GPIOB};

void delay_us (int time)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < time; i++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	e00c      	b.n	80009e4 <delay_us+0x28>
	{
		for (int j = 0; j < 6; j++)
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	e003      	b.n	80009d8 <delay_us+0x1c>
		{
			__asm__("nop");
 80009d0:	bf00      	nop
		for (int j = 0; j < 6; j++)
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	3301      	adds	r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	2b05      	cmp	r3, #5
 80009dc:	ddf8      	ble.n	80009d0 <delay_us+0x14>
	for (int i = 0; i < time; i++)
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	3301      	adds	r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	dbee      	blt.n	80009ca <delay_us+0xe>
		}
	}
}
 80009ec:	bf00      	nop
 80009ee:	bf00      	nop
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <data>:

void data(int set, int pin)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(DGroup[pin], Dpins[pin], set);
 8000a06:	4a09      	ldr	r2, [pc, #36]	@ (8000a2c <data+0x30>)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a0e:	4a08      	ldr	r2, [pc, #32]	@ (8000a30 <data+0x34>)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	b2d2      	uxtb	r2, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f001 fe0f 	bl	8002640 <HAL_GPIO_WritePin>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000044 	.word	0x20000044
 8000a30:	2000002c 	.word	0x2000002c

08000a34 <clock>:

void clock(int set, int pin)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(CGroup[pin], Cpins[pin], set);
 8000a3e:	4a09      	ldr	r2, [pc, #36]	@ (8000a64 <clock+0x30>)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a46:	4a08      	ldr	r2, [pc, #32]	@ (8000a68 <clock+0x34>)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	b2d2      	uxtb	r2, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	f001 fdf3 	bl	8002640 <HAL_GPIO_WritePin>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000050 	.word	0x20000050
 8000a68:	20000038 	.word	0x20000038

08000a6c <start>:

void start (int pin)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	clock(1, pin);
 8000a74:	6879      	ldr	r1, [r7, #4]
 8000a76:	2001      	movs	r0, #1
 8000a78:	f7ff ffdc 	bl	8000a34 <clock>
	data(1, pin);
 8000a7c:	6879      	ldr	r1, [r7, #4]
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f7ff ffbc 	bl	80009fc <data>
	delay_us (2);
 8000a84:	2002      	movs	r0, #2
 8000a86:	f7ff ff99 	bl	80009bc <delay_us>
	data(0, pin);
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f7ff ffb5 	bl	80009fc <data>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <stop>:

void stop (int pin)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
	clock(0, pin);
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f7ff ffc5 	bl	8000a34 <clock>
	delay_us (2);
 8000aaa:	2002      	movs	r0, #2
 8000aac:	f7ff ff86 	bl	80009bc <delay_us>
	data(0, pin);
 8000ab0:	6879      	ldr	r1, [r7, #4]
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f7ff ffa2 	bl	80009fc <data>
	delay_us (2);
 8000ab8:	2002      	movs	r0, #2
 8000aba:	f7ff ff7f 	bl	80009bc <delay_us>
	clock(1, pin);
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f7ff ffb7 	bl	8000a34 <clock>
	delay_us (2);
 8000ac6:	2002      	movs	r0, #2
 8000ac8:	f7ff ff78 	bl	80009bc <delay_us>
	data(1, pin);
 8000acc:	6879      	ldr	r1, [r7, #4]
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f7ff ff94 	bl	80009fc <data>
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <ack>:

void ack(int pin)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	clock(0, pin);
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f7ff ffa4 	bl	8000a34 <clock>
	delay_us(5);
 8000aec:	2005      	movs	r0, #5
 8000aee:	f7ff ff65 	bl	80009bc <delay_us>
	clock(1, pin);
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	2001      	movs	r0, #1
 8000af6:	f7ff ff9d 	bl	8000a34 <clock>
	delay_us(2);
 8000afa:	2002      	movs	r0, #2
 8000afc:	f7ff ff5e 	bl	80009bc <delay_us>
	clock(0, pin);
 8000b00:	6879      	ldr	r1, [r7, #4]
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff ff96 	bl	8000a34 <clock>
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <dispByte>:

void dispByte(uint8_t d, int pin)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	6039      	str	r1, [r7, #0]
 8000b1a:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 8; i++)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	e01a      	b.n	8000b58 <dispByte+0x48>
	{
		clock(0, pin);
 8000b22:	6839      	ldr	r1, [r7, #0]
 8000b24:	2000      	movs	r0, #0
 8000b26:	f7ff ff85 	bl	8000a34 <clock>
		data(d%2, pin);
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	6839      	ldr	r1, [r7, #0]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff62 	bl	80009fc <data>
		delay_us(3);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f7ff ff3f 	bl	80009bc <delay_us>
		d = d >> 1;
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	085b      	lsrs	r3, r3, #1
 8000b42:	71fb      	strb	r3, [r7, #7]
		clock(1, pin);
 8000b44:	6839      	ldr	r1, [r7, #0]
 8000b46:	2001      	movs	r0, #1
 8000b48:	f7ff ff74 	bl	8000a34 <clock>
		delay_us(3);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f7ff ff35 	bl	80009bc <delay_us>
	for(int i = 0; i < 8; i++)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3301      	adds	r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2b07      	cmp	r3, #7
 8000b5c:	dde1      	ble.n	8000b22 <dispByte+0x12>
	}
	ack(pin);
 8000b5e:	6838      	ldr	r0, [r7, #0]
 8000b60:	f7ff ffbc 	bl	8000adc <ack>
}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <brightness>:

void brightness(int pin)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	start(pin);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff ff79 	bl	8000a6c <start>
	dispByte(0x8A, pin);
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	208a      	movs	r0, #138	@ 0x8a
 8000b7e:	f7ff ffc7 	bl	8000b10 <dispByte>
	stop(pin);
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff ff89 	bl	8000a9a <stop>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <dispData>:

void dispData(int index, uint8_t* d, int size, int pin)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
 8000b9c:	603b      	str	r3, [r7, #0]
	start(pin);
 8000b9e:	6838      	ldr	r0, [r7, #0]
 8000ba0:	f7ff ff64 	bl	8000a6c <start>
	dispByte(0x40, pin);
 8000ba4:	6839      	ldr	r1, [r7, #0]
 8000ba6:	2040      	movs	r0, #64	@ 0x40
 8000ba8:	f7ff ffb2 	bl	8000b10 <dispByte>
	stop(pin);
 8000bac:	6838      	ldr	r0, [r7, #0]
 8000bae:	f7ff ff74 	bl	8000a9a <stop>

	start(pin);
 8000bb2:	6838      	ldr	r0, [r7, #0]
 8000bb4:	f7ff ff5a 	bl	8000a6c <start>
	dispByte(192 + index, pin);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	3b40      	subs	r3, #64	@ 0x40
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	6839      	ldr	r1, [r7, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ffa4 	bl	8000b10 <dispByte>
	for(int i = 0; i < size; i++) dispByte(d[i], pin);
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	e00a      	b.n	8000be4 <dispData+0x54>
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	68ba      	ldr	r2, [r7, #8]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	6839      	ldr	r1, [r7, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff99 	bl	8000b10 <dispByte>
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	3301      	adds	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697a      	ldr	r2, [r7, #20]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	dbf0      	blt.n	8000bce <dispData+0x3e>
	stop(pin);
 8000bec:	6838      	ldr	r0, [r7, #0]
 8000bee:	f7ff ff54 	bl	8000a9a <stop>
	brightness(pin);
 8000bf2:	6838      	ldr	r0, [r7, #0]
 8000bf4:	f7ff ffba 	bl	8000b6c <brightness>
}
 8000bf8:	bf00      	nop
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <dispNumber>:

void dispNumber(int index, int rIndex, int n, int pin, int size, int colon)
{
 8000c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c04:	b089      	sub	sp, #36	@ 0x24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	466b      	mov	r3, sp
 8000c12:	461e      	mov	r6, r3
	if(size == 0) for(int i = n; i > 0; i/=10) size++;
 8000c14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d110      	bne.n	8000c3c <dispNumber+0x3c>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	61fb      	str	r3, [r7, #28]
 8000c1e:	e00a      	b.n	8000c36 <dispNumber+0x36>
 8000c20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c22:	3301      	adds	r3, #1
 8000c24:	643b      	str	r3, [r7, #64]	@ 0x40
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	4a3e      	ldr	r2, [pc, #248]	@ (8000d24 <dispNumber+0x124>)
 8000c2a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c2e:	1092      	asrs	r2, r2, #2
 8000c30:	17db      	asrs	r3, r3, #31
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	61fb      	str	r3, [r7, #28]
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	dcf1      	bgt.n	8000c20 <dispNumber+0x20>

	uint8_t data[size];
 8000c3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000c3e:	1e4b      	subs	r3, r1, #1
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	460a      	mov	r2, r1
 8000c44:	2300      	movs	r3, #0
 8000c46:	4690      	mov	r8, r2
 8000c48:	4699      	mov	r9, r3
 8000c4a:	f04f 0200 	mov.w	r2, #0
 8000c4e:	f04f 0300 	mov.w	r3, #0
 8000c52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c5e:	460a      	mov	r2, r1
 8000c60:	2300      	movs	r3, #0
 8000c62:	4614      	mov	r4, r2
 8000c64:	461d      	mov	r5, r3
 8000c66:	f04f 0200 	mov.w	r2, #0
 8000c6a:	f04f 0300 	mov.w	r3, #0
 8000c6e:	00eb      	lsls	r3, r5, #3
 8000c70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c74:	00e2      	lsls	r2, r4, #3
 8000c76:	460b      	mov	r3, r1
 8000c78:	3307      	adds	r3, #7
 8000c7a:	08db      	lsrs	r3, r3, #3
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	ebad 0d03 	sub.w	sp, sp, r3
 8000c82:	466b      	mov	r3, sp
 8000c84:	3300      	adds	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
	for(int i = size - 1; i >= 0; i--)
 8000c88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	61bb      	str	r3, [r7, #24]
 8000c8e:	e032      	b.n	8000cf6 <dispNumber+0xf6>
	{
		data[i] = segments[n%10];
 8000c90:	6879      	ldr	r1, [r7, #4]
 8000c92:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <dispNumber+0x124>)
 8000c94:	fb83 2301 	smull	r2, r3, r3, r1
 8000c98:	109a      	asrs	r2, r3, #2
 8000c9a:	17cb      	asrs	r3, r1, #31
 8000c9c:	1ad2      	subs	r2, r2, r3
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4413      	add	r3, r2
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	1aca      	subs	r2, r1, r3
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d28 <dispNumber+0x128>)
 8000caa:	5c99      	ldrb	r1, [r3, r2]
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	460a      	mov	r2, r1
 8000cb4:	701a      	strb	r2, [r3, #0]
		n/=10;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8000d24 <dispNumber+0x124>)
 8000cba:	fb82 1203 	smull	r1, r2, r2, r3
 8000cbe:	1092      	asrs	r2, r2, #2
 8000cc0:	17db      	asrs	r3, r3, #31
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	607b      	str	r3, [r7, #4]
		if(colon != 0 && data[i] < 128) data[i] += 128;
 8000cc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d011      	beq.n	8000cf0 <dispNumber+0xf0>
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b25b      	sxtb	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db0a      	blt.n	8000cf0 <dispNumber+0xf0>
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	4413      	add	r3, r2
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	3b80      	subs	r3, #128	@ 0x80
 8000ce4:	b2d9      	uxtb	r1, r3
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	4413      	add	r3, r2
 8000cec:	460a      	mov	r2, r1
 8000cee:	701a      	strb	r2, [r3, #0]
	for(int i = size - 1; i >= 0; i--)
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	61bb      	str	r3, [r7, #24]
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	dac9      	bge.n	8000c90 <dispNumber+0x90>
	}

	if(rIndex != 0) index -= size - 1;
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d004      	beq.n	8000d0c <dispNumber+0x10c>
 8000d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d04:	3b01      	subs	r3, #1
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	60fb      	str	r3, [r7, #12]

	dispData(index, data, size, pin);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000d10:	6939      	ldr	r1, [r7, #16]
 8000d12:	68f8      	ldr	r0, [r7, #12]
 8000d14:	f7ff ff3c 	bl	8000b90 <dispData>
 8000d18:	46b5      	mov	sp, r6
}
 8000d1a:	bf00      	nop
 8000d1c:	3724      	adds	r7, #36	@ 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d24:	66666667 	.word	0x66666667
 8000d28:	20000020 	.word	0x20000020

08000d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d32:	f000 fb27 	bl	8001384 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d36:	f000 f891 	bl	8000e5c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3a:	f000 f955 	bl	8000fe8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d3e:	f000 f923 	bl	8000f88 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000d42:	f000 f8cd 	bl	8000ee0 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000d46:	483c      	ldr	r0, [pc, #240]	@ (8000e38 <main+0x10c>)
 8000d48:	f000 fd6b 	bl	8001822 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	483a      	ldr	r0, [pc, #232]	@ (8000e38 <main+0x10c>)
 8000d50:	f000 ff9d 	bl	8001c8e <HAL_CAN_ActivateNotification>
  HAL_Delay(30);
 8000d54:	201e      	movs	r0, #30
 8000d56:	f000 fb7b 	bl	8001450 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  motorRead(messages[motorSend]);
 8000d5a:	4b38      	ldr	r3, [pc, #224]	@ (8000e3c <main+0x110>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a38      	ldr	r2, [pc, #224]	@ (8000e40 <main+0x114>)
 8000d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fdf1 	bl	800094c <motorRead>
	  motorSend++;
 8000d6a:	4b34      	ldr	r3, [pc, #208]	@ (8000e3c <main+0x110>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	4a32      	ldr	r2, [pc, #200]	@ (8000e3c <main+0x110>)
 8000d72:	6013      	str	r3, [r2, #0]
	  motorSend %= 2;
 8000d74:	4b31      	ldr	r3, [pc, #196]	@ (8000e3c <main+0x110>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	bfb8      	it	lt
 8000d80:	425b      	neglt	r3, r3
 8000d82:	4a2e      	ldr	r2, [pc, #184]	@ (8000e3c <main+0x110>)
 8000d84:	6013      	str	r3, [r2, #0]

	  dispNumber(3, 1, RPM, 0, 2, 1);
 8000d86:	4b2f      	ldr	r3, [pc, #188]	@ (8000e44 <main+0x118>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	2302      	movs	r3, #2
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	2300      	movs	r3, #0
 8000d94:	2101      	movs	r1, #1
 8000d96:	2003      	movs	r0, #3
 8000d98:	f7ff ff32 	bl	8000c00 <dispNumber>
	  dispNumber(0, 0, SOC, 0, 2, 1);
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e48 <main+0x11c>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	2301      	movs	r3, #1
 8000da2:	9301      	str	r3, [sp, #4]
 8000da4:	2302      	movs	r3, #2
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	2300      	movs	r3, #0
 8000daa:	2100      	movs	r1, #0
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff ff27 	bl	8000c00 <dispNumber>
	  dispNumber(3, 1, motorTemp%100, 1, 2, 1);
 8000db2:	4b26      	ldr	r3, [pc, #152]	@ (8000e4c <main+0x120>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a26      	ldr	r2, [pc, #152]	@ (8000e50 <main+0x124>)
 8000db8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dbc:	1151      	asrs	r1, r2, #5
 8000dbe:	17da      	asrs	r2, r3, #31
 8000dc0:	1a8a      	subs	r2, r1, r2
 8000dc2:	2164      	movs	r1, #100	@ 0x64
 8000dc4:	fb01 f202 	mul.w	r2, r1, r2
 8000dc8:	1a9a      	subs	r2, r3, r2
 8000dca:	2301      	movs	r3, #1
 8000dcc:	9301      	str	r3, [sp, #4]
 8000dce:	2302      	movs	r3, #2
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	2003      	movs	r0, #3
 8000dd8:	f7ff ff12 	bl	8000c00 <dispNumber>
	  dispNumber(0, 0, highTherm%100, 1, 2, 1);
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e54 <main+0x128>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e50 <main+0x124>)
 8000de2:	fb82 1203 	smull	r1, r2, r2, r3
 8000de6:	1151      	asrs	r1, r2, #5
 8000de8:	17da      	asrs	r2, r3, #31
 8000dea:	1a8a      	subs	r2, r1, r2
 8000dec:	2164      	movs	r1, #100	@ 0x64
 8000dee:	fb01 f202 	mul.w	r2, r1, r2
 8000df2:	1a9a      	subs	r2, r3, r2
 8000df4:	2301      	movs	r3, #1
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	2302      	movs	r3, #2
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2000      	movs	r0, #0
 8000e02:	f7ff fefd 	bl	8000c00 <dispNumber>
	  dispNumber(3, 1, ampHours, 2, 2, 0);
 8000e06:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <main+0x12c>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	9301      	str	r3, [sp, #4]
 8000e0e:	2302      	movs	r3, #2
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2302      	movs	r3, #2
 8000e14:	2101      	movs	r1, #1
 8000e16:	2003      	movs	r0, #3
 8000e18:	f7ff fef2 	bl	8000c00 <dispNumber>
	  dispNumber(0, 0, motorSend, 2, 2, 1);
 8000e1c:	4b07      	ldr	r3, [pc, #28]	@ (8000e3c <main+0x110>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	2301      	movs	r3, #1
 8000e22:	9301      	str	r3, [sp, #4]
 8000e24:	2302      	movs	r3, #2
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2302      	movs	r3, #2
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff fee7 	bl	8000c00 <dispNumber>
	  motorRead(messages[motorSend]);
 8000e32:	bf00      	nop
 8000e34:	e791      	b.n	8000d5a <main+0x2e>
 8000e36:	bf00      	nop
 8000e38:	20000084 	.word	0x20000084
 8000e3c:	20000180 	.word	0x20000180
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000190 	.word	0x20000190
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000188 	.word	0x20000188
 8000e50:	51eb851f 	.word	0x51eb851f
 8000e54:	2000000c 	.word	0x2000000c
 8000e58:	20000014 	.word	0x20000014

08000e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b090      	sub	sp, #64	@ 0x40
 8000e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e62:	f107 0318 	add.w	r3, r7, #24
 8000e66:	2228      	movs	r2, #40	@ 0x28
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 f9bf 	bl	80041ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e82:	2301      	movs	r3, #1
 8000e84:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e86:	2310      	movs	r3, #16
 8000e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e92:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e98:	f107 0318 	add.w	r3, r7, #24
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f001 fbe7 	bl	8002670 <HAL_RCC_OscConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000ea8:	f000 f8f4 	bl	8001094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eac:	230f      	movs	r3, #15
 8000eae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ebc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f002 fbe0 	bl	800368c <HAL_RCC_ClockConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000ed2:	f000 f8df 	bl	8001094 <Error_Handler>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	3740      	adds	r7, #64	@ 0x40
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	@ 0x28
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000ee6:	4b26      	ldr	r3, [pc, #152]	@ (8000f80 <MX_CAN_Init+0xa0>)
 8000ee8:	4a26      	ldr	r2, [pc, #152]	@ (8000f84 <MX_CAN_Init+0xa4>)
 8000eea:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000eec:	4b24      	ldr	r3, [pc, #144]	@ (8000f80 <MX_CAN_Init+0xa0>)
 8000eee:	2208      	movs	r2, #8
 8000ef0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000ef2:	4b23      	ldr	r3, [pc, #140]	@ (8000f80 <MX_CAN_Init+0xa0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ef8:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <MX_CAN_Init+0xa0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000efe:	4b20      	ldr	r3, [pc, #128]	@ (8000f80 <MX_CAN_Init+0xa0>)
 8000f00:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f04:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f06:	4b1e      	ldr	r3, [pc, #120]	@ (8000f80 <MX_CAN_Init+0xa0>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <MX_CAN_Init+0xa0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000f12:	4b1b      	ldr	r3, [pc, #108]	@ (8000f80 <MX_CAN_Init+0xa0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000f18:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <MX_CAN_Init+0xa0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000f1e:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <MX_CAN_Init+0xa0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000f24:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <MX_CAN_Init+0xa0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000f2a:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <MX_CAN_Init+0xa0>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000f30:	4813      	ldr	r0, [pc, #76]	@ (8000f80 <MX_CAN_Init+0xa0>)
 8000f32:	f000 fab1 	bl	8001498 <HAL_CAN_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000f3c:	f000 f8aa 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

   canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000f40:	2301      	movs	r3, #1
 8000f42:	623b      	str	r3, [r7, #32]
   canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8000f44:	230a      	movs	r3, #10
 8000f46:	617b      	str	r3, [r7, #20]
   canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
   canfilterconfig.FilterIdHigh = 0b10000<<5;
 8000f4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f50:	603b      	str	r3, [r7, #0]
   canfilterconfig.FilterIdLow = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
   canfilterconfig.FilterMaskIdHigh = 0b10000<<5;
 8000f56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f5a:	60bb      	str	r3, [r7, #8]
   canfilterconfig.FilterMaskIdLow = 0x0000;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
   canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61bb      	str	r3, [r7, #24]
   canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f64:	2301      	movs	r3, #1
 8000f66:	61fb      	str	r3, [r7, #28]
   canfilterconfig.SlaveStartFilterBank = 0;  // how many filters to assign to the CAN1 (master can)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24

   HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4803      	ldr	r0, [pc, #12]	@ (8000f80 <MX_CAN_Init+0xa0>)
 8000f72:	f000 fb8c 	bl	800168e <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	@ 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000084 	.word	0x20000084
 8000f84:	40006400 	.word	0x40006400

08000f88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000f8e:	4a15      	ldr	r2, [pc, #84]	@ (8000fe4 <MX_USART2_UART_Init+0x5c>)
 8000f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000f92:	4b13      	ldr	r3, [pc, #76]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000f94:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fcc:	f002 fd70 	bl	8003ab0 <HAL_UART_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fd6:	f000 f85d 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200000ac 	.word	0x200000ac
 8000fe4:	40004400 	.word	0x40004400

08000fe8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b23      	ldr	r3, [pc, #140]	@ (800108c <MX_GPIO_Init+0xa4>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a22      	ldr	r2, [pc, #136]	@ (800108c <MX_GPIO_Init+0xa4>)
 8001004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001008:	6153      	str	r3, [r2, #20]
 800100a:	4b20      	ldr	r3, [pc, #128]	@ (800108c <MX_GPIO_Init+0xa4>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <MX_GPIO_Init+0xa4>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	4a1c      	ldr	r2, [pc, #112]	@ (800108c <MX_GPIO_Init+0xa4>)
 800101c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001020:	6153      	str	r3, [r2, #20]
 8001022:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <MX_GPIO_Init+0xa4>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIO1_Pin|Clk2_Pin|Clk3_Pin|DIO2_Pin
 800102e:	2200      	movs	r2, #0
 8001030:	21e3      	movs	r1, #227	@ 0xe3
 8001032:	4817      	ldr	r0, [pc, #92]	@ (8001090 <MX_GPIO_Init+0xa8>)
 8001034:	f001 fb04 	bl	8002640 <HAL_GPIO_WritePin>
                          |Clk1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIO3_GPIO_Port, DIO3_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800103e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001042:	f001 fafd 	bl	8002640 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIO1_Pin Clk2_Pin Clk3_Pin DIO2_Pin
                           Clk1_Pin */
  GPIO_InitStruct.Pin = DIO1_Pin|Clk2_Pin|Clk3_Pin|DIO2_Pin
 8001046:	23e3      	movs	r3, #227	@ 0xe3
 8001048:	60fb      	str	r3, [r7, #12]
                          |Clk1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	2301      	movs	r3, #1
 800104c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	4619      	mov	r1, r3
 800105c:	480c      	ldr	r0, [pc, #48]	@ (8001090 <MX_GPIO_Init+0xa8>)
 800105e:	f001 f97d 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO3_Pin */
  GPIO_InitStruct.Pin = DIO3_Pin;
 8001062:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001066:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	2301      	movs	r3, #1
 800106a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO3_GPIO_Port, &GPIO_InitStruct);
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4619      	mov	r1, r3
 800107a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800107e:	f001 f96d 	bl	800235c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001082:	bf00      	nop
 8001084:	3720      	adds	r7, #32
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000
 8001090:	48000400 	.word	0x48000400

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <Error_Handler+0x8>

080010a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <HAL_MspInit+0x44>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	4a0e      	ldr	r2, [pc, #56]	@ (80010e4 <HAL_MspInit+0x44>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6193      	str	r3, [r2, #24]
 80010b2:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <HAL_MspInit+0x44>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <HAL_MspInit+0x44>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	4a08      	ldr	r2, [pc, #32]	@ (80010e4 <HAL_MspInit+0x44>)
 80010c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c8:	61d3      	str	r3, [r2, #28]
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_MspInit+0x44>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000

080010e8 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	@ 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a31      	ldr	r2, [pc, #196]	@ (80011cc <HAL_CAN_MspInit+0xe4>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d15b      	bne.n	80011c2 <HAL_CAN_MspInit+0xda>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800110a:	4b31      	ldr	r3, [pc, #196]	@ (80011d0 <HAL_CAN_MspInit+0xe8>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	4a30      	ldr	r2, [pc, #192]	@ (80011d0 <HAL_CAN_MspInit+0xe8>)
 8001110:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001114:	61d3      	str	r3, [r2, #28]
 8001116:	4b2e      	ldr	r3, [pc, #184]	@ (80011d0 <HAL_CAN_MspInit+0xe8>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b2b      	ldr	r3, [pc, #172]	@ (80011d0 <HAL_CAN_MspInit+0xe8>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	4a2a      	ldr	r2, [pc, #168]	@ (80011d0 <HAL_CAN_MspInit+0xe8>)
 8001128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800112c:	6153      	str	r3, [r2, #20]
 800112e:	4b28      	ldr	r3, [pc, #160]	@ (80011d0 <HAL_CAN_MspInit+0xe8>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800113a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800113e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001144:	2301      	movs	r3, #1
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800114c:	2309      	movs	r3, #9
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800115a:	f001 f8ff 	bl	800235c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800115e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001170:	2309      	movs	r3, #9
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800117e:	f001 f8ed 	bl	800235c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2013      	movs	r0, #19
 8001188:	f001 f8b1 	bl	80022ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 800118c:	2013      	movs	r0, #19
 800118e:	f001 f8ca 	bl	8002326 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	2014      	movs	r0, #20
 8001198:	f001 f8a9 	bl	80022ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 800119c:	2014      	movs	r0, #20
 800119e:	f001 f8c2 	bl	8002326 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	2015      	movs	r0, #21
 80011a8:	f001 f8a1 	bl	80022ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 80011ac:	2015      	movs	r0, #21
 80011ae:	f001 f8ba 	bl	8002326 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	2016      	movs	r0, #22
 80011b8:	f001 f899 	bl	80022ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 80011bc:	2016      	movs	r0, #22
 80011be:	f001 f8b2 	bl	8002326 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 80011c2:	bf00      	nop
 80011c4:	3728      	adds	r7, #40	@ 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40006400 	.word	0x40006400
 80011d0:	40021000 	.word	0x40021000

080011d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	@ 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a18      	ldr	r2, [pc, #96]	@ (8001254 <HAL_UART_MspInit+0x80>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d129      	bne.n	800124a <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011f6:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <HAL_UART_MspInit+0x84>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	4a17      	ldr	r2, [pc, #92]	@ (8001258 <HAL_UART_MspInit+0x84>)
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001200:	61d3      	str	r3, [r2, #28]
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <HAL_UART_MspInit+0x84>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_UART_MspInit+0x84>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	4a11      	ldr	r2, [pc, #68]	@ (8001258 <HAL_UART_MspInit+0x84>)
 8001214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001218:	6153      	str	r3, [r2, #20]
 800121a:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <HAL_UART_MspInit+0x84>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001226:	f248 0304 	movw	r3, #32772	@ 0x8004
 800122a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001238:	2307      	movs	r3, #7
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001246:	f001 f889 	bl	800235c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800124a:	bf00      	nop
 800124c:	3728      	adds	r7, #40	@ 0x28
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40004400 	.word	0x40004400
 8001258:	40021000 	.word	0x40021000

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <NMI_Handler+0x4>

08001264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <MemManage_Handler+0x4>

08001274 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <UsageFault_Handler+0x4>

08001284 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b2:	f000 f8ad 	bl	8001410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80012c0:	4802      	ldr	r0, [pc, #8]	@ (80012cc <CAN_TX_IRQHandler+0x10>)
 80012c2:	f000 fd0a 	bl	8001cda <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000084 	.word	0x20000084

080012d0 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80012d4:	4802      	ldr	r0, [pc, #8]	@ (80012e0 <CAN_RX0_IRQHandler+0x10>)
 80012d6:	f000 fd00 	bl	8001cda <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000084 	.word	0x20000084

080012e4 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80012e8:	4802      	ldr	r0, [pc, #8]	@ (80012f4 <CAN_RX1_IRQHandler+0x10>)
 80012ea:	f000 fcf6 	bl	8001cda <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000084 	.word	0x20000084

080012f8 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <CAN_SCE_IRQHandler+0x10>)
 80012fe:	f000 fcec 	bl	8001cda <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000084 	.word	0x20000084

0800130c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <SystemInit+0x20>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001316:	4a05      	ldr	r2, [pc, #20]	@ (800132c <SystemInit+0x20>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001368 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001334:	f7ff ffea 	bl	800130c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001338:	480c      	ldr	r0, [pc, #48]	@ (800136c <LoopForever+0x6>)
  ldr r1, =_edata
 800133a:	490d      	ldr	r1, [pc, #52]	@ (8001370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800133c:	4a0d      	ldr	r2, [pc, #52]	@ (8001374 <LoopForever+0xe>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134e:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001350:	4c0a      	ldr	r4, [pc, #40]	@ (800137c <LoopForever+0x16>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800135e:	f002 ff4f 	bl	8004200 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001362:	f7ff fce3 	bl	8000d2c <main>

08001366 <LoopForever>:

LoopForever:
    b LoopForever
 8001366:	e7fe      	b.n	8001366 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001368:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001370:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001374:	080042a0 	.word	0x080042a0
  ldr r2, =_sbss
 8001378:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800137c:	20000198 	.word	0x20000198

08001380 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC1_2_IRQHandler>
	...

08001384 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001388:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <HAL_Init+0x28>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a07      	ldr	r2, [pc, #28]	@ (80013ac <HAL_Init+0x28>)
 800138e:	f043 0310 	orr.w	r3, r3, #16
 8001392:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001394:	2003      	movs	r0, #3
 8001396:	f000 ff9f 	bl	80022d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800139a:	2000      	movs	r0, #0
 800139c:	f000 f808 	bl	80013b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a0:	f7ff fe7e 	bl	80010a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40022000 	.word	0x40022000

080013b0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b8:	4b12      	ldr	r3, [pc, #72]	@ (8001404 <HAL_InitTick+0x54>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <HAL_InitTick+0x58>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 ffb7 	bl	8002342 <HAL_SYSTICK_Config>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e00e      	b.n	80013fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b0f      	cmp	r3, #15
 80013e2:	d80a      	bhi.n	80013fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e4:	2200      	movs	r2, #0
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f000 ff7f 	bl	80022ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f0:	4a06      	ldr	r2, [pc, #24]	@ (800140c <HAL_InitTick+0x5c>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e000      	b.n	80013fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2000005c 	.word	0x2000005c
 8001408:	20000064 	.word	0x20000064
 800140c:	20000060 	.word	0x20000060

08001410 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <HAL_IncTick+0x20>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <HAL_IncTick+0x24>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4413      	add	r3, r2
 8001420:	4a04      	ldr	r2, [pc, #16]	@ (8001434 <HAL_IncTick+0x24>)
 8001422:	6013      	str	r3, [r2, #0]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000064 	.word	0x20000064
 8001434:	20000194 	.word	0x20000194

08001438 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return uwTick;  
 800143c:	4b03      	ldr	r3, [pc, #12]	@ (800144c <HAL_GetTick+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000194 	.word	0x20000194

08001450 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001458:	f7ff ffee 	bl	8001438 <HAL_GetTick>
 800145c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001468:	d005      	beq.n	8001476 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146a:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <HAL_Delay+0x44>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001476:	bf00      	nop
 8001478:	f7ff ffde 	bl	8001438 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	429a      	cmp	r2, r3
 8001486:	d8f7      	bhi.n	8001478 <HAL_Delay+0x28>
  {
  }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000064 	.word	0x20000064

08001498 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e0ed      	b.n	8001686 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff fe16 	bl	80010e8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0201 	orr.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014cc:	f7ff ffb4 	bl	8001438 <HAL_GetTick>
 80014d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014d2:	e012      	b.n	80014fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014d4:	f7ff ffb0 	bl	8001438 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b0a      	cmp	r3, #10
 80014e0:	d90b      	bls.n	80014fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2205      	movs	r2, #5
 80014f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e0c5      	b.n	8001686 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0e5      	beq.n	80014d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0202 	bic.w	r2, r2, #2
 8001516:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001518:	f7ff ff8e 	bl	8001438 <HAL_GetTick>
 800151c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800151e:	e012      	b.n	8001546 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001520:	f7ff ff8a 	bl	8001438 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b0a      	cmp	r3, #10
 800152c:	d90b      	bls.n	8001546 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001532:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2205      	movs	r2, #5
 800153e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e09f      	b.n	8001686 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1e5      	bne.n	8001520 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7e1b      	ldrb	r3, [r3, #24]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d108      	bne.n	800156e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	e007      	b.n	800157e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800157c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7e5b      	ldrb	r3, [r3, #25]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d108      	bne.n	8001598 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	e007      	b.n	80015a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	7e9b      	ldrb	r3, [r3, #26]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d108      	bne.n	80015c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0220 	orr.w	r2, r2, #32
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	e007      	b.n	80015d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0220 	bic.w	r2, r2, #32
 80015d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	7edb      	ldrb	r3, [r3, #27]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d108      	bne.n	80015ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0210 	bic.w	r2, r2, #16
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	e007      	b.n	80015fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0210 	orr.w	r2, r2, #16
 80015fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7f1b      	ldrb	r3, [r3, #28]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d108      	bne.n	8001616 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0208 	orr.w	r2, r2, #8
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	e007      	b.n	8001626 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0208 	bic.w	r2, r2, #8
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	7f5b      	ldrb	r3, [r3, #29]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d108      	bne.n	8001640 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f042 0204 	orr.w	r2, r2, #4
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	e007      	b.n	8001650 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0204 	bic.w	r2, r2, #4
 800164e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	ea42 0103 	orr.w	r1, r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	1e5a      	subs	r2, r3, #1
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800168e:	b480      	push	{r7}
 8001690:	b087      	sub	sp, #28
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80016a6:	7cfb      	ldrb	r3, [r7, #19]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d003      	beq.n	80016b4 <HAL_CAN_ConfigFilter+0x26>
 80016ac:	7cfb      	ldrb	r3, [r7, #19]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	f040 80aa 	bne.w	8001808 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80016ba:	f043 0201 	orr.w	r2, r3, #1
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	2201      	movs	r2, #1
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	43db      	mvns	r3, r3
 80016de:	401a      	ands	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d123      	bne.n	8001736 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	401a      	ands	r2, r3
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001710:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3248      	adds	r2, #72	@ 0x48
 8001716:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800172a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800172c:	6979      	ldr	r1, [r7, #20]
 800172e:	3348      	adds	r3, #72	@ 0x48
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	440b      	add	r3, r1
 8001734:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d122      	bne.n	8001784 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	431a      	orrs	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800175e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3248      	adds	r2, #72	@ 0x48
 8001764:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001778:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800177a:	6979      	ldr	r1, [r7, #20]
 800177c:	3348      	adds	r3, #72	@ 0x48
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	440b      	add	r3, r1
 8001782:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d109      	bne.n	80017a0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	43db      	mvns	r3, r3
 8001796:	401a      	ands	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800179e:	e007      	b.n	80017b0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	431a      	orrs	r2, r3
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d109      	bne.n	80017cc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80017ca:	e007      	b.n	80017dc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	431a      	orrs	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d107      	bne.n	80017f4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	431a      	orrs	r2, r3
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017fa:	f023 0201 	bic.w	r2, r3, #1
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	e006      	b.n	8001816 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
  }
}
 8001816:	4618      	mov	r0, r3
 8001818:	371c      	adds	r7, #28
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b084      	sub	sp, #16
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b01      	cmp	r3, #1
 8001834:	d12e      	bne.n	8001894 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2202      	movs	r2, #2
 800183a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0201 	bic.w	r2, r2, #1
 800184c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800184e:	f7ff fdf3 	bl	8001438 <HAL_GetTick>
 8001852:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001854:	e012      	b.n	800187c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001856:	f7ff fdef 	bl	8001438 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b0a      	cmp	r3, #10
 8001862:	d90b      	bls.n	800187c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001868:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2205      	movs	r2, #5
 8001874:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e012      	b.n	80018a2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1e5      	bne.n	8001856 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	e006      	b.n	80018a2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001898:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
  }
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b089      	sub	sp, #36	@ 0x24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
 80018b6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018be:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80018c8:	7ffb      	ldrb	r3, [r7, #31]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d003      	beq.n	80018d6 <HAL_CAN_AddTxMessage+0x2c>
 80018ce:	7ffb      	ldrb	r3, [r7, #31]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	f040 80ad 	bne.w	8001a30 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10a      	bne.n	80018f6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d105      	bne.n	80018f6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 8095 	beq.w	8001a20 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	0e1b      	lsrs	r3, r3, #24
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001900:	2201      	movs	r2, #1
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	409a      	lsls	r2, r3
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10d      	bne.n	800192e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800191c:	68f9      	ldr	r1, [r7, #12]
 800191e:	6809      	ldr	r1, [r1, #0]
 8001920:	431a      	orrs	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3318      	adds	r3, #24
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	440b      	add	r3, r1
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	e00f      	b.n	800194e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001938:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800193e:	68f9      	ldr	r1, [r7, #12]
 8001940:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001942:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	3318      	adds	r3, #24
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	440b      	add	r3, r1
 800194c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6819      	ldr	r1, [r3, #0]
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	691a      	ldr	r2, [r3, #16]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3318      	adds	r3, #24
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	440b      	add	r3, r1
 800195e:	3304      	adds	r3, #4
 8001960:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	7d1b      	ldrb	r3, [r3, #20]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d111      	bne.n	800198e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3318      	adds	r3, #24
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	4413      	add	r3, r2
 8001976:	3304      	adds	r3, #4
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	6811      	ldr	r1, [r2, #0]
 800197e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3318      	adds	r3, #24
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	440b      	add	r3, r1
 800198a:	3304      	adds	r3, #4
 800198c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3307      	adds	r3, #7
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	061a      	lsls	r2, r3, #24
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3306      	adds	r3, #6
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	041b      	lsls	r3, r3, #16
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3305      	adds	r3, #5
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	4313      	orrs	r3, r2
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	3204      	adds	r2, #4
 80019ae:	7812      	ldrb	r2, [r2, #0]
 80019b0:	4610      	mov	r0, r2
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	6811      	ldr	r1, [r2, #0]
 80019b6:	ea43 0200 	orr.w	r2, r3, r0
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	440b      	add	r3, r1
 80019c0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80019c4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3303      	adds	r3, #3
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	061a      	lsls	r2, r3, #24
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3302      	adds	r3, #2
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	041b      	lsls	r3, r3, #16
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3301      	adds	r3, #1
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	4313      	orrs	r3, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	7812      	ldrb	r2, [r2, #0]
 80019e6:	4610      	mov	r0, r2
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	6811      	ldr	r1, [r2, #0]
 80019ec:	ea43 0200 	orr.w	r2, r3, r0
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	440b      	add	r3, r1
 80019f6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80019fa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3318      	adds	r3, #24
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	4413      	add	r3, r2
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	6811      	ldr	r1, [r2, #0]
 8001a0e:	f043 0201 	orr.w	r2, r3, #1
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3318      	adds	r3, #24
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	440b      	add	r3, r1
 8001a1a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	e00e      	b.n	8001a3e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a24:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e006      	b.n	8001a3e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a34:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
  }
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3724      	adds	r7, #36	@ 0x24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b087      	sub	sp, #28
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a60:	7dfb      	ldrb	r3, [r7, #23]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d003      	beq.n	8001a6e <HAL_CAN_GetRxMessage+0x24>
 8001a66:	7dfb      	ldrb	r3, [r7, #23]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	f040 8103 	bne.w	8001c74 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10e      	bne.n	8001a92 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d116      	bne.n	8001ab0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a86:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e0f7      	b.n	8001c82 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d107      	bne.n	8001ab0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0e8      	b.n	8001c82 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	331b      	adds	r3, #27
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	4413      	add	r3, r2
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0204 	and.w	r2, r3, #4
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10c      	bne.n	8001ae8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	331b      	adds	r3, #27
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	4413      	add	r3, r2
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	0d5b      	lsrs	r3, r3, #21
 8001ade:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	e00b      	b.n	8001b00 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	331b      	adds	r3, #27
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	4413      	add	r3, r2
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	08db      	lsrs	r3, r3, #3
 8001af8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	331b      	adds	r3, #27
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	4413      	add	r3, r2
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0202 	and.w	r2, r3, #2
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	331b      	adds	r3, #27
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	4413      	add	r3, r2
 8001b22:	3304      	adds	r3, #4
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2208      	movs	r2, #8
 8001b32:	611a      	str	r2, [r3, #16]
 8001b34:	e00b      	b.n	8001b4e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	331b      	adds	r3, #27
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	4413      	add	r3, r2
 8001b42:	3304      	adds	r3, #4
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 020f 	and.w	r2, r3, #15
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	331b      	adds	r3, #27
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	4413      	add	r3, r2
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	0a1b      	lsrs	r3, r3, #8
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	331b      	adds	r3, #27
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	4413      	add	r3, r2
 8001b72:	3304      	adds	r3, #4
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	0c1b      	lsrs	r3, r3, #16
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	4413      	add	r3, r2
 8001b88:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	0a1a      	lsrs	r2, r3, #8
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	0c1a      	lsrs	r2, r3, #16
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0e1a      	lsrs	r2, r3, #24
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	3303      	adds	r3, #3
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	011b      	lsls	r3, r3, #4
 8001bea:	4413      	add	r3, r2
 8001bec:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	011b      	lsls	r3, r3, #4
 8001c02:	4413      	add	r3, r2
 8001c04:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	0a1a      	lsrs	r2, r3, #8
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	3305      	adds	r3, #5
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	0c1a      	lsrs	r2, r3, #16
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	3306      	adds	r3, #6
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	4413      	add	r3, r2
 8001c38:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	0e1a      	lsrs	r2, r3, #24
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	3307      	adds	r3, #7
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d108      	bne.n	8001c60 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f042 0220 	orr.w	r2, r2, #32
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	e007      	b.n	8001c70 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0220 	orr.w	r2, r2, #32
 8001c6e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	e006      	b.n	8001c82 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c78:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
  }
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	371c      	adds	r7, #28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b085      	sub	sp, #20
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c9e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d002      	beq.n	8001cac <HAL_CAN_ActivateNotification+0x1e>
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d109      	bne.n	8001cc0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6959      	ldr	r1, [r3, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	e006      	b.n	8001cce <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
  }
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b08a      	sub	sp, #40	@ 0x28
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d07c      	beq.n	8001e1a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d023      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f983 	bl	8002048 <HAL_CAN_TxMailbox0CompleteCallback>
 8001d42:	e016      	b.n	8001d72 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d004      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d56:	e00c      	b.n	8001d72 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d004      	beq.n	8001d6c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d6a:	e002      	b.n	8001d72 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f989 	bl	8002084 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d024      	beq.n	8001dc6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d84:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f963 	bl	800205c <HAL_CAN_TxMailbox1CompleteCallback>
 8001d96:	e016      	b.n	8001dc6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d004      	beq.n	8001dac <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001daa:	e00c      	b.n	8001dc6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d004      	beq.n	8001dc0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dbe:	e002      	b.n	8001dc6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f969 	bl	8002098 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d024      	beq.n	8001e1a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001dd8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f943 	bl	8002070 <HAL_CAN_TxMailbox2CompleteCallback>
 8001dea:	e016      	b.n	8001e1a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d004      	beq.n	8001e00 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dfe:	e00c      	b.n	8001e1a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d004      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e12:	e002      	b.n	8001e1a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f949 	bl	80020ac <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00c      	beq.n	8001e3e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d007      	beq.n	8001e3e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e34:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2210      	movs	r2, #16
 8001e3c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00b      	beq.n	8001e60 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d006      	beq.n	8001e60 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2208      	movs	r2, #8
 8001e58:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f930 	bl	80020c0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d009      	beq.n	8001e7e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7fe fcb5 	bl	80007e8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00c      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d007      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e94:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e98:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2210      	movs	r2, #16
 8001ea0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	f003 0320 	and.w	r3, r3, #32
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00b      	beq.n	8001ec4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d006      	beq.n	8001ec4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2208      	movs	r2, #8
 8001ebc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f912 	bl	80020e8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d009      	beq.n	8001ee2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f8f9 	bl	80020d4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00b      	beq.n	8001f04 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d006      	beq.n	8001f04 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2210      	movs	r2, #16
 8001efc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f8fc 	bl	80020fc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00b      	beq.n	8001f26 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d006      	beq.n	8001f26 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f8f5 	bl	8002110 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d07b      	beq.n	8002028 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d072      	beq.n	8002020 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d008      	beq.n	8001f56 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d008      	beq.n	8001f8e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	f043 0304 	orr.w	r3, r3, #4
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d043      	beq.n	8002020 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d03e      	beq.n	8002020 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fa8:	2b60      	cmp	r3, #96	@ 0x60
 8001faa:	d02b      	beq.n	8002004 <HAL_CAN_IRQHandler+0x32a>
 8001fac:	2b60      	cmp	r3, #96	@ 0x60
 8001fae:	d82e      	bhi.n	800200e <HAL_CAN_IRQHandler+0x334>
 8001fb0:	2b50      	cmp	r3, #80	@ 0x50
 8001fb2:	d022      	beq.n	8001ffa <HAL_CAN_IRQHandler+0x320>
 8001fb4:	2b50      	cmp	r3, #80	@ 0x50
 8001fb6:	d82a      	bhi.n	800200e <HAL_CAN_IRQHandler+0x334>
 8001fb8:	2b40      	cmp	r3, #64	@ 0x40
 8001fba:	d019      	beq.n	8001ff0 <HAL_CAN_IRQHandler+0x316>
 8001fbc:	2b40      	cmp	r3, #64	@ 0x40
 8001fbe:	d826      	bhi.n	800200e <HAL_CAN_IRQHandler+0x334>
 8001fc0:	2b30      	cmp	r3, #48	@ 0x30
 8001fc2:	d010      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0x30c>
 8001fc4:	2b30      	cmp	r3, #48	@ 0x30
 8001fc6:	d822      	bhi.n	800200e <HAL_CAN_IRQHandler+0x334>
 8001fc8:	2b10      	cmp	r3, #16
 8001fca:	d002      	beq.n	8001fd2 <HAL_CAN_IRQHandler+0x2f8>
 8001fcc:	2b20      	cmp	r3, #32
 8001fce:	d005      	beq.n	8001fdc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001fd0:	e01d      	b.n	800200e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	f043 0308 	orr.w	r3, r3, #8
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fda:	e019      	b.n	8002010 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	f043 0310 	orr.w	r3, r3, #16
 8001fe2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fe4:	e014      	b.n	8002010 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe8:	f043 0320 	orr.w	r3, r3, #32
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fee:	e00f      	b.n	8002010 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ff6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ff8:	e00a      	b.n	8002010 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002000:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002002:	e005      	b.n	8002010 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800200c:	e000      	b.n	8002010 <HAL_CAN_IRQHandler+0x336>
            break;
 800200e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699a      	ldr	r2, [r3, #24]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800201e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2204      	movs	r2, #4
 8002026:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f872 	bl	8002124 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002040:	bf00      	nop
 8002042:	3728      	adds	r7, #40	@ 0x28
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002148:	4b0c      	ldr	r3, [pc, #48]	@ (800217c <__NVIC_SetPriorityGrouping+0x44>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002154:	4013      	ands	r3, r2
 8002156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002160:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002164:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800216a:	4a04      	ldr	r2, [pc, #16]	@ (800217c <__NVIC_SetPriorityGrouping+0x44>)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	60d3      	str	r3, [r2, #12]
}
 8002170:	bf00      	nop
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002184:	4b04      	ldr	r3, [pc, #16]	@ (8002198 <__NVIC_GetPriorityGrouping+0x18>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	0a1b      	lsrs	r3, r3, #8
 800218a:	f003 0307 	and.w	r3, r3, #7
}
 800218e:	4618      	mov	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	db0b      	blt.n	80021c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	f003 021f 	and.w	r2, r3, #31
 80021b4:	4907      	ldr	r1, [pc, #28]	@ (80021d4 <__NVIC_EnableIRQ+0x38>)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	095b      	lsrs	r3, r3, #5
 80021bc:	2001      	movs	r0, #1
 80021be:	fa00 f202 	lsl.w	r2, r0, r2
 80021c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000e100 	.word	0xe000e100

080021d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	6039      	str	r1, [r7, #0]
 80021e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	db0a      	blt.n	8002202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	490c      	ldr	r1, [pc, #48]	@ (8002224 <__NVIC_SetPriority+0x4c>)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	0112      	lsls	r2, r2, #4
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	440b      	add	r3, r1
 80021fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002200:	e00a      	b.n	8002218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4908      	ldr	r1, [pc, #32]	@ (8002228 <__NVIC_SetPriority+0x50>)
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	3b04      	subs	r3, #4
 8002210:	0112      	lsls	r2, r2, #4
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	440b      	add	r3, r1
 8002216:	761a      	strb	r2, [r3, #24]
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000e100 	.word	0xe000e100
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800222c:	b480      	push	{r7}
 800222e:	b089      	sub	sp, #36	@ 0x24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f1c3 0307 	rsb	r3, r3, #7
 8002246:	2b04      	cmp	r3, #4
 8002248:	bf28      	it	cs
 800224a:	2304      	movcs	r3, #4
 800224c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3304      	adds	r3, #4
 8002252:	2b06      	cmp	r3, #6
 8002254:	d902      	bls.n	800225c <NVIC_EncodePriority+0x30>
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3b03      	subs	r3, #3
 800225a:	e000      	b.n	800225e <NVIC_EncodePriority+0x32>
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002260:	f04f 32ff 	mov.w	r2, #4294967295
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43da      	mvns	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	401a      	ands	r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002274:	f04f 31ff 	mov.w	r1, #4294967295
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	fa01 f303 	lsl.w	r3, r1, r3
 800227e:	43d9      	mvns	r1, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002284:	4313      	orrs	r3, r2
         );
}
 8002286:	4618      	mov	r0, r3
 8002288:	3724      	adds	r7, #36	@ 0x24
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3b01      	subs	r3, #1
 80022a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022a4:	d301      	bcc.n	80022aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022a6:	2301      	movs	r3, #1
 80022a8:	e00f      	b.n	80022ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022aa:	4a0a      	ldr	r2, [pc, #40]	@ (80022d4 <SysTick_Config+0x40>)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022b2:	210f      	movs	r1, #15
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295
 80022b8:	f7ff ff8e 	bl	80021d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022bc:	4b05      	ldr	r3, [pc, #20]	@ (80022d4 <SysTick_Config+0x40>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022c2:	4b04      	ldr	r3, [pc, #16]	@ (80022d4 <SysTick_Config+0x40>)
 80022c4:	2207      	movs	r2, #7
 80022c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	e000e010 	.word	0xe000e010

080022d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7ff ff29 	bl	8002138 <__NVIC_SetPriorityGrouping>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b086      	sub	sp, #24
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	4603      	mov	r3, r0
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002300:	f7ff ff3e 	bl	8002180 <__NVIC_GetPriorityGrouping>
 8002304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	6978      	ldr	r0, [r7, #20]
 800230c:	f7ff ff8e 	bl	800222c <NVIC_EncodePriority>
 8002310:	4602      	mov	r2, r0
 8002312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff5d 	bl	80021d8 <__NVIC_SetPriority>
}
 800231e:	bf00      	nop
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	4603      	mov	r3, r0
 800232e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff31 	bl	800219c <__NVIC_EnableIRQ>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff ffa2 	bl	8002294 <SysTick_Config>
 8002350:	4603      	mov	r3, r0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800236a:	e14e      	b.n	800260a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	2101      	movs	r1, #1
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	fa01 f303 	lsl.w	r3, r1, r3
 8002378:	4013      	ands	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 8140 	beq.w	8002604 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b01      	cmp	r3, #1
 800238e:	d005      	beq.n	800239c <HAL_GPIO_Init+0x40>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d130      	bne.n	80023fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	2203      	movs	r2, #3
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4013      	ands	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d2:	2201      	movs	r2, #1
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4013      	ands	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	091b      	lsrs	r3, r3, #4
 80023e8:	f003 0201 	and.w	r2, r3, #1
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b03      	cmp	r3, #3
 8002408:	d017      	beq.n	800243a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	2203      	movs	r2, #3
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d123      	bne.n	800248e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	08da      	lsrs	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3208      	adds	r2, #8
 800244e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002452:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	220f      	movs	r2, #15
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	691a      	ldr	r2, [r3, #16]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	08da      	lsrs	r2, r3, #3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3208      	adds	r2, #8
 8002488:	6939      	ldr	r1, [r7, #16]
 800248a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	2203      	movs	r2, #3
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4013      	ands	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 0203 	and.w	r2, r3, #3
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 809a 	beq.w	8002604 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d0:	4b55      	ldr	r3, [pc, #340]	@ (8002628 <HAL_GPIO_Init+0x2cc>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	4a54      	ldr	r2, [pc, #336]	@ (8002628 <HAL_GPIO_Init+0x2cc>)
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	6193      	str	r3, [r2, #24]
 80024dc:	4b52      	ldr	r3, [pc, #328]	@ (8002628 <HAL_GPIO_Init+0x2cc>)
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024e8:	4a50      	ldr	r2, [pc, #320]	@ (800262c <HAL_GPIO_Init+0x2d0>)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	089b      	lsrs	r3, r3, #2
 80024ee:	3302      	adds	r3, #2
 80024f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	220f      	movs	r2, #15
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002512:	d013      	beq.n	800253c <HAL_GPIO_Init+0x1e0>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a46      	ldr	r2, [pc, #280]	@ (8002630 <HAL_GPIO_Init+0x2d4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d00d      	beq.n	8002538 <HAL_GPIO_Init+0x1dc>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a45      	ldr	r2, [pc, #276]	@ (8002634 <HAL_GPIO_Init+0x2d8>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d007      	beq.n	8002534 <HAL_GPIO_Init+0x1d8>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a44      	ldr	r2, [pc, #272]	@ (8002638 <HAL_GPIO_Init+0x2dc>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d101      	bne.n	8002530 <HAL_GPIO_Init+0x1d4>
 800252c:	2303      	movs	r3, #3
 800252e:	e006      	b.n	800253e <HAL_GPIO_Init+0x1e2>
 8002530:	2305      	movs	r3, #5
 8002532:	e004      	b.n	800253e <HAL_GPIO_Init+0x1e2>
 8002534:	2302      	movs	r3, #2
 8002536:	e002      	b.n	800253e <HAL_GPIO_Init+0x1e2>
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <HAL_GPIO_Init+0x1e2>
 800253c:	2300      	movs	r3, #0
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	f002 0203 	and.w	r2, r2, #3
 8002544:	0092      	lsls	r2, r2, #2
 8002546:	4093      	lsls	r3, r2
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800254e:	4937      	ldr	r1, [pc, #220]	@ (800262c <HAL_GPIO_Init+0x2d0>)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	089b      	lsrs	r3, r3, #2
 8002554:	3302      	adds	r3, #2
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800255c:	4b37      	ldr	r3, [pc, #220]	@ (800263c <HAL_GPIO_Init+0x2e0>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	43db      	mvns	r3, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002580:	4a2e      	ldr	r2, [pc, #184]	@ (800263c <HAL_GPIO_Init+0x2e0>)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002586:	4b2d      	ldr	r3, [pc, #180]	@ (800263c <HAL_GPIO_Init+0x2e0>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	43db      	mvns	r3, r3
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	4013      	ands	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025aa:	4a24      	ldr	r2, [pc, #144]	@ (800263c <HAL_GPIO_Init+0x2e0>)
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025b0:	4b22      	ldr	r3, [pc, #136]	@ (800263c <HAL_GPIO_Init+0x2e0>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025d4:	4a19      	ldr	r2, [pc, #100]	@ (800263c <HAL_GPIO_Init+0x2e0>)
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025da:	4b18      	ldr	r3, [pc, #96]	@ (800263c <HAL_GPIO_Init+0x2e0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4013      	ands	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025fe:	4a0f      	ldr	r2, [pc, #60]	@ (800263c <HAL_GPIO_Init+0x2e0>)
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	3301      	adds	r3, #1
 8002608:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	fa22 f303 	lsr.w	r3, r2, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	f47f aea9 	bne.w	800236c <HAL_GPIO_Init+0x10>
  }
}
 800261a:	bf00      	nop
 800261c:	bf00      	nop
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	40021000 	.word	0x40021000
 800262c:	40010000 	.word	0x40010000
 8002630:	48000400 	.word	0x48000400
 8002634:	48000800 	.word	0x48000800
 8002638:	48000c00 	.word	0x48000c00
 800263c:	40010400 	.word	0x40010400

08002640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	807b      	strh	r3, [r7, #2]
 800264c:	4613      	mov	r3, r2
 800264e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002650:	787b      	ldrb	r3, [r7, #1]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002656:	887a      	ldrh	r2, [r7, #2]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800265c:	e002      	b.n	8002664 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800265e:	887a      	ldrh	r2, [r7, #2]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002676:	af00      	add	r7, sp, #0
 8002678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002680:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002686:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d102      	bne.n	8002696 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	f000 bff4 	b.w	800367e <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 816d 	beq.w	8002986 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026ac:	4bb4      	ldr	r3, [pc, #720]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 030c 	and.w	r3, r3, #12
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d00c      	beq.n	80026d2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026b8:	4bb1      	ldr	r3, [pc, #708]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 030c 	and.w	r3, r3, #12
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d157      	bne.n	8002774 <HAL_RCC_OscConfig+0x104>
 80026c4:	4bae      	ldr	r3, [pc, #696]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026d0:	d150      	bne.n	8002774 <HAL_RCC_OscConfig+0x104>
 80026d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026d6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80026de:	fa93 f3a3 	rbit	r3, r3
 80026e2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026e6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ea:	fab3 f383 	clz	r3, r3
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80026f2:	d802      	bhi.n	80026fa <HAL_RCC_OscConfig+0x8a>
 80026f4:	4ba2      	ldr	r3, [pc, #648]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	e015      	b.n	8002726 <HAL_RCC_OscConfig+0xb6>
 80026fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026fe:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800270e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002712:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002716:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002722:	4b97      	ldr	r3, [pc, #604]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800272a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800272e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002732:	fa92 f2a2 	rbit	r2, r2
 8002736:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800273a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800273e:	fab2 f282 	clz	r2, r2
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	f042 0220 	orr.w	r2, r2, #32
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	f002 021f 	and.w	r2, r2, #31
 800274e:	2101      	movs	r1, #1
 8002750:	fa01 f202 	lsl.w	r2, r1, r2
 8002754:	4013      	ands	r3, r2
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 8114 	beq.w	8002984 <HAL_RCC_OscConfig+0x314>
 800275c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002760:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	f040 810b 	bne.w	8002984 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	f000 bf85 	b.w	800367e <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002778:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002784:	d106      	bne.n	8002794 <HAL_RCC_OscConfig+0x124>
 8002786:	4b7e      	ldr	r3, [pc, #504]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a7d      	ldr	r2, [pc, #500]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 800278c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e036      	b.n	8002802 <HAL_RCC_OscConfig+0x192>
 8002794:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002798:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10c      	bne.n	80027be <HAL_RCC_OscConfig+0x14e>
 80027a4:	4b76      	ldr	r3, [pc, #472]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a75      	ldr	r2, [pc, #468]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 80027aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4b73      	ldr	r3, [pc, #460]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a72      	ldr	r2, [pc, #456]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 80027b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	e021      	b.n	8002802 <HAL_RCC_OscConfig+0x192>
 80027be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027ce:	d10c      	bne.n	80027ea <HAL_RCC_OscConfig+0x17a>
 80027d0:	4b6b      	ldr	r3, [pc, #428]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a6a      	ldr	r2, [pc, #424]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 80027d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	4b68      	ldr	r3, [pc, #416]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a67      	ldr	r2, [pc, #412]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 80027e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	e00b      	b.n	8002802 <HAL_RCC_OscConfig+0x192>
 80027ea:	4b65      	ldr	r3, [pc, #404]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a64      	ldr	r2, [pc, #400]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 80027f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	4b62      	ldr	r3, [pc, #392]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a61      	ldr	r2, [pc, #388]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 80027fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002800:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002802:	4b5f      	ldr	r3, [pc, #380]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 8002804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002806:	f023 020f 	bic.w	r2, r3, #15
 800280a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	495a      	ldr	r1, [pc, #360]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 8002818:	4313      	orrs	r3, r2
 800281a:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800281c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002820:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d054      	beq.n	80028d6 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7fe fe04 	bl	8001438 <HAL_GetTick>
 8002830:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002834:	e00a      	b.n	800284c <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002836:	f7fe fdff 	bl	8001438 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b64      	cmp	r3, #100	@ 0x64
 8002844:	d902      	bls.n	800284c <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	f000 bf19 	b.w	800367e <HAL_RCC_OscConfig+0x100e>
 800284c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002850:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002860:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002864:	fab3 f383 	clz	r3, r3
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b3f      	cmp	r3, #63	@ 0x3f
 800286c:	d802      	bhi.n	8002874 <HAL_RCC_OscConfig+0x204>
 800286e:	4b44      	ldr	r3, [pc, #272]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	e015      	b.n	80028a0 <HAL_RCC_OscConfig+0x230>
 8002874:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002878:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002880:	fa93 f3a3 	rbit	r3, r3
 8002884:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002888:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800288c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002890:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002894:	fa93 f3a3 	rbit	r3, r3
 8002898:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800289c:	4b38      	ldr	r3, [pc, #224]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 800289e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028a4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80028a8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80028ac:	fa92 f2a2 	rbit	r2, r2
 80028b0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80028b4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80028b8:	fab2 f282 	clz	r2, r2
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	f042 0220 	orr.w	r2, r2, #32
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	f002 021f 	and.w	r2, r2, #31
 80028c8:	2101      	movs	r1, #1
 80028ca:	fa01 f202 	lsl.w	r2, r1, r2
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0b0      	beq.n	8002836 <HAL_RCC_OscConfig+0x1c6>
 80028d4:	e057      	b.n	8002986 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7fe fdaf 	bl	8001438 <HAL_GetTick>
 80028da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e0:	f7fe fdaa 	bl	8001438 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b64      	cmp	r3, #100	@ 0x64
 80028ee:	d902      	bls.n	80028f6 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	f000 bec4 	b.w	800367e <HAL_RCC_OscConfig+0x100e>
 80028f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028fa:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800290a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b3f      	cmp	r3, #63	@ 0x3f
 8002916:	d802      	bhi.n	800291e <HAL_RCC_OscConfig+0x2ae>
 8002918:	4b19      	ldr	r3, [pc, #100]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	e015      	b.n	800294a <HAL_RCC_OscConfig+0x2da>
 800291e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002922:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002932:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002936:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800293a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002946:	4b0e      	ldr	r3, [pc, #56]	@ (8002980 <HAL_RCC_OscConfig+0x310>)
 8002948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800294e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002952:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002956:	fa92 f2a2 	rbit	r2, r2
 800295a:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800295e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002962:	fab2 f282 	clz	r2, r2
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	f042 0220 	orr.w	r2, r2, #32
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	f002 021f 	and.w	r2, r2, #31
 8002972:	2101      	movs	r1, #1
 8002974:	fa01 f202 	lsl.w	r2, r1, r2
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1b0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x270>
 800297e:	e002      	b.n	8002986 <HAL_RCC_OscConfig+0x316>
 8002980:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 816c 	beq.w	8002c74 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800299c:	4bcc      	ldr	r3, [pc, #816]	@ (8002cd0 <HAL_RCC_OscConfig+0x660>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 030c 	and.w	r3, r3, #12
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00b      	beq.n	80029c0 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029a8:	4bc9      	ldr	r3, [pc, #804]	@ (8002cd0 <HAL_RCC_OscConfig+0x660>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 030c 	and.w	r3, r3, #12
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d16d      	bne.n	8002a90 <HAL_RCC_OscConfig+0x420>
 80029b4:	4bc6      	ldr	r3, [pc, #792]	@ (8002cd0 <HAL_RCC_OscConfig+0x660>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d167      	bne.n	8002a90 <HAL_RCC_OscConfig+0x420>
 80029c0:	2302      	movs	r3, #2
 80029c2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80029d2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d6:	fab3 f383 	clz	r3, r3
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80029de:	d802      	bhi.n	80029e6 <HAL_RCC_OscConfig+0x376>
 80029e0:	4bbb      	ldr	r3, [pc, #748]	@ (8002cd0 <HAL_RCC_OscConfig+0x660>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	e013      	b.n	8002a0e <HAL_RCC_OscConfig+0x39e>
 80029e6:	2302      	movs	r3, #2
 80029e8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80029f8:	2302      	movs	r3, #2
 80029fa:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80029fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002a0a:	4bb1      	ldr	r3, [pc, #708]	@ (8002cd0 <HAL_RCC_OscConfig+0x660>)
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002a14:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002a18:	fa92 f2a2 	rbit	r2, r2
 8002a1c:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002a20:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002a24:	fab2 f282 	clz	r2, r2
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	f042 0220 	orr.w	r2, r2, #32
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	f002 021f 	and.w	r2, r2, #31
 8002a34:	2101      	movs	r1, #1
 8002a36:	fa01 f202 	lsl.w	r2, r1, r2
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <HAL_RCC_OscConfig+0x3e6>
 8002a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d002      	beq.n	8002a56 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	f000 be14 	b.w	800367e <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a56:	4b9e      	ldr	r3, [pc, #632]	@ (8002cd0 <HAL_RCC_OscConfig+0x660>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	21f8      	movs	r1, #248	@ 0xf8
 8002a6c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002a74:	fa91 f1a1 	rbit	r1, r1
 8002a78:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002a7c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002a80:	fab1 f181 	clz	r1, r1
 8002a84:	b2c9      	uxtb	r1, r1
 8002a86:	408b      	lsls	r3, r1
 8002a88:	4991      	ldr	r1, [pc, #580]	@ (8002cd0 <HAL_RCC_OscConfig+0x660>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8e:	e0f1      	b.n	8002c74 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 8083 	beq.w	8002ba8 <HAL_RCC_OscConfig+0x538>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002aac:	fa93 f3a3 	rbit	r3, r3
 8002ab0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002ab4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ac2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2301      	movs	r3, #1
 8002acc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ace:	f7fe fcb3 	bl	8001438 <HAL_GetTick>
 8002ad2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ad8:	f7fe fcae 	bl	8001438 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d902      	bls.n	8002aee <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	f000 bdc8 	b.w	800367e <HAL_RCC_OscConfig+0x100e>
 8002aee:	2302      	movs	r3, #2
 8002af0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002af8:	fa93 f3a3 	rbit	r3, r3
 8002afc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002b00:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b04:	fab3 f383 	clz	r3, r3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b0c:	d802      	bhi.n	8002b14 <HAL_RCC_OscConfig+0x4a4>
 8002b0e:	4b70      	ldr	r3, [pc, #448]	@ (8002cd0 <HAL_RCC_OscConfig+0x660>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	e013      	b.n	8002b3c <HAL_RCC_OscConfig+0x4cc>
 8002b14:	2302      	movs	r3, #2
 8002b16:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002b26:	2302      	movs	r3, #2
 8002b28:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002b2c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002b30:	fa93 f3a3 	rbit	r3, r3
 8002b34:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002b38:	4b65      	ldr	r3, [pc, #404]	@ (8002cd0 <HAL_RCC_OscConfig+0x660>)
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002b42:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002b46:	fa92 f2a2 	rbit	r2, r2
 8002b4a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002b4e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002b52:	fab2 f282 	clz	r2, r2
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	f042 0220 	orr.w	r2, r2, #32
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	f002 021f 	and.w	r2, r2, #31
 8002b62:	2101      	movs	r1, #1
 8002b64:	fa01 f202 	lsl.w	r2, r1, r2
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0b4      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6e:	4b58      	ldr	r3, [pc, #352]	@ (8002cd0 <HAL_RCC_OscConfig+0x660>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	21f8      	movs	r1, #248	@ 0xf8
 8002b84:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002b8c:	fa91 f1a1 	rbit	r1, r1
 8002b90:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002b94:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002b98:	fab1 f181 	clz	r1, r1
 8002b9c:	b2c9      	uxtb	r1, r1
 8002b9e:	408b      	lsls	r3, r1
 8002ba0:	494b      	ldr	r1, [pc, #300]	@ (8002cd0 <HAL_RCC_OscConfig+0x660>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]
 8002ba6:	e065      	b.n	8002c74 <HAL_RCC_OscConfig+0x604>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002bba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002bc8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	461a      	mov	r2, r3
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd4:	f7fe fc30 	bl	8001438 <HAL_GetTick>
 8002bd8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bde:	f7fe fc2b 	bl	8001438 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d902      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	f000 bd45 	b.w	800367e <HAL_RCC_OscConfig+0x100e>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c12:	d802      	bhi.n	8002c1a <HAL_RCC_OscConfig+0x5aa>
 8002c14:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd0 <HAL_RCC_OscConfig+0x660>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	e013      	b.n	8002c42 <HAL_RCC_OscConfig+0x5d2>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002c32:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002c3e:	4b24      	ldr	r3, [pc, #144]	@ (8002cd0 <HAL_RCC_OscConfig+0x660>)
 8002c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c42:	2202      	movs	r2, #2
 8002c44:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002c48:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002c4c:	fa92 f2a2 	rbit	r2, r2
 8002c50:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002c54:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002c58:	fab2 f282 	clz	r2, r2
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	f042 0220 	orr.w	r2, r2, #32
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	f002 021f 	and.w	r2, r2, #31
 8002c68:	2101      	movs	r1, #1
 8002c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6e:	4013      	ands	r3, r2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1b4      	bne.n	8002bde <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 8115 	beq.w	8002eb4 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d07e      	beq.n	8002d98 <HAL_RCC_OscConfig+0x728>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cb0:	fab3 f383 	clz	r3, r3
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	4b06      	ldr	r3, [pc, #24]	@ (8002cd4 <HAL_RCC_OscConfig+0x664>)
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc4:	f7fe fbb8 	bl	8001438 <HAL_GetTick>
 8002cc8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ccc:	e00f      	b.n	8002cee <HAL_RCC_OscConfig+0x67e>
 8002cce:	bf00      	nop
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd8:	f7fe fbae 	bl	8001438 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d902      	bls.n	8002cee <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	f000 bcc8 	b.w	800367e <HAL_RCC_OscConfig+0x100e>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d04:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002d08:	2202      	movs	r2, #2
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d10:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	fa93 f2a3 	rbit	r2, r3
 8002d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	fa93 f2a3 	rbit	r2, r3
 8002d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d42:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d46:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d48:	4bb0      	ldr	r3, [pc, #704]	@ (800300c <HAL_RCC_OscConfig+0x99c>)
 8002d4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d50:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d54:	2102      	movs	r1, #2
 8002d56:	6019      	str	r1, [r3, #0]
 8002d58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	fa93 f1a3 	rbit	r1, r3
 8002d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002d6e:	6019      	str	r1, [r3, #0]
  return result;
 8002d70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d74:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	fab3 f383 	clz	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f003 031f 	and.w	r3, r3, #31
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0a0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x668>
 8002d96:	e08d      	b.n	8002eb4 <HAL_RCC_OscConfig+0x844>
 8002d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	fa93 f2a3 	rbit	r2, r3
 8002db2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002dba:	601a      	str	r2, [r3, #0]
  return result;
 8002dbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002dc4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4b90      	ldr	r3, [pc, #576]	@ (8003010 <HAL_RCC_OscConfig+0x9a0>)
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dda:	f7fe fb2d 	bl	8001438 <HAL_GetTick>
 8002dde:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de4:	f7fe fb28 	bl	8001438 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d902      	bls.n	8002dfa <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	f000 bc42 	b.w	800367e <HAL_RCC_OscConfig+0x100e>
 8002dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002e02:	2202      	movs	r2, #2
 8002e04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e0a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	fa93 f2a3 	rbit	r2, r3
 8002e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e18:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e22:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002e26:	2202      	movs	r2, #2
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	fa93 f2a3 	rbit	r2, r3
 8002e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e46:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e52:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	fa93 f2a3 	rbit	r2, r3
 8002e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e60:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002e64:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e66:	4b69      	ldr	r3, [pc, #420]	@ (800300c <HAL_RCC_OscConfig+0x99c>)
 8002e68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002e72:	2102      	movs	r1, #2
 8002e74:	6019      	str	r1, [r3, #0]
 8002e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	fa93 f1a3 	rbit	r1, r3
 8002e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e88:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e8c:	6019      	str	r1, [r3, #0]
  return result;
 8002e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e92:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d197      	bne.n	8002de4 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 819e 	beq.w	8003206 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ed0:	4b4e      	ldr	r3, [pc, #312]	@ (800300c <HAL_RCC_OscConfig+0x99c>)
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d116      	bne.n	8002f0a <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002edc:	4b4b      	ldr	r3, [pc, #300]	@ (800300c <HAL_RCC_OscConfig+0x99c>)
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	4a4a      	ldr	r2, [pc, #296]	@ (800300c <HAL_RCC_OscConfig+0x99c>)
 8002ee2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ee6:	61d3      	str	r3, [r2, #28]
 8002ee8:	4b48      	ldr	r3, [pc, #288]	@ (800300c <HAL_RCC_OscConfig+0x99c>)
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efe:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002f02:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0a:	4b42      	ldr	r3, [pc, #264]	@ (8003014 <HAL_RCC_OscConfig+0x9a4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d11a      	bne.n	8002f4c <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f16:	4b3f      	ldr	r3, [pc, #252]	@ (8003014 <HAL_RCC_OscConfig+0x9a4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a3e      	ldr	r2, [pc, #248]	@ (8003014 <HAL_RCC_OscConfig+0x9a4>)
 8002f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f22:	f7fe fa89 	bl	8001438 <HAL_GetTick>
 8002f26:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2a:	e009      	b.n	8002f40 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2c:	f7fe fa84 	bl	8001438 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b64      	cmp	r3, #100	@ 0x64
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e39e      	b.n	800367e <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f40:	4b34      	ldr	r3, [pc, #208]	@ (8003014 <HAL_RCC_OscConfig+0x9a4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0ef      	beq.n	8002f2c <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCC_OscConfig+0x8fa>
 8002f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800300c <HAL_RCC_OscConfig+0x99c>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	4a2a      	ldr	r2, [pc, #168]	@ (800300c <HAL_RCC_OscConfig+0x99c>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6213      	str	r3, [r2, #32]
 8002f68:	e035      	b.n	8002fd6 <HAL_RCC_OscConfig+0x966>
 8002f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x924>
 8002f7a:	4b24      	ldr	r3, [pc, #144]	@ (800300c <HAL_RCC_OscConfig+0x99c>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	4a23      	ldr	r2, [pc, #140]	@ (800300c <HAL_RCC_OscConfig+0x99c>)
 8002f80:	f023 0301 	bic.w	r3, r3, #1
 8002f84:	6213      	str	r3, [r2, #32]
 8002f86:	4b21      	ldr	r3, [pc, #132]	@ (800300c <HAL_RCC_OscConfig+0x99c>)
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	4a20      	ldr	r2, [pc, #128]	@ (800300c <HAL_RCC_OscConfig+0x99c>)
 8002f8c:	f023 0304 	bic.w	r3, r3, #4
 8002f90:	6213      	str	r3, [r2, #32]
 8002f92:	e020      	b.n	8002fd6 <HAL_RCC_OscConfig+0x966>
 8002f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b05      	cmp	r3, #5
 8002fa2:	d10c      	bne.n	8002fbe <HAL_RCC_OscConfig+0x94e>
 8002fa4:	4b19      	ldr	r3, [pc, #100]	@ (800300c <HAL_RCC_OscConfig+0x99c>)
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	4a18      	ldr	r2, [pc, #96]	@ (800300c <HAL_RCC_OscConfig+0x99c>)
 8002faa:	f043 0304 	orr.w	r3, r3, #4
 8002fae:	6213      	str	r3, [r2, #32]
 8002fb0:	4b16      	ldr	r3, [pc, #88]	@ (800300c <HAL_RCC_OscConfig+0x99c>)
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	4a15      	ldr	r2, [pc, #84]	@ (800300c <HAL_RCC_OscConfig+0x99c>)
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	6213      	str	r3, [r2, #32]
 8002fbc:	e00b      	b.n	8002fd6 <HAL_RCC_OscConfig+0x966>
 8002fbe:	4b13      	ldr	r3, [pc, #76]	@ (800300c <HAL_RCC_OscConfig+0x99c>)
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	4a12      	ldr	r2, [pc, #72]	@ (800300c <HAL_RCC_OscConfig+0x99c>)
 8002fc4:	f023 0301 	bic.w	r3, r3, #1
 8002fc8:	6213      	str	r3, [r2, #32]
 8002fca:	4b10      	ldr	r3, [pc, #64]	@ (800300c <HAL_RCC_OscConfig+0x99c>)
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	4a0f      	ldr	r2, [pc, #60]	@ (800300c <HAL_RCC_OscConfig+0x99c>)
 8002fd0:	f023 0304 	bic.w	r3, r3, #4
 8002fd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 8087 	beq.w	80030f6 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe8:	f7fe fa26 	bl	8001438 <HAL_GetTick>
 8002fec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff0:	e012      	b.n	8003018 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fe fa21 	bl	8001438 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d908      	bls.n	8003018 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e339      	b.n	800367e <HAL_RCC_OscConfig+0x100e>
 800300a:	bf00      	nop
 800300c:	40021000 	.word	0x40021000
 8003010:	10908120 	.word	0x10908120
 8003014:	40007000 	.word	0x40007000
 8003018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003020:	2202      	movs	r2, #2
 8003022:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003028:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	fa93 f2a3 	rbit	r2, r3
 8003032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003036:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003040:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003044:	2202      	movs	r2, #2
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800304c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	fa93 f2a3 	rbit	r2, r3
 8003056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800305e:	601a      	str	r2, [r3, #0]
  return result;
 8003060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003064:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003068:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306a:	fab3 f383 	clz	r3, r3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <HAL_RCC_OscConfig+0xa10>
 800307a:	4b98      	ldr	r3, [pc, #608]	@ (80032dc <HAL_RCC_OscConfig+0xc6c>)
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	e013      	b.n	80030a8 <HAL_RCC_OscConfig+0xa38>
 8003080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003084:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003088:	2202      	movs	r2, #2
 800308a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003090:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	fa93 f2a3 	rbit	r2, r3
 800309a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	4b8d      	ldr	r3, [pc, #564]	@ (80032dc <HAL_RCC_OscConfig+0xc6c>)
 80030a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030ac:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80030b0:	2102      	movs	r1, #2
 80030b2:	6011      	str	r1, [r2, #0]
 80030b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030b8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	fa92 f1a2 	rbit	r1, r2
 80030c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030c6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80030ca:	6011      	str	r1, [r2, #0]
  return result;
 80030cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030d0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80030d4:	6812      	ldr	r2, [r2, #0]
 80030d6:	fab2 f282 	clz	r2, r2
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	f002 021f 	and.w	r2, r2, #31
 80030e6:	2101      	movs	r1, #1
 80030e8:	fa01 f202 	lsl.w	r2, r1, r2
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f43f af7f 	beq.w	8002ff2 <HAL_RCC_OscConfig+0x982>
 80030f4:	e07d      	b.n	80031f2 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f6:	f7fe f99f 	bl	8001438 <HAL_GetTick>
 80030fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fe:	e00b      	b.n	8003118 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003100:	f7fe f99a 	bl	8001438 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003110:	4293      	cmp	r3, r2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e2b2      	b.n	800367e <HAL_RCC_OscConfig+0x100e>
 8003118:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003120:	2202      	movs	r2, #2
 8003122:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003128:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	fa93 f2a3 	rbit	r2, r3
 8003132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003136:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003140:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003144:	2202      	movs	r2, #2
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800314c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	fa93 f2a3 	rbit	r2, r3
 8003156:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800315e:	601a      	str	r2, [r3, #0]
  return result;
 8003160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003164:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003168:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316a:	fab3 f383 	clz	r3, r3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d102      	bne.n	8003180 <HAL_RCC_OscConfig+0xb10>
 800317a:	4b58      	ldr	r3, [pc, #352]	@ (80032dc <HAL_RCC_OscConfig+0xc6c>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	e013      	b.n	80031a8 <HAL_RCC_OscConfig+0xb38>
 8003180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003184:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003188:	2202      	movs	r2, #2
 800318a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003190:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	fa93 f2a3 	rbit	r2, r3
 800319a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800319e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	4b4d      	ldr	r3, [pc, #308]	@ (80032dc <HAL_RCC_OscConfig+0xc6c>)
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031ac:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80031b0:	2102      	movs	r1, #2
 80031b2:	6011      	str	r1, [r2, #0]
 80031b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031b8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	fa92 f1a2 	rbit	r1, r2
 80031c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031c6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80031ca:	6011      	str	r1, [r2, #0]
  return result;
 80031cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031d0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80031d4:	6812      	ldr	r2, [r2, #0]
 80031d6:	fab2 f282 	clz	r2, r2
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	f002 021f 	and.w	r2, r2, #31
 80031e6:	2101      	movs	r1, #1
 80031e8:	fa01 f202 	lsl.w	r2, r1, r2
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d186      	bne.n	8003100 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031f2:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d105      	bne.n	8003206 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031fa:	4b38      	ldr	r3, [pc, #224]	@ (80032dc <HAL_RCC_OscConfig+0xc6c>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	4a37      	ldr	r2, [pc, #220]	@ (80032dc <HAL_RCC_OscConfig+0xc6c>)
 8003200:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003204:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 8232 	beq.w	800367c <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003218:	4b30      	ldr	r3, [pc, #192]	@ (80032dc <HAL_RCC_OscConfig+0xc6c>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 030c 	and.w	r3, r3, #12
 8003220:	2b08      	cmp	r3, #8
 8003222:	f000 8201 	beq.w	8003628 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003226:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800322a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	2b02      	cmp	r3, #2
 8003234:	f040 8157 	bne.w	80034e6 <HAL_RCC_OscConfig+0xe76>
 8003238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003240:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003244:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800324a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	fa93 f2a3 	rbit	r2, r3
 8003254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003258:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800325c:	601a      	str	r2, [r3, #0]
  return result;
 800325e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003262:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003266:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003268:	fab3 f383 	clz	r3, r3
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003272:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	461a      	mov	r2, r3
 800327a:	2300      	movs	r3, #0
 800327c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327e:	f7fe f8db 	bl	8001438 <HAL_GetTick>
 8003282:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003286:	e009      	b.n	800329c <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003288:	f7fe f8d6 	bl	8001438 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e1f0      	b.n	800367e <HAL_RCC_OscConfig+0x100e>
 800329c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80032a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ae:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	fa93 f2a3 	rbit	r2, r3
 80032b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032bc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80032c0:	601a      	str	r2, [r3, #0]
  return result;
 80032c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80032ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032cc:	fab3 f383 	clz	r3, r3
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80032d4:	d804      	bhi.n	80032e0 <HAL_RCC_OscConfig+0xc70>
 80032d6:	4b01      	ldr	r3, [pc, #4]	@ (80032dc <HAL_RCC_OscConfig+0xc6c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	e029      	b.n	8003330 <HAL_RCC_OscConfig+0xcc0>
 80032dc:	40021000 	.word	0x40021000
 80032e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80032e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	fa93 f2a3 	rbit	r2, r3
 80032fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003300:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800330e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003318:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	fa93 f2a3 	rbit	r2, r3
 8003322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003326:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	4bc3      	ldr	r3, [pc, #780]	@ (800363c <HAL_RCC_OscConfig+0xfcc>)
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003334:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003338:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800333c:	6011      	str	r1, [r2, #0]
 800333e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003342:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	fa92 f1a2 	rbit	r1, r2
 800334c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003350:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003354:	6011      	str	r1, [r2, #0]
  return result;
 8003356:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800335a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	fab2 f282 	clz	r2, r2
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	f042 0220 	orr.w	r2, r2, #32
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	f002 021f 	and.w	r2, r2, #31
 8003370:	2101      	movs	r1, #1
 8003372:	fa01 f202 	lsl.w	r2, r1, r2
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d185      	bne.n	8003288 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800337c:	4baf      	ldr	r3, [pc, #700]	@ (800363c <HAL_RCC_OscConfig+0xfcc>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003388:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003394:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	430b      	orrs	r3, r1
 800339e:	49a7      	ldr	r1, [pc, #668]	@ (800363c <HAL_RCC_OscConfig+0xfcc>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	604b      	str	r3, [r1, #4]
 80033a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80033ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	fa93 f2a3 	rbit	r2, r3
 80033c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80033c8:	601a      	str	r2, [r3, #0]
  return result;
 80033ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ce:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80033d2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033d4:	fab3 f383 	clz	r3, r3
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80033de:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	461a      	mov	r2, r3
 80033e6:	2301      	movs	r3, #1
 80033e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ea:	f7fe f825 	bl	8001438 <HAL_GetTick>
 80033ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033f2:	e009      	b.n	8003408 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f4:	f7fe f820 	bl	8001438 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e13a      	b.n	800367e <HAL_RCC_OscConfig+0x100e>
 8003408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003410:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003414:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	fa93 f2a3 	rbit	r2, r3
 8003424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003428:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800342c:	601a      	str	r2, [r3, #0]
  return result;
 800342e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003432:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003436:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003438:	fab3 f383 	clz	r3, r3
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003440:	d802      	bhi.n	8003448 <HAL_RCC_OscConfig+0xdd8>
 8003442:	4b7e      	ldr	r3, [pc, #504]	@ (800363c <HAL_RCC_OscConfig+0xfcc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	e027      	b.n	8003498 <HAL_RCC_OscConfig+0xe28>
 8003448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003450:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003454:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	fa93 f2a3 	rbit	r2, r3
 8003464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003468:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003472:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003476:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003480:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	fa93 f2a3 	rbit	r2, r3
 800348a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800348e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	4b69      	ldr	r3, [pc, #420]	@ (800363c <HAL_RCC_OscConfig+0xfcc>)
 8003496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003498:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800349c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80034a0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80034a4:	6011      	str	r1, [r2, #0]
 80034a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034aa:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	fa92 f1a2 	rbit	r1, r2
 80034b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034b8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80034bc:	6011      	str	r1, [r2, #0]
  return result;
 80034be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034c2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	fab2 f282 	clz	r2, r2
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	f042 0220 	orr.w	r2, r2, #32
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	f002 021f 	and.w	r2, r2, #31
 80034d8:	2101      	movs	r1, #1
 80034da:	fa01 f202 	lsl.w	r2, r1, r2
 80034de:	4013      	ands	r3, r2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d087      	beq.n	80033f4 <HAL_RCC_OscConfig+0xd84>
 80034e4:	e0ca      	b.n	800367c <HAL_RCC_OscConfig+0x100c>
 80034e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ea:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80034ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	fa93 f2a3 	rbit	r2, r3
 8003502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003506:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800350a:	601a      	str	r2, [r3, #0]
  return result;
 800350c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003510:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003514:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003516:	fab3 f383 	clz	r3, r3
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003520:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	461a      	mov	r2, r3
 8003528:	2300      	movs	r3, #0
 800352a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fd ff84 	bl	8001438 <HAL_GetTick>
 8003530:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003534:	e009      	b.n	800354a <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003536:	f7fd ff7f 	bl	8001438 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e099      	b.n	800367e <HAL_RCC_OscConfig+0x100e>
 800354a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800354e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003552:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800355c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	fa93 f2a3 	rbit	r2, r3
 8003566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800356a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800356e:	601a      	str	r2, [r3, #0]
  return result;
 8003570:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003574:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003578:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800357a:	fab3 f383 	clz	r3, r3
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b3f      	cmp	r3, #63	@ 0x3f
 8003582:	d802      	bhi.n	800358a <HAL_RCC_OscConfig+0xf1a>
 8003584:	4b2d      	ldr	r3, [pc, #180]	@ (800363c <HAL_RCC_OscConfig+0xfcc>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	e027      	b.n	80035da <HAL_RCC_OscConfig+0xf6a>
 800358a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800358e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003592:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800359c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	fa93 f2a3 	rbit	r2, r3
 80035a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035aa:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80035b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	fa93 f2a3 	rbit	r2, r3
 80035cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	4b19      	ldr	r3, [pc, #100]	@ (800363c <HAL_RCC_OscConfig+0xfcc>)
 80035d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035de:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80035e2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80035e6:	6011      	str	r1, [r2, #0]
 80035e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035ec:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	fa92 f1a2 	rbit	r1, r2
 80035f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035fa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80035fe:	6011      	str	r1, [r2, #0]
  return result;
 8003600:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003604:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003608:	6812      	ldr	r2, [r2, #0]
 800360a:	fab2 f282 	clz	r2, r2
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	f042 0220 	orr.w	r2, r2, #32
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	f002 021f 	and.w	r2, r2, #31
 800361a:	2101      	movs	r1, #1
 800361c:	fa01 f202 	lsl.w	r2, r1, r2
 8003620:	4013      	ands	r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d187      	bne.n	8003536 <HAL_RCC_OscConfig+0xec6>
 8003626:	e029      	b.n	800367c <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800362c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d103      	bne.n	8003640 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e020      	b.n	800367e <HAL_RCC_OscConfig+0x100e>
 800363c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003640:	4b11      	ldr	r3, [pc, #68]	@ (8003688 <HAL_RCC_OscConfig+0x1018>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003648:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800364c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003650:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003654:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	429a      	cmp	r2, r3
 800365e:	d10b      	bne.n	8003678 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003660:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003664:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800366c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003674:	429a      	cmp	r2, r3
 8003676:	d001      	beq.n	800367c <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40021000 	.word	0x40021000

0800368c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b09e      	sub	sp, #120	@ 0x78
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e154      	b.n	800394e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036a4:	4b89      	ldr	r3, [pc, #548]	@ (80038cc <HAL_RCC_ClockConfig+0x240>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d910      	bls.n	80036d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4b86      	ldr	r3, [pc, #536]	@ (80038cc <HAL_RCC_ClockConfig+0x240>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 0207 	bic.w	r2, r3, #7
 80036ba:	4984      	ldr	r1, [pc, #528]	@ (80038cc <HAL_RCC_ClockConfig+0x240>)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b82      	ldr	r3, [pc, #520]	@ (80038cc <HAL_RCC_ClockConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e13c      	b.n	800394e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e0:	4b7b      	ldr	r3, [pc, #492]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4978      	ldr	r1, [pc, #480]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 80cd 	beq.w	800389a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d137      	bne.n	8003778 <HAL_RCC_ClockConfig+0xec>
 8003708:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800370c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003710:	fa93 f3a3 	rbit	r3, r3
 8003714:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003716:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003718:	fab3 f383 	clz	r3, r3
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003720:	d802      	bhi.n	8003728 <HAL_RCC_ClockConfig+0x9c>
 8003722:	4b6b      	ldr	r3, [pc, #428]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	e00f      	b.n	8003748 <HAL_RCC_ClockConfig+0xbc>
 8003728:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800372c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003730:	fa93 f3a3 	rbit	r3, r3
 8003734:	667b      	str	r3, [r7, #100]	@ 0x64
 8003736:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800373a:	663b      	str	r3, [r7, #96]	@ 0x60
 800373c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800373e:	fa93 f3a3 	rbit	r3, r3
 8003742:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003744:	4b62      	ldr	r3, [pc, #392]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 8003746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003748:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800374c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800374e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003750:	fa92 f2a2 	rbit	r2, r2
 8003754:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003756:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003758:	fab2 f282 	clz	r2, r2
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	f042 0220 	orr.w	r2, r2, #32
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	f002 021f 	and.w	r2, r2, #31
 8003768:	2101      	movs	r1, #1
 800376a:	fa01 f202 	lsl.w	r2, r1, r2
 800376e:	4013      	ands	r3, r2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d171      	bne.n	8003858 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0ea      	b.n	800394e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b02      	cmp	r3, #2
 800377e:	d137      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x164>
 8003780:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003784:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003788:	fa93 f3a3 	rbit	r3, r3
 800378c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800378e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003790:	fab3 f383 	clz	r3, r3
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b3f      	cmp	r3, #63	@ 0x3f
 8003798:	d802      	bhi.n	80037a0 <HAL_RCC_ClockConfig+0x114>
 800379a:	4b4d      	ldr	r3, [pc, #308]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	e00f      	b.n	80037c0 <HAL_RCC_ClockConfig+0x134>
 80037a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80037ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80037b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037b6:	fa93 f3a3 	rbit	r3, r3
 80037ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037bc:	4b44      	ldr	r3, [pc, #272]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037c4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80037c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80037c8:	fa92 f2a2 	rbit	r2, r2
 80037cc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80037ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037d0:	fab2 f282 	clz	r2, r2
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	f042 0220 	orr.w	r2, r2, #32
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	f002 021f 	and.w	r2, r2, #31
 80037e0:	2101      	movs	r1, #1
 80037e2:	fa01 f202 	lsl.w	r2, r1, r2
 80037e6:	4013      	ands	r3, r2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d135      	bne.n	8003858 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0ae      	b.n	800394e <HAL_RCC_ClockConfig+0x2c2>
 80037f0:	2302      	movs	r3, #2
 80037f2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f6:	fa93 f3a3 	rbit	r3, r3
 80037fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80037fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037fe:	fab3 f383 	clz	r3, r3
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b3f      	cmp	r3, #63	@ 0x3f
 8003806:	d802      	bhi.n	800380e <HAL_RCC_ClockConfig+0x182>
 8003808:	4b31      	ldr	r3, [pc, #196]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	e00d      	b.n	800382a <HAL_RCC_ClockConfig+0x19e>
 800380e:	2302      	movs	r3, #2
 8003810:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003814:	fa93 f3a3 	rbit	r3, r3
 8003818:	627b      	str	r3, [r7, #36]	@ 0x24
 800381a:	2302      	movs	r3, #2
 800381c:	623b      	str	r3, [r7, #32]
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	fa93 f3a3 	rbit	r3, r3
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	4b2a      	ldr	r3, [pc, #168]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	2202      	movs	r2, #2
 800382c:	61ba      	str	r2, [r7, #24]
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	fa92 f2a2 	rbit	r2, r2
 8003834:	617a      	str	r2, [r7, #20]
  return result;
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	fab2 f282 	clz	r2, r2
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	f042 0220 	orr.w	r2, r2, #32
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	f002 021f 	and.w	r2, r2, #31
 8003848:	2101      	movs	r1, #1
 800384a:	fa01 f202 	lsl.w	r2, r1, r2
 800384e:	4013      	ands	r3, r2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e07a      	b.n	800394e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003858:	4b1d      	ldr	r3, [pc, #116]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f023 0203 	bic.w	r2, r3, #3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	491a      	ldr	r1, [pc, #104]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 8003866:	4313      	orrs	r3, r2
 8003868:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800386a:	f7fd fde5 	bl	8001438 <HAL_GetTick>
 800386e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003870:	e00a      	b.n	8003888 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003872:	f7fd fde1 	bl	8001438 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003880:	4293      	cmp	r3, r2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e062      	b.n	800394e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003888:	4b11      	ldr	r3, [pc, #68]	@ (80038d0 <HAL_RCC_ClockConfig+0x244>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 020c 	and.w	r2, r3, #12
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	429a      	cmp	r2, r3
 8003898:	d1eb      	bne.n	8003872 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800389a:	4b0c      	ldr	r3, [pc, #48]	@ (80038cc <HAL_RCC_ClockConfig+0x240>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d215      	bcs.n	80038d4 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a8:	4b08      	ldr	r3, [pc, #32]	@ (80038cc <HAL_RCC_ClockConfig+0x240>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f023 0207 	bic.w	r2, r3, #7
 80038b0:	4906      	ldr	r1, [pc, #24]	@ (80038cc <HAL_RCC_ClockConfig+0x240>)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b8:	4b04      	ldr	r3, [pc, #16]	@ (80038cc <HAL_RCC_ClockConfig+0x240>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d006      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e041      	b.n	800394e <HAL_RCC_ClockConfig+0x2c2>
 80038ca:	bf00      	nop
 80038cc:	40022000 	.word	0x40022000
 80038d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d008      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003958 <HAL_RCC_ClockConfig+0x2cc>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	491a      	ldr	r1, [pc, #104]	@ (8003958 <HAL_RCC_ClockConfig+0x2cc>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d009      	beq.n	8003912 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038fe:	4b16      	ldr	r3, [pc, #88]	@ (8003958 <HAL_RCC_ClockConfig+0x2cc>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4912      	ldr	r1, [pc, #72]	@ (8003958 <HAL_RCC_ClockConfig+0x2cc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003912:	f000 f829 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8003916:	4601      	mov	r1, r0
 8003918:	4b0f      	ldr	r3, [pc, #60]	@ (8003958 <HAL_RCC_ClockConfig+0x2cc>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003920:	22f0      	movs	r2, #240	@ 0xf0
 8003922:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	fa92 f2a2 	rbit	r2, r2
 800392a:	60fa      	str	r2, [r7, #12]
  return result;
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	fab2 f282 	clz	r2, r2
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	40d3      	lsrs	r3, r2
 8003936:	4a09      	ldr	r2, [pc, #36]	@ (800395c <HAL_RCC_ClockConfig+0x2d0>)
 8003938:	5cd3      	ldrb	r3, [r2, r3]
 800393a:	fa21 f303 	lsr.w	r3, r1, r3
 800393e:	4a08      	ldr	r2, [pc, #32]	@ (8003960 <HAL_RCC_ClockConfig+0x2d4>)
 8003940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003942:	4b08      	ldr	r3, [pc, #32]	@ (8003964 <HAL_RCC_ClockConfig+0x2d8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7fd fd32 	bl	80013b0 <HAL_InitTick>
  
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3778      	adds	r7, #120	@ 0x78
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000
 800395c:	08004260 	.word	0x08004260
 8003960:	2000005c 	.word	0x2000005c
 8003964:	20000060 	.word	0x20000060

08003968 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	2300      	movs	r3, #0
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	2300      	movs	r3, #0
 800397c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003982:	4b1e      	ldr	r3, [pc, #120]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x94>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b04      	cmp	r3, #4
 8003990:	d002      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0x30>
 8003992:	2b08      	cmp	r3, #8
 8003994:	d003      	beq.n	800399e <HAL_RCC_GetSysClockFreq+0x36>
 8003996:	e026      	b.n	80039e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003998:	4b19      	ldr	r3, [pc, #100]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0x98>)
 800399a:	613b      	str	r3, [r7, #16]
      break;
 800399c:	e026      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	0c9b      	lsrs	r3, r3, #18
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	4a17      	ldr	r2, [pc, #92]	@ (8003a04 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039a8:	5cd3      	ldrb	r3, [r2, r3]
 80039aa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80039ac:	4b13      	ldr	r3, [pc, #76]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x94>)
 80039ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b0:	f003 030f 	and.w	r3, r3, #15
 80039b4:	4a14      	ldr	r2, [pc, #80]	@ (8003a08 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039b6:	5cd3      	ldrb	r3, [r2, r3]
 80039b8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039c4:	4a0e      	ldr	r2, [pc, #56]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0x98>)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	fb02 f303 	mul.w	r3, r2, r3
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	e004      	b.n	80039e0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a0c      	ldr	r2, [pc, #48]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0xa4>)
 80039da:	fb02 f303 	mul.w	r3, r2, r3
 80039de:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	613b      	str	r3, [r7, #16]
      break;
 80039e4:	e002      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039e6:	4b06      	ldr	r3, [pc, #24]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0x98>)
 80039e8:	613b      	str	r3, [r7, #16]
      break;
 80039ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ec:	693b      	ldr	r3, [r7, #16]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	007a1200 	.word	0x007a1200
 8003a04:	08004278 	.word	0x08004278
 8003a08:	08004288 	.word	0x08004288
 8003a0c:	003d0900 	.word	0x003d0900

08003a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a14:	4b03      	ldr	r3, [pc, #12]	@ (8003a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a16:	681b      	ldr	r3, [r3, #0]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	2000005c 	.word	0x2000005c

08003a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003a2e:	f7ff ffef 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a32:	4601      	mov	r1, r0
 8003a34:	4b0b      	ldr	r3, [pc, #44]	@ (8003a64 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a3c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003a40:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	fa92 f2a2 	rbit	r2, r2
 8003a48:	603a      	str	r2, [r7, #0]
  return result;
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	fab2 f282 	clz	r2, r2
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	40d3      	lsrs	r3, r2
 8003a54:	4a04      	ldr	r2, [pc, #16]	@ (8003a68 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003a56:	5cd3      	ldrb	r3, [r2, r3]
 8003a58:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40021000 	.word	0x40021000
 8003a68:	08004270 	.word	0x08004270

08003a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a72:	f7ff ffcd 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a76:	4601      	mov	r1, r0
 8003a78:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003a80:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003a84:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	fa92 f2a2 	rbit	r2, r2
 8003a8c:	603a      	str	r2, [r7, #0]
  return result;
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	fab2 f282 	clz	r2, r2
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	40d3      	lsrs	r3, r2
 8003a98:	4a04      	ldr	r2, [pc, #16]	@ (8003aac <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a9a:	5cd3      	ldrb	r3, [r2, r3]
 8003a9c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	08004270 	.word	0x08004270

08003ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e040      	b.n	8003b44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fd fb7e 	bl	80011d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2224      	movs	r2, #36	@ 0x24
 8003adc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0201 	bic.w	r2, r2, #1
 8003aec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f95e 	bl	8003db8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f825 	bl	8003b4c <UART_SetConfig>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e01b      	b.n	8003b44 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f9dd 	bl	8003efc <UART_CheckIdleState>
 8003b42:	4603      	mov	r3, r0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4b8a      	ldr	r3, [pc, #552]	@ (8003da0 <UART_SetConfig+0x254>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6812      	ldr	r2, [r2, #0]
 8003b7e:	6979      	ldr	r1, [r7, #20]
 8003b80:	430b      	orrs	r3, r1
 8003b82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a78      	ldr	r2, [pc, #480]	@ (8003da4 <UART_SetConfig+0x258>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d120      	bne.n	8003c0a <UART_SetConfig+0xbe>
 8003bc8:	4b77      	ldr	r3, [pc, #476]	@ (8003da8 <UART_SetConfig+0x25c>)
 8003bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bcc:	f003 0303 	and.w	r3, r3, #3
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d817      	bhi.n	8003c04 <UART_SetConfig+0xb8>
 8003bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bdc <UART_SetConfig+0x90>)
 8003bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bda:	bf00      	nop
 8003bdc:	08003bed 	.word	0x08003bed
 8003be0:	08003bf9 	.word	0x08003bf9
 8003be4:	08003bff 	.word	0x08003bff
 8003be8:	08003bf3 	.word	0x08003bf3
 8003bec:	2300      	movs	r3, #0
 8003bee:	77fb      	strb	r3, [r7, #31]
 8003bf0:	e01d      	b.n	8003c2e <UART_SetConfig+0xe2>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	77fb      	strb	r3, [r7, #31]
 8003bf6:	e01a      	b.n	8003c2e <UART_SetConfig+0xe2>
 8003bf8:	2304      	movs	r3, #4
 8003bfa:	77fb      	strb	r3, [r7, #31]
 8003bfc:	e017      	b.n	8003c2e <UART_SetConfig+0xe2>
 8003bfe:	2308      	movs	r3, #8
 8003c00:	77fb      	strb	r3, [r7, #31]
 8003c02:	e014      	b.n	8003c2e <UART_SetConfig+0xe2>
 8003c04:	2310      	movs	r3, #16
 8003c06:	77fb      	strb	r3, [r7, #31]
 8003c08:	e011      	b.n	8003c2e <UART_SetConfig+0xe2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a67      	ldr	r2, [pc, #412]	@ (8003dac <UART_SetConfig+0x260>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d102      	bne.n	8003c1a <UART_SetConfig+0xce>
 8003c14:	2300      	movs	r3, #0
 8003c16:	77fb      	strb	r3, [r7, #31]
 8003c18:	e009      	b.n	8003c2e <UART_SetConfig+0xe2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a64      	ldr	r2, [pc, #400]	@ (8003db0 <UART_SetConfig+0x264>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d102      	bne.n	8003c2a <UART_SetConfig+0xde>
 8003c24:	2300      	movs	r3, #0
 8003c26:	77fb      	strb	r3, [r7, #31]
 8003c28:	e001      	b.n	8003c2e <UART_SetConfig+0xe2>
 8003c2a:	2310      	movs	r3, #16
 8003c2c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c36:	d15a      	bne.n	8003cee <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003c38:	7ffb      	ldrb	r3, [r7, #31]
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d827      	bhi.n	8003c8e <UART_SetConfig+0x142>
 8003c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c44 <UART_SetConfig+0xf8>)
 8003c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c44:	08003c69 	.word	0x08003c69
 8003c48:	08003c71 	.word	0x08003c71
 8003c4c:	08003c79 	.word	0x08003c79
 8003c50:	08003c8f 	.word	0x08003c8f
 8003c54:	08003c7f 	.word	0x08003c7f
 8003c58:	08003c8f 	.word	0x08003c8f
 8003c5c:	08003c8f 	.word	0x08003c8f
 8003c60:	08003c8f 	.word	0x08003c8f
 8003c64:	08003c87 	.word	0x08003c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c68:	f7ff fede 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8003c6c:	61b8      	str	r0, [r7, #24]
        break;
 8003c6e:	e013      	b.n	8003c98 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c70:	f7ff fefc 	bl	8003a6c <HAL_RCC_GetPCLK2Freq>
 8003c74:	61b8      	str	r0, [r7, #24]
        break;
 8003c76:	e00f      	b.n	8003c98 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c78:	4b4e      	ldr	r3, [pc, #312]	@ (8003db4 <UART_SetConfig+0x268>)
 8003c7a:	61bb      	str	r3, [r7, #24]
        break;
 8003c7c:	e00c      	b.n	8003c98 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c7e:	f7ff fe73 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8003c82:	61b8      	str	r0, [r7, #24]
        break;
 8003c84:	e008      	b.n	8003c98 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c8a:	61bb      	str	r3, [r7, #24]
        break;
 8003c8c:	e004      	b.n	8003c98 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	77bb      	strb	r3, [r7, #30]
        break;
 8003c96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d074      	beq.n	8003d88 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	005a      	lsls	r2, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	085b      	lsrs	r3, r3, #1
 8003ca8:	441a      	add	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	2b0f      	cmp	r3, #15
 8003cb8:	d916      	bls.n	8003ce8 <UART_SetConfig+0x19c>
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cc0:	d212      	bcs.n	8003ce8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	f023 030f 	bic.w	r3, r3, #15
 8003cca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	085b      	lsrs	r3, r3, #1
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	89fb      	ldrh	r3, [r7, #14]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	89fa      	ldrh	r2, [r7, #14]
 8003ce4:	60da      	str	r2, [r3, #12]
 8003ce6:	e04f      	b.n	8003d88 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	77bb      	strb	r3, [r7, #30]
 8003cec:	e04c      	b.n	8003d88 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cee:	7ffb      	ldrb	r3, [r7, #31]
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d828      	bhi.n	8003d46 <UART_SetConfig+0x1fa>
 8003cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cfc <UART_SetConfig+0x1b0>)
 8003cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfa:	bf00      	nop
 8003cfc:	08003d21 	.word	0x08003d21
 8003d00:	08003d29 	.word	0x08003d29
 8003d04:	08003d31 	.word	0x08003d31
 8003d08:	08003d47 	.word	0x08003d47
 8003d0c:	08003d37 	.word	0x08003d37
 8003d10:	08003d47 	.word	0x08003d47
 8003d14:	08003d47 	.word	0x08003d47
 8003d18:	08003d47 	.word	0x08003d47
 8003d1c:	08003d3f 	.word	0x08003d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d20:	f7ff fe82 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8003d24:	61b8      	str	r0, [r7, #24]
        break;
 8003d26:	e013      	b.n	8003d50 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d28:	f7ff fea0 	bl	8003a6c <HAL_RCC_GetPCLK2Freq>
 8003d2c:	61b8      	str	r0, [r7, #24]
        break;
 8003d2e:	e00f      	b.n	8003d50 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d30:	4b20      	ldr	r3, [pc, #128]	@ (8003db4 <UART_SetConfig+0x268>)
 8003d32:	61bb      	str	r3, [r7, #24]
        break;
 8003d34:	e00c      	b.n	8003d50 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d36:	f7ff fe17 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8003d3a:	61b8      	str	r0, [r7, #24]
        break;
 8003d3c:	e008      	b.n	8003d50 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d42:	61bb      	str	r3, [r7, #24]
        break;
 8003d44:	e004      	b.n	8003d50 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	77bb      	strb	r3, [r7, #30]
        break;
 8003d4e:	bf00      	nop
    }

    if (pclk != 0U)
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d018      	beq.n	8003d88 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	085a      	lsrs	r2, r3, #1
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	441a      	add	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b0f      	cmp	r3, #15
 8003d6e:	d909      	bls.n	8003d84 <UART_SetConfig+0x238>
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d76:	d205      	bcs.n	8003d84 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	60da      	str	r2, [r3, #12]
 8003d82:	e001      	b.n	8003d88 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d94:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3720      	adds	r7, #32
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	efff69f3 	.word	0xefff69f3
 8003da4:	40013800 	.word	0x40013800
 8003da8:	40021000 	.word	0x40021000
 8003dac:	40004400 	.word	0x40004400
 8003db0:	40004800 	.word	0x40004800
 8003db4:	007a1200 	.word	0x007a1200

08003db8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6e:	f003 0320 	and.w	r3, r3, #32
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d01a      	beq.n	8003ece <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eb6:	d10a      	bne.n	8003ece <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	605a      	str	r2, [r3, #4]
  }
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b098      	sub	sp, #96	@ 0x60
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f0c:	f7fd fa94 	bl	8001438 <HAL_GetTick>
 8003f10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d12e      	bne.n	8003f7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f88c 	bl	800404c <UART_WaitOnFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d021      	beq.n	8003f7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f58:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f5a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e6      	bne.n	8003f3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e062      	b.n	8004044 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d149      	bne.n	8004020 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f94:	2200      	movs	r2, #0
 8003f96:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f856 	bl	800404c <UART_WaitOnFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d03c      	beq.n	8004020 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	623b      	str	r3, [r7, #32]
   return(result);
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e6      	bne.n	8003fa6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3308      	adds	r3, #8
 8003fde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	e853 3f00 	ldrex	r3, [r3]
 8003fe6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0301 	bic.w	r3, r3, #1
 8003fee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ff8:	61fa      	str	r2, [r7, #28]
 8003ffa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	69b9      	ldr	r1, [r7, #24]
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	e841 2300 	strex	r3, r2, [r1]
 8004004:	617b      	str	r3, [r7, #20]
   return(result);
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e5      	bne.n	8003fd8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e011      	b.n	8004044 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3758      	adds	r7, #88	@ 0x58
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800405c:	e04f      	b.n	80040fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004064:	d04b      	beq.n	80040fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004066:	f7fd f9e7 	bl	8001438 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	429a      	cmp	r2, r3
 8004074:	d302      	bcc.n	800407c <UART_WaitOnFlagUntilTimeout+0x30>
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e04e      	b.n	800411e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	d037      	beq.n	80040fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b80      	cmp	r3, #128	@ 0x80
 8004092:	d034      	beq.n	80040fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b40      	cmp	r3, #64	@ 0x40
 8004098:	d031      	beq.n	80040fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	f003 0308 	and.w	r3, r3, #8
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d110      	bne.n	80040ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2208      	movs	r2, #8
 80040ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f838 	bl	8004126 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2208      	movs	r2, #8
 80040ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e029      	b.n	800411e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040d8:	d111      	bne.n	80040fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f81e 	bl	8004126 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e00f      	b.n	800411e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4013      	ands	r3, r2
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	429a      	cmp	r2, r3
 800410c:	bf0c      	ite	eq
 800410e:	2301      	moveq	r3, #1
 8004110:	2300      	movne	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	79fb      	ldrb	r3, [r7, #7]
 8004118:	429a      	cmp	r2, r3
 800411a:	d0a0      	beq.n	800405e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004126:	b480      	push	{r7}
 8004128:	b095      	sub	sp, #84	@ 0x54
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800413c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004142:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800414c:	643b      	str	r3, [r7, #64]	@ 0x40
 800414e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004152:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004154:	e841 2300 	strex	r3, r2, [r1]
 8004158:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800415a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e6      	bne.n	800412e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3308      	adds	r3, #8
 8004166:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	e853 3f00 	ldrex	r3, [r3]
 800416e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f023 0301 	bic.w	r3, r3, #1
 8004176:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3308      	adds	r3, #8
 800417e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004180:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004182:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004184:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004188:	e841 2300 	strex	r3, r2, [r1]
 800418c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800418e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1e5      	bne.n	8004160 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004198:	2b01      	cmp	r3, #1
 800419a:	d118      	bne.n	80041ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	e853 3f00 	ldrex	r3, [r3]
 80041a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f023 0310 	bic.w	r3, r3, #16
 80041b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041ba:	61bb      	str	r3, [r7, #24]
 80041bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	6979      	ldr	r1, [r7, #20]
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	613b      	str	r3, [r7, #16]
   return(result);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e6      	bne.n	800419c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80041e2:	bf00      	nop
 80041e4:	3754      	adds	r7, #84	@ 0x54
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <memset>:
 80041ee:	4402      	add	r2, r0
 80041f0:	4603      	mov	r3, r0
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d100      	bne.n	80041f8 <memset+0xa>
 80041f6:	4770      	bx	lr
 80041f8:	f803 1b01 	strb.w	r1, [r3], #1
 80041fc:	e7f9      	b.n	80041f2 <memset+0x4>
	...

08004200 <__libc_init_array>:
 8004200:	b570      	push	{r4, r5, r6, lr}
 8004202:	4d0d      	ldr	r5, [pc, #52]	@ (8004238 <__libc_init_array+0x38>)
 8004204:	4c0d      	ldr	r4, [pc, #52]	@ (800423c <__libc_init_array+0x3c>)
 8004206:	1b64      	subs	r4, r4, r5
 8004208:	10a4      	asrs	r4, r4, #2
 800420a:	2600      	movs	r6, #0
 800420c:	42a6      	cmp	r6, r4
 800420e:	d109      	bne.n	8004224 <__libc_init_array+0x24>
 8004210:	4d0b      	ldr	r5, [pc, #44]	@ (8004240 <__libc_init_array+0x40>)
 8004212:	4c0c      	ldr	r4, [pc, #48]	@ (8004244 <__libc_init_array+0x44>)
 8004214:	f000 f818 	bl	8004248 <_init>
 8004218:	1b64      	subs	r4, r4, r5
 800421a:	10a4      	asrs	r4, r4, #2
 800421c:	2600      	movs	r6, #0
 800421e:	42a6      	cmp	r6, r4
 8004220:	d105      	bne.n	800422e <__libc_init_array+0x2e>
 8004222:	bd70      	pop	{r4, r5, r6, pc}
 8004224:	f855 3b04 	ldr.w	r3, [r5], #4
 8004228:	4798      	blx	r3
 800422a:	3601      	adds	r6, #1
 800422c:	e7ee      	b.n	800420c <__libc_init_array+0xc>
 800422e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004232:	4798      	blx	r3
 8004234:	3601      	adds	r6, #1
 8004236:	e7f2      	b.n	800421e <__libc_init_array+0x1e>
 8004238:	08004298 	.word	0x08004298
 800423c:	08004298 	.word	0x08004298
 8004240:	08004298 	.word	0x08004298
 8004244:	0800429c 	.word	0x0800429c

08004248 <_init>:
 8004248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424a:	bf00      	nop
 800424c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424e:	bc08      	pop	{r3}
 8004250:	469e      	mov	lr, r3
 8004252:	4770      	bx	lr

08004254 <_fini>:
 8004254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004256:	bf00      	nop
 8004258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800425a:	bc08      	pop	{r3}
 800425c:	469e      	mov	lr, r3
 800425e:	4770      	bx	lr
